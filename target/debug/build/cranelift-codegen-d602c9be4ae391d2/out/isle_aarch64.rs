// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /Users/rajeeb/Work/personal/fluence-fil-bangalore/target/debug/build/cranelift-codegen-d602c9be4ae391d2/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: &VecMachLabel, arg1: u8) -> BranchTarget;
    fn targets_jt_size(&mut self, arg0: &VecMachLabel) -> u32;
    fn targets_jt_space(&mut self, arg0: &VecMachLabel) -> CodeOffset;
    fn targets_jt_info(&mut self, arg0: &VecMachLabel) -> BoxJTSequenceInfo;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn imm12_from_negated_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn pair_amode(&mut self, arg0: Value, arg1: u32) -> PairAMode;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn amode(&mut self, arg0: Type, arg1: Value, arg2: u32) -> AMode;
    fn constant_f32(&mut self, arg0: u64) -> Reg;
    fn constant_f64(&mut self, arg0: u64) -> Reg;
    fn constant_f128(&mut self, arg0: u128) -> Reg;
    fn splat_const(&mut self, arg0: u64, arg1: &VectorSize) -> Reg;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    LoadFpuConst128 {
        rd: WritableReg,
        const_data: u128,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
    },
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
        rets: VecRetPair,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        info: BoxJTSequenceInfo,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Pacisp {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 951.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 989.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 997.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1035.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1052.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
        ty: Type,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        ty: Type,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
        ty: Type,
    },
    SPOffset {
        off: i64,
        ty: Type,
    },
    FPOffset {
        off: i64,
        ty: Type,
    },
    NominalSPOffset {
        off: i64,
        ty: Type,
    },
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1240.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1250.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1261.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1267.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1280.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1294.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1307.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1316.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Sqrdmulh,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1393.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1402.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1459.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1474.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1488.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1500.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1509.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1517.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1528.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1537.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1548.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1555.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1570.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1586.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    A,
    B,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1593.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 2739.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src/isa/aarch64/inst.isle line 3435.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 1158.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/aarch64/inst.isle line 1159.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src/isa/aarch64/inst.isle line 1157"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1171.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1172.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src/isa/aarch64/inst.isle line 1173.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src/isa/aarch64/inst.isle line 1174.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src/isa/aarch64/inst.isle line 1175.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 1177.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 1178.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src/isa/aarch64/inst.isle line 1169"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1182.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1183.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1184.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1185.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1186.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1187.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1188.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1189.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src/isa/aarch64/inst.isle line 1181"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                match v2.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1224.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1225.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v2.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1226.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1227.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v2.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1228.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1229.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1230.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8 => {
                match v13.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1231.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1232.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v13.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1233.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1234.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v13.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1235.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1236.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v13.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1237.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src/isa/aarch64/inst.isle line 1223"
    )
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src/isa/aarch64/inst.isle line 1759.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1767.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1774.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1781.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1788.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1795.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1802.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1809.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1816.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1824.
    return v9;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1830.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1836.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1843.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1850.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 1857.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1863.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1870.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1877.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFromFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1884.
    return v6;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1891.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1898.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 1906.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src/isa/aarch64/inst.isle line 1905"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1914.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 1922.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1929.
    return v10;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1936.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 1943.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 1951.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 1959.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 1968.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 1975.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 1981.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 1987.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 1993.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 1997.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2004.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2012.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2019.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2025.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2032.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2041.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2050.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2057.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2064.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2071.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2079.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2086.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v5 = C::temp_writable_reg(ctx, F32);
            let v7 = C::writable_reg_to_reg(ctx, v5);
            let v6 = MInst::FpuCSel32 {
                rd: v5,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v6,
                result: v7,
            };
            // Rule at src/isa/aarch64/inst.isle line 2094.
            return v8;
        }
        F64 => {
            let v10 = C::temp_writable_reg(ctx, F64);
            let v12 = C::writable_reg_to_reg(ctx, v10);
            let v11 = MInst::FpuCSel64 {
                rd: v10,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v11,
                result: v12,
            };
            // Rule at src/isa/aarch64/inst.isle line 2100.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src/isa/aarch64/inst.isle line 2093"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2108.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2116.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/aarch64/inst.isle line 2127.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2123.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2134.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2141.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2148.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2155.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2162.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2168.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2175.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2182.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2189.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2196.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2203.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2210.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2218.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2232.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2240.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2247.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2253.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2263.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = &constructor_produces_flags_append(ctx, arg5, &v6);
    // Rule at src/isa/aarch64/inst.isle line 2273.
    return v7.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 2278.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2288.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2291.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2294.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2297.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2300.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2303.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2308.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2311.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2314.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2317.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2320.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::value_regs_get(ctx, arg1, 0x0);
    let v7 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src/isa/aarch64/inst.isle line 2323.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2343.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2348.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2352.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2356.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2360.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2364.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2368.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2372.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2376.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2380.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2384.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2388.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2392.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2396.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2400.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2404.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2408.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2412.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2416.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/aarch64/inst.isle line 2420.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src/isa/aarch64/inst.isle line 2425.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src/isa/aarch64/inst.isle line 2430.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2435.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2439.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2443.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 2448.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2454.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2458.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2463.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2466.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2469.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2472.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2476.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2480.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2484.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2488.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2492.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2496.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2500.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2504.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2507.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2511.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2514.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2518.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2521.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2525.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2529.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2533.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2538.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2541.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2546.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2549.
    return v4;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2552.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2557.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2560.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2563.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2567.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2572.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2575.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2579.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2583.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2588.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2591.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2596.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2601.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2606.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2611.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2614.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2617.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2622.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2627.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src/isa/aarch64/inst.isle line 2632.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 2638.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2644.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2649.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2654.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2659.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2664.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2669.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2674.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2679.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2684.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2689.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src/isa/aarch64/inst.isle line 2694.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2703.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2706.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2709.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2712.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2715.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2718.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2721.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2724.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2730.
    return v7;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                // Rule at src/isa/aarch64/inst.isle line 2758.
                return v8;
            }
            let v9 = C::ty_32_or_64(ctx, v2);
            if let Some(v10) = v9 {
                let v11 = C::move_wide_const_from_inverted_u64(ctx, v10, arg2);
                if let Some(v12) = v11 {
                    let v13 = &constructor_operand_size(ctx, v10);
                    let v14 = constructor_movn(ctx, v12, v13);
                    // Rule at src/isa/aarch64/inst.isle line 2761.
                    return v14;
                }
            }
            let v15 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v16) = v15 {
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_orr_imm(ctx, v2, v17, v16);
                // Rule at src/isa/aarch64/inst.isle line 2767.
                return v18;
            }
        }
        let v19 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src/isa/aarch64/inst.isle line 2775.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/aarch64/inst.isle line 2754"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2786.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2787.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2782.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/aarch64/inst.isle line 2781"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2795.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2796.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2791.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/aarch64/inst.isle line 2790"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2800.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2804.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/aarch64/inst.isle line 2799"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2808.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2812.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/aarch64/inst.isle line 2807"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/aarch64/inst.isle line 2817.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 2822.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 2823.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src/isa/aarch64/inst.isle line 2821"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v7 = C::u8_into_imm12(ctx, 0x1);
    let v8 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v4.clone(),
        rd: v5,
        rn: arg2,
        imm12: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = &constructor_size_from_ty(ctx, arg0);
    let v11 = C::u8_into_uimm5(ctx, 0x1);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = MInst::CCmpImm {
        size: v10.clone(),
        rn: arg1,
        imm: v11,
        nzcv: v13,
        cond: Cond::Eq,
    };
    let v16 = C::emit(ctx, &v15);
    let v18 = C::cond_br_cond(ctx, &Cond::Vs);
    let v19 = &C::trap_code_integer_overflow(ctx);
    let v20 = MInst::TrapIf {
        kind: v18,
        trap_code: v19.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    // Rule at src/isa/aarch64/inst.isle line 2829.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src/isa/aarch64/inst.isle line 2848.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 2855.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src/isa/aarch64/inst.isle line 2854"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src/isa/aarch64/inst.isle line 2880.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src/isa/aarch64/inst.isle line 2872.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src/isa/aarch64/inst.isle line 2877.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 2869.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2865.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src/isa/aarch64/inst.isle line 2892.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 2889.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2887.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0);
    let v8 = C::value_regs_get(ctx, v4, 0x1);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0);
    let v11 = C::value_regs_get(ctx, v9, 0x1);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src/isa/aarch64/inst.isle line 2901.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2916.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2923.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &AMode) -> Reg {
    match arg0 {
        &AMode::Unscaled {
            rn: v5,
            simm9: ref v6,
        } => {
            let v7 = C::is_zero_simm9(ctx, v6);
            if let Some(v8) = v7 {
                // Rule at src/isa/aarch64/inst.isle line 2935.
                return v5;
            }
        }
        &AMode::UnsignedOffset {
            rn: v1,
            uimm12: ref v2,
        } => {
            let v3 = C::is_zero_uimm12(ctx, v2);
            if let Some(v4) = v3 {
                // Rule at src/isa/aarch64/inst.isle line 2931.
                return v1;
            }
        }
        &AMode::RegOffset {
            rn: v9,
            off: v10,
            ty: v11,
        } => {
            if v10 == 0x0 {
                // Rule at src/isa/aarch64/inst.isle line 2939.
                return v9;
            }
        }
        &AMode::SPOffset { off: v15, ty: v16 } => {
            if v15 == 0x0 {
                let v17 = C::stack_reg(ctx);
                // Rule at src/isa/aarch64/inst.isle line 2941.
                return v17;
            }
        }
        &AMode::FPOffset { off: v12, ty: v13 } => {
            if v12 == 0x0 {
                let v14 = C::fp_reg(ctx);
                // Rule at src/isa/aarch64/inst.isle line 2940.
                return v14;
            }
        }
        _ => {}
    }
    let v19 = C::temp_writable_reg(ctx, I64);
    let v20 = MInst::LoadAddr {
        rd: v19,
        mem: arg0.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    let v22 = C::writable_reg_to_reg(ctx, v19);
    // Rule at src/isa/aarch64/inst.isle line 2943.
    return v22;
}

// Generated as internal constructor for term sink_load_into_amode.
pub fn constructor_sink_load_into_amode<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> AMode {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v7 = C::sink_inst(ctx, arg1);
            let v8 = C::offset32_to_u32(ctx, v6);
            let v9 = &C::amode(ctx, arg0, v4, v8);
            // Rule at src/isa/aarch64/inst.isle line 2954.
            return v9.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_amode", "src/isa/aarch64/inst.isle line 2953"
    )
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3010.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3015.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3020.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3040.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3045.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3050.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3055.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 3065.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3079.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3093.
    return v10;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3101.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3107.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3123.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3127.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/aarch64/inst.isle line 3131.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 0x8, ty: I64 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src/isa/aarch64/inst.isle line 3147.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src/isa/aarch64/inst.isle line 3130"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 3163.
            return 0x1F;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 3162.
            return 0x3F;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src/isa/aarch64/inst.isle line 3161"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/aarch64/inst.isle line 3168.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v23 = C::lane_type(ctx, arg2);
        let v24 = constructor_max_shift(ctx, v23);
        let v25 = &constructor_vector_size(ctx, arg2);
        let v26 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, v24, arg1, v25);
        let v28 = &constructor_vector_size(ctx, arg2);
        let v29 = constructor_max_shift(ctx, v23);
        let v30 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v26,
            size: v28.clone(),
            imm: v29,
        };
        let v31 = C::emit(ctx, &v30);
        let v32 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src/isa/aarch64/inst.isle line 3173.
        return v32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src/isa/aarch64/inst.isle line 3167"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3182.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3195.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3203.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3211.
            return v30;
        }
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3219.
            return v35;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src/isa/aarch64/inst.isle line 3194"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3229.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src/isa/aarch64/inst.isle line 3245.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3264.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3262.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src/isa/aarch64/inst.isle line 3272.
                return v26;
            }
        }
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src/isa/aarch64/inst.isle line 3266.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src/isa/aarch64/inst.isle line 3261"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80);
            // Rule at src/isa/aarch64/inst.isle line 3285.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000);
            // Rule at src/isa/aarch64/inst.isle line 3286.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src/isa/aarch64/inst.isle line 3284"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7F);
            // Rule at src/isa/aarch64/inst.isle line 3289.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7FFF);
            // Rule at src/isa/aarch64/inst.isle line 3290.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src/isa/aarch64/inst.isle line 3288"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3293.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3301.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3317.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3323.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3331.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3375.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3353.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src/isa/aarch64/inst.isle line 3378.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src/isa/aarch64/inst.isle line 3356.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3388.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3404.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3367.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src/isa/aarch64/inst.isle line 3343.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3340.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3391.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3401.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3370.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3382.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3360.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3398.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3385.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3363.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3395.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src/isa/aarch64/inst.isle line 3337"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src/isa/aarch64/inst.isle line 3416.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src/isa/aarch64/inst.isle line 3420.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src/isa/aarch64/inst.isle line 3415"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3429.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/aarch64/inst.isle line 3440.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src/isa/aarch64/inst.isle line 3444.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src/isa/aarch64/inst.isle line 3443"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3449.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src/isa/aarch64/inst.isle line 3448"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3453.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src/isa/aarch64/inst.isle line 3452"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, true);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3487.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src/isa/aarch64/inst.isle line 3553.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src/isa/aarch64/inst.isle line 3555.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src/isa/aarch64/inst.isle line 3491.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, false);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3494.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src/isa/aarch64/inst.isle line 3497.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3500.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src/isa/aarch64/inst.isle line 3458"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/inst.isle line 3468.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3530.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3534.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0);
            let v29 = C::value_regs_get(ctx, v24, 0x1);
            let v30 = C::value_regs_get(ctx, v25, 0x0);
            let v31 = C::value_regs_get(ctx, v25, 0x1);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src/isa/aarch64/inst.isle line 3563.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src/isa/aarch64/inst.isle line 3482.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src/isa/aarch64/inst.isle line 3459"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3658.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3637.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3666.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3647.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3662.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3642.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3670.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src/isa/aarch64/inst.isle line 3652.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3464.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3515.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3510.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3521.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3524.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src/isa/aarch64/inst.isle line 3461"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(ctx: &mut C, arg0: Type, arg1: bool) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                true => {
                    // Rule at src/isa/aarch64/inst.isle line 3476.
                    return ExtendOp::SXTB;
                }
                false => {
                    // Rule at src/isa/aarch64/inst.isle line 3478.
                    return ExtendOp::UXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                true => {
                    // Rule at src/isa/aarch64/inst.isle line 3477.
                    return ExtendOp::SXTH;
                }
                false => {
                    // Rule at src/isa/aarch64/inst.isle line 3479.
                    return ExtendOp::UXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src/isa/aarch64/inst.isle line 3475"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0);
    let v7 = C::value_regs_get(ctx, v2, 0x1);
    let v8 = C::value_regs_get(ctx, v3, 0x0);
    let v9 = C::value_regs_get(ctx, v3, 0x1);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src/isa/aarch64/inst.isle line 3542.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 3578.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src/isa/aarch64/inst.isle line 3627.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src/isa/aarch64/inst.isle line 3615.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/aarch64/inst.isle line 3606.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0);
            let v11 = C::u8_into_imm12(ctx, 0x0);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src/isa/aarch64/inst.isle line 3593.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/aarch64/inst.isle line 3586"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    if arg2 == I128 {
        let v21 = C::temp_writable_reg(ctx, I64);
        let v22 = C::temp_writable_reg(ctx, I64);
        let v23 = C::put_in_regs(ctx, arg3);
        let v24 = C::put_in_regs(ctx, arg4);
        let v26 = C::value_regs_get(ctx, v23, 0x0);
        let v28 = C::value_regs_get(ctx, v23, 0x1);
        let v29 = C::value_regs_get(ctx, v24, 0x0);
        let v30 = C::value_regs_get(ctx, v24, 0x1);
        let v33 = C::writable_reg_to_reg(ctx, v21);
        let v34 = C::writable_reg_to_reg(ctx, v22);
        let v35 = C::value_regs(ctx, v33, v34);
        let v31 = MInst::CSel {
            rd: v21,
            cond: arg1.clone(),
            rn: v26,
            rm: v29,
        };
        let v32 = MInst::CSel {
            rd: v22,
            cond: arg1.clone(),
            rn: v28,
            rm: v30,
        };
        let v36 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v31,
            inst2: v32,
            result: v35,
        };
        let v37 = constructor_with_flags(ctx, arg0, &v36);
        // Rule at src/isa/aarch64/inst.isle line 3684.
        return v37;
    }
    let v11 = C::ty_vec128(ctx, arg2);
    if let Some(v12) = v11 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v7, v8);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src/isa/aarch64/inst.isle line 3679.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_fpu_csel(ctx, v4, arg1, v7, v8);
        let v10 = constructor_with_flags(ctx, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 3677.
        return v10;
    }
    let v38 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v39) = v38 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v40 = &constructor_csel(ctx, arg1, v7, v8);
        let v41 = constructor_with_flags(ctx, arg0, v40);
        // Rule at src/isa/aarch64/inst.isle line 3698.
        return v41;
    }
    let v15 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v16) = v15 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v18 = &constructor_fpu_csel(ctx, F64, arg1, v7, v8);
        let v19 = constructor_with_flags(ctx, arg0, v18);
        // Rule at src/isa/aarch64/inst.isle line 3681.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src/isa/aarch64/inst.isle line 3676"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3704.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: BoxJTSequenceInfo,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::JTSequence {
        info: arg1,
        ridx: arg0,
        rtmp1: v3,
        rtmp2: v4,
    };
    let v6 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 3726.
    return v6;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 3734.
    return v4;
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3740.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 3746.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: &VecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::targets_jt_info(ctx, arg2);
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, v5);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src/isa/aarch64/inst.isle line 3752.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = C::targets_jt_info(ctx, arg2);
    let v15 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v16 = &constructor_jt_sequence(ctx, arg1, v14);
    let v17 = &constructor_with_flags_side_effect(ctx, v15, v16);
    let v18 = constructor_emit_side_effect(ctx, v17);
    // Rule at src/isa/aarch64/inst.isle line 3757.
    return v18;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst_neon.isle line 4.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1298,
            args: ref v1299,
            flags: v1300,
        } => {
            if let &Opcode::AtomicCas = v1298 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1204 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1205) = v1204 {
                        let v1225 = C::use_lse(ctx, arg0);
                        if let Some(v1226) = v1225 {
                            let v1301 = C::unpack_value_array_3(ctx, v1299);
                            let v1305 = C::put_in_reg(ctx, v1301.0);
                            let v1306 = C::put_in_reg(ctx, v1301.1);
                            let v1307 = C::put_in_reg(ctx, v1301.2);
                            let v1308 =
                                constructor_lse_atomic_cas(ctx, v1305, v1306, v1307, v1205, v1300);
                            let v1309 = constructor_output_reg(ctx, v1308);
                            // Rule at src/isa/aarch64/lower.isle line 1940.
                            return Some(v1309);
                        }
                        let v1301 = C::unpack_value_array_3(ctx, v1299);
                        let v1305 = C::put_in_reg(ctx, v1301.0);
                        let v1306 = C::put_in_reg(ctx, v1301.1);
                        let v1307 = C::put_in_reg(ctx, v1301.2);
                        let v1310 =
                            constructor_atomic_cas_loop(ctx, v1305, v1306, v1307, v1205, v1300);
                        let v1311 = constructor_output_reg(ctx, v1310);
                        // Rule at src/isa/aarch64/lower.isle line 1945.
                        return Some(v1311);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1227,
            args: ref v1228,
            flags: v1229,
            op: ref v1230,
        } => {
            if let &Opcode::AtomicRmw = v1227 {
                match v1230 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1236 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1237 = constructor_output_reg(ctx, v1236);
                                    // Rule at src/isa/aarch64/lower.isle line 1867.
                                    return Some(v1237);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1266 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1267 = constructor_output_reg(ctx, v1266);
                                // Rule at src/isa/aarch64/lower.isle line 1905.
                                return Some(v1267);
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1129 = C::zero_reg(ctx);
                                    let v1261 = constructor_eon(ctx, v1205, v1235, v1129);
                                    let v1262 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1231.0,
                                        v1261,
                                        v1205,
                                        v1229,
                                    );
                                    let v1263 = constructor_output_reg(ctx, v1262);
                                    // Rule at src/isa/aarch64/lower.isle line 1899.
                                    return Some(v1263);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1272 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1273 = constructor_output_reg(ctx, v1272);
                                // Rule at src/isa/aarch64/lower.isle line 1911.
                                return Some(v1273);
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1275 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1276 = constructor_output_reg(ctx, v1275);
                                // Rule at src/isa/aarch64/lower.isle line 1914.
                                return Some(v1276);
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1242 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1243 = constructor_output_reg(ctx, v1242);
                                    // Rule at src/isa/aarch64/lower.isle line 1875.
                                    return Some(v1243);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1278 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1279 = constructor_output_reg(ctx, v1278);
                                // Rule at src/isa/aarch64/lower.isle line 1917.
                                return Some(v1279);
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1245 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1246 = constructor_output_reg(ctx, v1245);
                                    // Rule at src/isa/aarch64/lower.isle line 1879.
                                    return Some(v1246);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1287 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1288 = constructor_output_reg(ctx, v1287);
                                // Rule at src/isa/aarch64/lower.isle line 1926.
                                return Some(v1288);
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1248 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1249 = constructor_output_reg(ctx, v1248);
                                    // Rule at src/isa/aarch64/lower.isle line 1883.
                                    return Some(v1249);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1284 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1285 = constructor_output_reg(ctx, v1284);
                                // Rule at src/isa/aarch64/lower.isle line 1923.
                                return Some(v1285);
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v511 = C::zero_reg(ctx);
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1256 = C::put_in_reg(ctx, v1231.1);
                                    let v1257 = constructor_sub(ctx, v1205, v511, v1256);
                                    let v1258 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1231.0,
                                        v1257,
                                        v1205,
                                        v1229,
                                    );
                                    let v1259 = constructor_output_reg(ctx, v1258);
                                    // Rule at src/isa/aarch64/lower.isle line 1895.
                                    return Some(v1259);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1269 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1270 = constructor_output_reg(ctx, v1269);
                                // Rule at src/isa/aarch64/lower.isle line 1908.
                                return Some(v1270);
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1251 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1252 = constructor_output_reg(ctx, v1251);
                                    // Rule at src/isa/aarch64/lower.isle line 1887.
                                    return Some(v1252);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1293 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1294 = constructor_output_reg(ctx, v1293);
                                // Rule at src/isa/aarch64/lower.isle line 1932.
                                return Some(v1294);
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1254 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1255 = constructor_output_reg(ctx, v1254);
                                    // Rule at src/isa/aarch64/lower.isle line 1891.
                                    return Some(v1255);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1290 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1291 = constructor_output_reg(ctx, v1290);
                                // Rule at src/isa/aarch64/lower.isle line 1929.
                                return Some(v1291);
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1296 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1297 = constructor_output_reg(ctx, v1296);
                                // Rule at src/isa/aarch64/lower.isle line 1935.
                                return Some(v1297);
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1204 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1205) = v1204 {
                                let v1225 = C::use_lse(ctx, arg0);
                                if let Some(v1226) = v1225 {
                                    let v1231 = C::unpack_value_array_2(ctx, v1228);
                                    let v1235 = C::put_in_reg(ctx, v1231.1);
                                    let v1239 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1231.0,
                                        v1235,
                                        v1205,
                                        v1229,
                                    );
                                    let v1240 = constructor_output_reg(ctx, v1239);
                                    // Rule at src/isa/aarch64/lower.isle line 1871.
                                    return Some(v1240);
                                }
                                let v1231 = C::unpack_value_array_2(ctx, v1228);
                                let v1265 = C::put_in_reg(ctx, v1231.0);
                                let v1256 = C::put_in_reg(ctx, v1231.1);
                                let v1281 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1265,
                                    v1256,
                                    v1205,
                                    v1229,
                                );
                                let v1282 = constructor_output_reg(ctx, v1281);
                                // Rule at src/isa/aarch64/lower.isle line 1920.
                                return Some(v1282);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v29,
            args: ref v30,
        } => {
            match v29 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v150 = constructor_vec_tbl(ctx, v34, v35);
                        let v151 = constructor_output_reg(ctx, v150);
                        // Rule at src/isa/aarch64/lower.isle line 127.
                        return Some(v151);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v606 = C::ty_int(ctx, v3);
                            if let Some(v607) = v606 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v612 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v613 = C::output(ctx, v612);
                                // Rule at src/isa/aarch64/lower.isle line 911.
                                return Some(v613);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v626 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v56,
                                v248,
                                &VectorSize::Size64x2,
                            );
                            let v627 = C::put_in_reg(ctx, v31.0);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v628 = constructor_bsl(ctx, I64X2, v626, v627, v310);
                            let v629 = constructor_output_reg(ctx, v628);
                            // Rule at src/isa/aarch64/lower.isle line 923.
                            return Some(v629);
                        }
                        let v619 = C::not_i64x2(ctx, v3);
                        if let Some(v620) = v619 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v622 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v34, v35, v121);
                            let v623 = constructor_output_reg(ctx, v622);
                            // Rule at src/isa/aarch64/lower.isle line 920.
                            return Some(v623);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v606 = C::ty_int(ctx, v3);
                            if let Some(v607) = v606 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v609 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lo,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v610 = C::output(ctx, v609);
                                // Rule at src/isa/aarch64/lower.isle line 909.
                                return Some(v610);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v634 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v56,
                                v248,
                                &VectorSize::Size64x2,
                            );
                            let v627 = C::put_in_reg(ctx, v31.0);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v635 = constructor_bsl(ctx, I64X2, v634, v627, v310);
                            let v636 = constructor_output_reg(ctx, v635);
                            // Rule at src/isa/aarch64/lower.isle line 929.
                            return Some(v636);
                        }
                        let v619 = C::not_i64x2(ctx, v3);
                        if let Some(v620) = v619 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v631 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v34, v35, v121);
                            let v632 = constructor_output_reg(ctx, v631);
                            // Rule at src/isa/aarch64/lower.isle line 926.
                            return Some(v632);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v606 = C::ty_int(ctx, v3);
                            if let Some(v607) = v606 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v617 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Gt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v618 = C::output(ctx, v617);
                                // Rule at src/isa/aarch64/lower.isle line 915.
                                return Some(v618);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v640 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v627 = C::put_in_reg(ctx, v31.0);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v641 = constructor_bsl(ctx, I64X2, v640, v627, v310);
                            let v642 = constructor_output_reg(ctx, v641);
                            // Rule at src/isa/aarch64/lower.isle line 935.
                            return Some(v642);
                        }
                        let v619 = C::not_i64x2(ctx, v3);
                        if let Some(v620) = v619 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v638 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v34, v35, v121);
                            let v639 = constructor_output_reg(ctx, v638);
                            // Rule at src/isa/aarch64/lower.isle line 932.
                            return Some(v639);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v606 = C::ty_int(ctx, v3);
                            if let Some(v607) = v606 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v615 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Hi,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v616 = C::output(ctx, v615);
                                // Rule at src/isa/aarch64/lower.isle line 913.
                                return Some(v616);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v646 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v627 = C::put_in_reg(ctx, v31.0);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v647 = constructor_bsl(ctx, I64X2, v646, v627, v310);
                            let v648 = constructor_output_reg(ctx, v647);
                            // Rule at src/isa/aarch64/lower.isle line 941.
                            return Some(v648);
                        }
                        let v619 = C::not_i64x2(ctx, v3);
                        if let Some(v620) = v619 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v644 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v34, v35, v121);
                            let v645 = constructor_output_reg(ctx, v644);
                            // Rule at src/isa/aarch64/lower.isle line 938.
                            return Some(v645);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v247 = C::splat_const(ctx, 0x1, &VectorSize::Size64x2);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v249 = constructor_orr_vec(ctx, v248, v112, &VectorSize::Size64x2);
                            let v250 = constructor_and_vec(ctx, v249, v247, &VectorSize::Size64x2);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v254 = constructor_vec_shift_imm(
                                ctx,
                                &VecShiftImmOp::Ushr,
                                0x1,
                                v253,
                                &VectorSize::Size64x2,
                            );
                            let v255 = C::put_in_reg(ctx, v31.1);
                            let v256 = constructor_vec_shift_imm(
                                ctx,
                                &VecShiftImmOp::Ushr,
                                0x1,
                                v255,
                                &VectorSize::Size64x2,
                            );
                            let v257 = constructor_add_vec(ctx, v254, v256, &VectorSize::Size64x2);
                            let v258 = constructor_add_vec(ctx, v250, v257, &VectorSize::Size64x2);
                            let v259 = constructor_output_reg(ctx, v258);
                            // Rule at src/isa/aarch64/lower.isle line 235.
                            return Some(v259);
                        }
                        let v260 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v261) = v260 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v263 = &constructor_vector_size(ctx, v261);
                            let v264 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v34, v35, v263);
                            let v265 = constructor_output_reg(ctx, v264);
                            // Rule at src/isa/aarch64/lower.isle line 246.
                            return Some(v265);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v503 = constructor_uqadd(ctx, v34, v35, v502);
                            let v504 = constructor_output_reg(ctx, v503);
                            // Rule at src/isa/aarch64/lower.isle line 558.
                            return Some(v504);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v505 = constructor_sqadd(ctx, v34, v35, v502);
                            let v506 = constructor_output_reg(ctx, v505);
                            // Rule at src/isa/aarch64/lower.isle line 563.
                            return Some(v506);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v507 = constructor_uqsub(ctx, v34, v35, v502);
                            let v508 = constructor_output_reg(ctx, v507);
                            // Rule at src/isa/aarch64/lower.isle line 568.
                            return Some(v508);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v509 = constructor_sqsub(ctx, v34, v35, v502);
                            let v510 = constructor_output_reg(ctx, v509);
                            // Rule at src/isa/aarch64/lower.isle line 573.
                            return Some(v510);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    match v75 {
                                        &Opcode::Imul => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v108 = constructor_madd(ctx, v28, v105, v106, v107);
                                            let v109 = constructor_output_reg(ctx, v108);
                                            // Rule at src/isa/aarch64/lower.isle line 86.
                                            return Some(v109);
                                        }
                                        &Opcode::Ishl => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v80 = C::def_inst(ctx, v77.1);
                                            if let Some(v81) = v80 {
                                                let v82 = &C::inst_data(ctx, v81);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v83,
                                                    imm: v84,
                                                } = v82
                                                {
                                                    if let &Opcode::Iconst = v83 {
                                                        let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                        if let Some(v86) = v85 {
                                                            let v34 = C::put_in_reg(ctx, v31.0);
                                                            let v87 = C::put_in_reg(ctx, v77.0);
                                                            let v88 = constructor_add_shift(
                                                                ctx, v28, v34, v87, v86,
                                                            );
                                                            let v89 =
                                                                constructor_output_reg(ctx, v88);
                                                            // Rule at src/isa/aarch64/lower.isle line 75.
                                                            return Some(v89);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                match v50 {
                                    &InstructionData::Binary {
                                        opcode: ref v90,
                                        args: ref v91,
                                    } => {
                                        match v90 {
                                            &Opcode::Imul => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v110 = C::put_in_reg(ctx, v92.0);
                                                let v111 = C::put_in_reg(ctx, v92.1);
                                                let v112 = C::put_in_reg(ctx, v31.1);
                                                let v113 =
                                                    constructor_madd(ctx, v28, v110, v111, v112);
                                                let v114 = constructor_output_reg(ctx, v113);
                                                // Rule at src/isa/aarch64/lower.isle line 89.
                                                return Some(v114);
                                            }
                                            &Opcode::Ishl => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v95 = C::def_inst(ctx, v92.1);
                                                if let Some(v96) = v95 {
                                                    let v97 = &C::inst_data(ctx, v96);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v98,
                                                        imm: v99,
                                                    } = v97
                                                    {
                                                        if let &Opcode::Iconst = v98 {
                                                            let v100 =
                                                                C::lshl_from_imm64(ctx, v28, v99);
                                                            if let Some(v101) = v100 {
                                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                                let v102 =
                                                                    C::put_in_reg(ctx, v92.0);
                                                                let v103 = constructor_add_shift(
                                                                    ctx, v28, v56, v102, v101,
                                                                );
                                                                let v104 = constructor_output_reg(
                                                                    ctx, v103,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 80.
                                                                return Some(v104);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v51,
                                        imm: v52,
                                    } => {
                                        if let &Opcode::Iconst = v51 {
                                            let v53 = C::u64_from_imm64(ctx, v52);
                                            let v54 = C::imm12_from_u64(ctx, v53);
                                            if let Some(v55) = v54 {
                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                let v57 = constructor_add_imm(ctx, v28, v56, v55);
                                                let v58 = constructor_output_reg(ctx, v57);
                                                // Rule at src/isa/aarch64/lower.isle line 54.
                                                return Some(v58);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v44 = C::imm12_from_u64(ctx, v43);
                                        if let Some(v45) = v44 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v46 = constructor_add_imm(ctx, v28, v34, v45);
                                            let v47 = constructor_output_reg(ctx, v46);
                                            // Rule at src/isa/aarch64/lower.isle line 51.
                                            return Some(v47);
                                        }
                                    }
                                }
                            }
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v51,
                                    imm: v52,
                                } = v50
                                {
                                    if let &Opcode::Iconst = v51 {
                                        let v53 = C::u64_from_imm64(ctx, v52);
                                        let v63 = C::imm12_from_negated_u64(ctx, v53);
                                        if let Some(v64) = v63 {
                                            let v56 = C::put_in_reg(ctx, v31.1);
                                            let v65 = constructor_sub_imm(ctx, v28, v56, v64);
                                            let v66 = constructor_output_reg(ctx, v65);
                                            // Rule at src/isa/aarch64/lower.isle line 62.
                                            return Some(v66);
                                        }
                                    }
                                }
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v59 = C::imm12_from_negated_u64(ctx, v43);
                                        if let Some(v60) = v59 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v61 = constructor_sub_imm(ctx, v28, v34, v60);
                                            let v62 = constructor_output_reg(ctx, v61);
                                            // Rule at src/isa/aarch64/lower.isle line 59.
                                            return Some(v62);
                                        }
                                    }
                                }
                            }
                            let v71 = &C::extended_value_from_value(ctx, v31.0);
                            if let Some(v72) = v71 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v73 = constructor_add_extend(ctx, v28, v56, v72);
                                let v74 = constructor_output_reg(ctx, v73);
                                // Rule at src/isa/aarch64/lower.isle line 70.
                                return Some(v74);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v69 = constructor_add_extend(ctx, v28, v34, v68);
                                let v70 = constructor_output_reg(ctx, v69);
                                // Rule at src/isa/aarch64/lower.isle line 67.
                                return Some(v70);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v36 = constructor_add(ctx, v28, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/aarch64/lower.isle line 47.
                            return Some(v37);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v123 = constructor_output_reg(ctx, v122);
                            // Rule at src/isa/aarch64/lower.isle line 98.
                            return Some(v123);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v126 = C::value_regs_get(ctx, v124, 0x0);
                            let v128 = C::value_regs_get(ctx, v124, 0x1);
                            let v129 = C::put_in_regs(ctx, v31.1);
                            let v130 = C::value_regs_get(ctx, v129, 0x0);
                            let v131 = C::value_regs_get(ctx, v129, 0x1);
                            let v133 = &constructor_add_with_flags_paired(ctx, I64, v126, v130);
                            let v134 = &constructor_adc_paired(ctx, I64, v128, v131);
                            let v135 = constructor_with_flags(ctx, v133, v134);
                            let v136 = C::output(ctx, v135);
                            // Rule at src/isa/aarch64/lower.isle line 102.
                            return Some(v136);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v1678 = C::value_reg(ctx, v122);
                            let v1679 = C::output(ctx, v1678);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 3.
                            return Some(v1679);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v59 = C::imm12_from_negated_u64(ctx, v43);
                                        if let Some(v60) = v59 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v489 = constructor_add_imm(ctx, v28, v34, v60);
                                            let v490 = constructor_output_reg(ctx, v489);
                                            // Rule at src/isa/aarch64/lower.isle line 533.
                                            return Some(v490);
                                        }
                                    }
                                }
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v491 = constructor_sub_extend(ctx, v28, v34, v68);
                                let v492 = constructor_output_reg(ctx, v491);
                                // Rule at src/isa/aarch64/lower.isle line 538.
                                return Some(v492);
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                match v40 {
                                    &InstructionData::Binary {
                                        opcode: ref v75,
                                        args: ref v76,
                                    } => {
                                        if let &Opcode::Imul = v75 {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v115 = constructor_msub(ctx, v28, v105, v106, v107);
                                            let v116 = constructor_output_reg(ctx, v115);
                                            // Rule at src/isa/aarch64/lower.isle line 93.
                                            return Some(v116);
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } => {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v487 = constructor_sub_imm(ctx, v28, v34, v45);
                                                let v488 = constructor_output_reg(ctx, v487);
                                                // Rule at src/isa/aarch64/lower.isle line 528.
                                                return Some(v488);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v497 = C::put_in_regs(ctx, v31.1);
                            let v498 = constructor_sub_i128(ctx, v124, v497);
                            let v499 = C::output(ctx, v498);
                            // Rule at src/isa/aarch64/lower.isle line 553.
                            return Some(v499);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v495 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v496 = constructor_output_reg(ctx, v495);
                            // Rule at src/isa/aarch64/lower.isle line 549.
                            return Some(v496);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    if let &Opcode::Ishl = v75 {
                                        let v77 = C::unpack_value_array_2(ctx, v76);
                                        let v80 = C::def_inst(ctx, v77.1);
                                        if let Some(v81) = v80 {
                                            let v82 = &C::inst_data(ctx, v81);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v83,
                                                imm: v84,
                                            } = v82
                                            {
                                                if let &Opcode::Iconst = v83 {
                                                    let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                    if let Some(v86) = v85 {
                                                        let v34 = C::put_in_reg(ctx, v31.0);
                                                        let v87 = C::put_in_reg(ctx, v77.0);
                                                        let v493 = constructor_sub_shift(
                                                            ctx, v28, v34, v87, v86,
                                                        );
                                                        let v494 =
                                                            constructor_output_reg(ctx, v493);
                                                        // Rule at src/isa/aarch64/lower.isle line 543.
                                                        return Some(v494);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v485 = constructor_sub(ctx, v28, v34, v35);
                            let v486 = constructor_output_reg(ctx, v485);
                            // Rule at src/isa/aarch64/lower.isle line 524.
                            return Some(v486);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v495 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v1680 = C::value_reg(ctx, v495);
                            let v1681 = C::output(ctx, v1680);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 7.
                            return Some(v1681);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v126 = C::value_regs_get(ctx, v124, 0x0);
                                let v128 = C::value_regs_get(ctx, v124, 0x1);
                                let v129 = C::put_in_regs(ctx, v31.1);
                                let v130 = C::value_regs_get(ctx, v129, 0x0);
                                let v131 = C::value_regs_get(ctx, v129, 0x1);
                                let v524 = constructor_umulh(ctx, I64, v126, v130);
                                let v525 = constructor_madd(ctx, I64, v126, v131, v524);
                                let v526 = constructor_madd(ctx, I64, v128, v130, v525);
                                let v527 = C::zero_reg(ctx);
                                let v528 = constructor_madd(ctx, I64, v126, v130, v527);
                                let v529 = C::value_regs(ctx, v528, v526);
                                let v530 = C::output(ctx, v529);
                                // Rule at src/isa/aarch64/lower.isle line 597.
                                return Some(v530);
                            }
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v223,
                                        arg: v224,
                                    } = v40
                                    {
                                        match v223 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I8X16 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I8X16 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v547 = constructor_smull8(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v548 =
                                                                        constructor_output_reg(
                                                                            ctx, v547,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 696.
                                                                    return Some(v548);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I8X16 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I8X16 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v549 = constructor_smull8(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v550 =
                                                                        constructor_output_reg(
                                                                            ctx, v549,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 702.
                                                                    return Some(v550);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I8X16 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I8X16 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v551 = constructor_umull8(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v552 =
                                                                        constructor_output_reg(
                                                                            ctx, v551,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 708.
                                                                    return Some(v552);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I8X16 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I8X16 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v553 = constructor_umull8(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v554 =
                                                                        constructor_output_reg(
                                                                            ctx, v553,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 714.
                                                                    return Some(v554);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v223,
                                        arg: v224,
                                    } = v40
                                    {
                                        match v223 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I16X8 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I16X8 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v555 = constructor_smull16(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v556 =
                                                                        constructor_output_reg(
                                                                            ctx, v555,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 720.
                                                                    return Some(v556);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I16X8 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I16X8 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v557 = constructor_smull16(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v558 =
                                                                        constructor_output_reg(
                                                                            ctx, v557,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 726.
                                                                    return Some(v558);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I16X8 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I16X8 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v559 = constructor_umull16(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v560 =
                                                                        constructor_output_reg(
                                                                            ctx, v559,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 732.
                                                                    return Some(v560);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I16X8 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I16X8 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v561 = constructor_umull16(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v562 =
                                                                        constructor_output_reg(
                                                                            ctx, v561,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 738.
                                                                    return Some(v562);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v223,
                                        arg: v224,
                                    } = v40
                                    {
                                        match v223 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I32X4 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I32X4 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v563 = constructor_smull32(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v564 =
                                                                        constructor_output_reg(
                                                                            ctx, v563,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 744.
                                                                    return Some(v564);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I32X4 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I32X4 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v565 = constructor_smull32(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v566 =
                                                                        constructor_output_reg(
                                                                            ctx, v565,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 750.
                                                                    return Some(v566);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I32X4 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I32X4 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v567 = constructor_umull32(
                                                                        ctx, v225, v546, false,
                                                                    );
                                                                    let v568 =
                                                                        constructor_output_reg(
                                                                            ctx, v567,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 756.
                                                                    return Some(v568);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v221 {
                                                            let v544 = C::value_type(ctx, v222);
                                                            if v544 == I32X4 {
                                                                let v545 = C::value_type(ctx, v224);
                                                                if v545 == I32X4 {
                                                                    let v225 =
                                                                        C::put_in_reg(ctx, v222);
                                                                    let v546 =
                                                                        C::put_in_reg(ctx, v224);
                                                                    let v569 = constructor_umull32(
                                                                        ctx, v225, v546, true,
                                                                    );
                                                                    let v570 =
                                                                        constructor_output_reg(
                                                                            ctx, v569,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 762.
                                                                    return Some(v570);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v536 = constructor_rev64(ctx, v35, &VectorSize::Size32x4);
                                let v537 = constructor_mul(ctx, v536, v34, &VectorSize::Size32x4);
                                let v538 = constructor_xtn(ctx, v34, &ScalarSize::Size32);
                                let v539 = constructor_addp(ctx, v537, v537, &VectorSize::Size32x4);
                                let v540 = constructor_xtn(ctx, v35, &ScalarSize::Size32);
                                let v541 = constructor_shll32(ctx, v539, false);
                                let v542 = constructor_umlal32(ctx, v541, v540, v538, false);
                                let v543 = constructor_output_reg(ctx, v542);
                                // Rule at src/isa/aarch64/lower.isle line 657.
                                return Some(v543);
                            }
                            _ => {}
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v531 = C::not_i64x2(ctx, v501);
                            if let Some(v532) = v531 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v502 = &constructor_vector_size(ctx, v501);
                                let v533 = constructor_mul(ctx, v34, v35, v502);
                                let v534 = constructor_output_reg(ctx, v533);
                                // Rule at src/isa/aarch64/lower.isle line 625.
                                return Some(v534);
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v192 = C::zero_reg(ctx);
                            let v522 = constructor_madd(ctx, v28, v34, v35, v192);
                            let v523 = constructor_output_reg(ctx, v522);
                            // Rule at src/isa/aarch64/lower.isle line 593.
                            return Some(v523);
                        }
                        let v260 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v261) = v260 {
                            let v1682 = C::dynamic_lane(ctx, v261);
                            if let Some(v1683) = v1682 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v263 = &constructor_vector_size(ctx, v261);
                                let v1687 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v34, v35, v263);
                                let v1688 = C::value_reg(ctx, v1687);
                                let v1689 = C::output(ctx, v1688);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 11.
                                return Some(v1689);
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v580 = constructor_umulh(ctx, I64, v34, v35);
                            let v581 = constructor_output_reg(ctx, v580);
                            // Rule at src/isa/aarch64/lower.isle line 781.
                            return Some(v581);
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v582 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v583 = constructor_put_in_reg_zext64(ctx, v31.1);
                            let v192 = C::zero_reg(ctx);
                            let v584 = constructor_madd(ctx, I64, v582, v583, v192);
                            let v576 = C::ty_bits(ctx, v242);
                            let v577 = C::imm_shift_from_u8(ctx, v576);
                            let v585 = constructor_lsr_imm(ctx, I64, v584, v577);
                            let v586 = C::value_reg(ctx, v585);
                            let v587 = C::output(ctx, v586);
                            // Rule at src/isa/aarch64/lower.isle line 784.
                            return Some(v587);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = constructor_smulh(ctx, I64, v34, v35);
                            let v572 = constructor_output_reg(ctx, v571);
                            // Rule at src/isa/aarch64/lower.isle line 769.
                            return Some(v572);
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v573 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v574 = constructor_put_in_reg_sext64(ctx, v31.1);
                            let v192 = C::zero_reg(ctx);
                            let v575 = constructor_madd(ctx, I64, v573, v574, v192);
                            let v576 = C::ty_bits(ctx, v242);
                            let v577 = C::imm_shift_from_u8(ctx, v576);
                            let v578 = constructor_asr_imm(ctx, I64, v575, v577);
                            let v579 = constructor_output_reg(ctx, v578);
                            // Rule at src/isa/aarch64/lower.isle line 772.
                            return Some(v579);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v267 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v34, v35, v121);
                            let v268 = constructor_output_reg(ctx, v267);
                            // Rule at src/isa/aarch64/lower.isle line 251.
                            return Some(v268);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v582 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v588 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v589 = constructor_a64_udiv(ctx, I64, v582, v588);
                            let v590 = constructor_output_reg(ctx, v589);
                            // Rule at src/isa/aarch64/lower.isle line 800.
                            return Some(v590);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v595 = C::safe_divisor_from_imm64(ctx, v42);
                                        if let Some(v596) = v595 {
                                            let v573 = constructor_put_in_reg_sext64(ctx, v31.0);
                                            let v598 =
                                                constructor_imm(ctx, v28, &ImmExtend::Sign, v596);
                                            let v599 = constructor_a64_sdiv(ctx, I64, v573, v598);
                                            let v600 = constructor_output_reg(ctx, v599);
                                            // Rule at src/isa/aarch64/lower.isle line 846.
                                            return Some(v600);
                                        }
                                    }
                                }
                            }
                            let v573 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v591 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v592 = constructor_trap_if_div_overflow(ctx, v28, v573, v591);
                            let v593 = constructor_a64_sdiv(ctx, I64, v592, v591);
                            let v594 = constructor_output_reg(ctx, v593);
                            // Rule at src/isa/aarch64/lower.isle line 833.
                            return Some(v594);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v582 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v588 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v589 = constructor_a64_udiv(ctx, I64, v582, v588);
                            let v601 = constructor_msub(ctx, I64, v589, v588, v582);
                            let v602 = constructor_output_reg(ctx, v601);
                            // Rule at src/isa/aarch64/lower.isle line 874.
                            return Some(v602);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v573 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v591 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v603 = constructor_a64_sdiv(ctx, I64, v573, v591);
                            let v604 = constructor_msub(ctx, I64, v603, v591, v573);
                            let v605 = constructor_output_reg(ctx, v604);
                            // Rule at src/isa/aarch64/lower.isle line 881.
                            return Some(v605);
                        }
                    }
                }
                &Opcode::IaddCout => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1642 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1643) = v1642 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1644 = &constructor_add_with_flags_paired(ctx, v1643, v34, v35);
                            let v1646 = &constructor_cset_paired(ctx, &Cond::Vs);
                            let v1647 = constructor_with_flags(ctx, v1644, v1646);
                            let v1648 = C::value_regs_get(ctx, v1647, 0x0);
                            let v1649 = C::value_reg(ctx, v1648);
                            let v1650 = C::value_regs_get(ctx, v1647, 0x1);
                            let v1651 = C::value_reg(ctx, v1650);
                            let v1652 = C::output_pair(ctx, v1649, v1651);
                            // Rule at src/isa/aarch64/lower.isle line 2432.
                            return Some(v1652);
                        }
                        let v820 = C::fits_in_16(ctx, v3);
                        if let Some(v821) = v820 {
                            let v1633 = &constructor_lower_extend_op(ctx, v821, true);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1634 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v1635 = constructor_add_extend_op(ctx, v821, v1634, v112, v1633);
                            let v1636 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1635,
                                v1635,
                                v1633,
                            );
                            let v1637 = &constructor_cset(ctx, &Cond::Ne);
                            let v1638 = constructor_with_flags_reg(ctx, v1636, v1637);
                            let v1639 = C::value_reg(ctx, v1635);
                            let v1640 = C::value_reg(ctx, v1638);
                            let v1641 = C::output_pair(ctx, v1639, v1640);
                            // Rule at src/isa/aarch64/lower.isle line 2408.
                            return Some(v1641);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v734 = constructor_alu_rs_imm_logic_commutative(
                                    ctx,
                                    &ALUOp::And,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v735 = constructor_output_reg(ctx, v734);
                                // Rule at src/isa/aarch64/lower.isle line 1060.
                                return Some(v735);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v736 =
                                    constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v31.0, v31.1);
                                let v737 = C::output(ctx, v736);
                                // Rule at src/isa/aarch64/lower.isle line 1063.
                                return Some(v737);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v732 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v242,
                                v31.0,
                                v31.1,
                            );
                            let v733 = constructor_output_reg(ctx, v732);
                            // Rule at src/isa/aarch64/lower.isle line 1057.
                            return Some(v733);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v738 = constructor_and_vec(ctx, v34, v35, v502);
                            let v739 = constructor_output_reg(ctx, v738);
                            // Rule at src/isa/aarch64/lower.isle line 1065.
                            return Some(v739);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v743 = constructor_alu_rs_imm_logic_commutative(
                                    ctx,
                                    &ALUOp::Orr,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v744 = constructor_output_reg(ctx, v743);
                                // Rule at src/isa/aarch64/lower.isle line 1073.
                                return Some(v744);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v745 =
                                    constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v31.0, v31.1);
                                let v746 = C::output(ctx, v745);
                                // Rule at src/isa/aarch64/lower.isle line 1076.
                                return Some(v746);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v741 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v242,
                                v31.0,
                                v31.1,
                            );
                            let v742 = constructor_output_reg(ctx, v741);
                            // Rule at src/isa/aarch64/lower.isle line 1070.
                            return Some(v742);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v747 = constructor_orr_vec(ctx, v34, v35, v502);
                            let v748 = constructor_output_reg(ctx, v747);
                            // Rule at src/isa/aarch64/lower.isle line 1078.
                            return Some(v748);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v752 = constructor_alu_rs_imm_logic_commutative(
                                    ctx,
                                    &ALUOp::Eor,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v753 = constructor_output_reg(ctx, v752);
                                // Rule at src/isa/aarch64/lower.isle line 1086.
                                return Some(v753);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v754 =
                                    constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v31.0, v31.1);
                                let v755 = C::output(ctx, v754);
                                // Rule at src/isa/aarch64/lower.isle line 1089.
                                return Some(v755);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v750 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v242,
                                v31.0,
                                v31.1,
                            );
                            let v751 = constructor_output_reg(ctx, v750);
                            // Rule at src/isa/aarch64/lower.isle line 1083.
                            return Some(v751);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v756 = constructor_eor_vec(ctx, v34, v35, v502);
                            let v757 = constructor_output_reg(ctx, v756);
                            // Rule at src/isa/aarch64/lower.isle line 1091.
                            return Some(v757);
                        }
                    }
                }
                &Opcode::BandNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v761 = constructor_alu_rs_imm_logic(
                                    ctx,
                                    &ALUOp::AndNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v762 = constructor_output_reg(ctx, v761);
                                // Rule at src/isa/aarch64/lower.isle line 1099.
                                return Some(v762);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v763 = constructor_i128_alu_bitop(
                                    ctx,
                                    &ALUOp::AndNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v764 = C::output(ctx, v763);
                                // Rule at src/isa/aarch64/lower.isle line 1102.
                                return Some(v764);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v759 = constructor_alu_rs_imm_logic(
                                ctx,
                                &ALUOp::AndNot,
                                v242,
                                v31.0,
                                v31.1,
                            );
                            let v760 = constructor_output_reg(ctx, v759);
                            // Rule at src/isa/aarch64/lower.isle line 1096.
                            return Some(v760);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v502 = &constructor_vector_size(ctx, v501);
                            let v765 = constructor_bic_vec(ctx, v34, v35, v502);
                            let v766 = constructor_output_reg(ctx, v765);
                            // Rule at src/isa/aarch64/lower.isle line 1104.
                            return Some(v766);
                        }
                    }
                }
                &Opcode::BorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v770 = constructor_alu_rs_imm_logic(
                                    ctx,
                                    &ALUOp::OrrNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v771 = constructor_output_reg(ctx, v770);
                                // Rule at src/isa/aarch64/lower.isle line 1112.
                                return Some(v771);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v772 = constructor_i128_alu_bitop(
                                    ctx,
                                    &ALUOp::OrrNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v773 = C::output(ctx, v772);
                                // Rule at src/isa/aarch64/lower.isle line 1115.
                                return Some(v773);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v768 = constructor_alu_rs_imm_logic(
                                ctx,
                                &ALUOp::OrrNot,
                                v242,
                                v31.0,
                                v31.1,
                            );
                            let v769 = constructor_output_reg(ctx, v768);
                            // Rule at src/isa/aarch64/lower.isle line 1109.
                            return Some(v769);
                        }
                    }
                }
                &Opcode::BxorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v778 = constructor_alu_rs_imm_logic(
                                    ctx,
                                    &ALUOp::EorNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v779 = constructor_output_reg(ctx, v778);
                                // Rule at src/isa/aarch64/lower.isle line 1122.
                                return Some(v779);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v780 = constructor_i128_alu_bitop(
                                    ctx,
                                    &ALUOp::EorNot,
                                    I64,
                                    v31.0,
                                    v31.1,
                                );
                                let v781 = C::output(ctx, v780);
                                // Rule at src/isa/aarch64/lower.isle line 1125.
                                return Some(v781);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v776 = constructor_alu_rs_imm_logic(
                                ctx,
                                &ALUOp::EorNot,
                                I32,
                                v31.0,
                                v31.1,
                            );
                            let v777 = constructor_output_reg(ctx, v776);
                            // Rule at src/isa/aarch64/lower.isle line 1119.
                            return Some(v777);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v839 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v840) = v839 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v841 = C::negate_imm_shift(ctx, I32, v840);
                                                let v842 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v841);
                                                let v843 = constructor_output_reg(ctx, v842);
                                                // Rule at src/isa/aarch64/lower.isle line 1347.
                                                return Some(v843);
                                            }
                                        }
                                    }
                                }
                                let v822 = C::put_in_regs(ctx, v31.1);
                                let v823 = C::value_regs_get(ctx, v822, 0x0);
                                let v192 = C::zero_reg(ctx);
                                let v824 = constructor_sub(ctx, I32, v192, v823);
                                let v833 = C::put_in_reg(ctx, v31.0);
                                let v834 = constructor_a64_rotr(ctx, I32, v833, v824);
                                let v835 = constructor_output_reg(ctx, v834);
                                // Rule at src/isa/aarch64/lower.isle line 1335.
                                return Some(v835);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v844 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v845) = v844 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v846 = C::negate_imm_shift(ctx, I64, v845);
                                                let v847 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v846);
                                                let v848 = constructor_output_reg(ctx, v847);
                                                // Rule at src/isa/aarch64/lower.isle line 1352.
                                                return Some(v848);
                                            }
                                        }
                                    }
                                }
                                let v822 = C::put_in_regs(ctx, v31.1);
                                let v823 = C::value_regs_get(ctx, v822, 0x0);
                                let v192 = C::zero_reg(ctx);
                                let v836 = constructor_sub(ctx, I64, v192, v823);
                                let v833 = C::put_in_reg(ctx, v31.0);
                                let v837 = constructor_a64_rotr(ctx, I64, v833, v836);
                                let v838 = constructor_output_reg(ctx, v837);
                                // Rule at src/isa/aarch64/lower.isle line 1341.
                                return Some(v838);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v850 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v851 = constructor_sub(ctx, I64, v850, v787);
                                let v852 = constructor_lower_shl128(ctx, v124, v787);
                                let v853 = constructor_lower_ushr128(ctx, v124, v851);
                                let v854 = C::value_regs_get(ctx, v852, 0x0);
                                let v855 = C::value_regs_get(ctx, v853, 0x0);
                                let v856 = constructor_orr(ctx, I64, v854, v855);
                                let v857 = C::value_regs_get(ctx, v852, 0x1);
                                let v858 = C::value_regs_get(ctx, v853, 0x1);
                                let v859 = constructor_orr(ctx, I64, v857, v858);
                                let v860 = C::value_regs(ctx, v856, v859);
                                let v861 = C::output(ctx, v860);
                                // Rule at src/isa/aarch64/lower.isle line 1362.
                                return Some(v861);
                            }
                            _ => {}
                        }
                        let v820 = C::fits_in_16(ctx, v3);
                        if let Some(v821) = v820 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v828 = C::imm_shift_from_imm64(ctx, v821, v42);
                                        if let Some(v829) = v828 {
                                            let v797 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v830 = C::negate_imm_shift(ctx, v821, v829);
                                            let v831 =
                                                constructor_small_rotr_imm(ctx, v821, v797, v830);
                                            let v832 = constructor_output_reg(ctx, v831);
                                            // Rule at src/isa/aarch64/lower.isle line 1322.
                                            return Some(v832);
                                        }
                                    }
                                }
                            }
                            let v822 = C::put_in_regs(ctx, v31.1);
                            let v823 = C::value_regs_get(ctx, v822, 0x0);
                            let v192 = C::zero_reg(ctx);
                            let v824 = constructor_sub(ctx, I32, v192, v823);
                            let v825 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v826 = constructor_small_rotr(ctx, v821, v825, v824);
                            let v827 = constructor_output_reg(ctx, v826);
                            // Rule at src/isa/aarch64/lower.isle line 1316.
                            return Some(v827);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v839 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v840) = v839 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v870 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v840);
                                                let v871 = constructor_output_reg(ctx, v870);
                                                // Rule at src/isa/aarch64/lower.isle line 1392.
                                                return Some(v871);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v864 = constructor_a64_rotr(ctx, I32, v34, v787);
                                let v865 = constructor_output_reg(ctx, v864);
                                // Rule at src/isa/aarch64/lower.isle line 1379.
                                return Some(v865);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v844 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v845) = v844 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v872 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v845);
                                                let v873 = constructor_output_reg(ctx, v872);
                                                // Rule at src/isa/aarch64/lower.isle line 1397.
                                                return Some(v873);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v866 = constructor_a64_rotr(ctx, I64, v34, v787);
                                let v867 = constructor_output_reg(ctx, v866);
                                // Rule at src/isa/aarch64/lower.isle line 1383.
                                return Some(v867);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v850 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v851 = constructor_sub(ctx, I64, v850, v787);
                                let v874 = constructor_lower_ushr128(ctx, v124, v787);
                                let v875 = constructor_lower_shl128(ctx, v124, v851);
                                let v876 = C::value_regs_get(ctx, v874, 0x1);
                                let v877 = C::value_regs_get(ctx, v875, 0x1);
                                let v878 = constructor_orr(ctx, I64, v876, v877);
                                let v879 = C::value_regs_get(ctx, v874, 0x0);
                                let v880 = C::value_regs_get(ctx, v875, 0x0);
                                let v881 = constructor_orr(ctx, I64, v879, v880);
                                let v882 = C::value_regs(ctx, v881, v878);
                                let v883 = C::output(ctx, v882);
                                // Rule at src/isa/aarch64/lower.isle line 1446.
                                return Some(v883);
                            }
                            _ => {}
                        }
                        let v820 = C::fits_in_16(ctx, v3);
                        if let Some(v821) = v820 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v828 = C::imm_shift_from_imm64(ctx, v821, v42);
                                        if let Some(v829) = v828 {
                                            let v797 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v868 =
                                                constructor_small_rotr_imm(ctx, v821, v797, v829);
                                            let v869 = constructor_output_reg(ctx, v868);
                                            // Rule at src/isa/aarch64/lower.isle line 1387.
                                            return Some(v869);
                                        }
                                    }
                                }
                            }
                            let v797 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v497 = C::put_in_regs(ctx, v31.1);
                            let v787 = C::value_regs_get(ctx, v497, 0x0);
                            let v862 = constructor_small_rotr(ctx, v821, v797, v787);
                            let v863 = constructor_output_reg(ctx, v862);
                            // Rule at src/isa/aarch64/lower.isle line 1375.
                            return Some(v863);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v785 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v34, v31.1);
                                let v786 = constructor_output_reg(ctx, v785);
                                // Rule at src/isa/aarch64/lower.isle line 1134.
                                return Some(v786);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v788 = constructor_lower_shl128(ctx, v124, v787);
                                let v789 = C::output(ctx, v788);
                                // Rule at src/isa/aarch64/lower.isle line 1138.
                                return Some(v789);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v783 = constructor_do_shift(ctx, &ALUOp::Lsl, v242, v34, v31.1);
                            let v784 = constructor_output_reg(ctx, v783);
                            // Rule at src/isa/aarch64/lower.isle line 1130.
                            return Some(v784);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v790 = &constructor_vector_size(ctx, v501);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v791 = C::shift_mask(ctx, v501);
                            let v792 = constructor_and_imm(ctx, I32, v35, v791);
                            let v793 = constructor_vec_dup(ctx, v792, v790);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v794 = constructor_sshl(ctx, v253, v793, v790);
                            let v795 = constructor_output_reg(ctx, v794);
                            // Rule at src/isa/aarch64/lower.isle line 1168.
                            return Some(v795);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v582 = constructor_put_in_reg_zext64(ctx, v31.0);
                                let v800 = constructor_do_shift(ctx, &ALUOp::Lsr, I64, v582, v31.1);
                                let v801 = constructor_output_reg(ctx, v800);
                                // Rule at src/isa/aarch64/lower.isle line 1220.
                                return Some(v801);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v802 = constructor_lower_ushr128(ctx, v124, v787);
                                let v803 = C::output(ctx, v802);
                                // Rule at src/isa/aarch64/lower.isle line 1224.
                                return Some(v803);
                            }
                            _ => {}
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v797 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v798 = constructor_do_shift(ctx, &ALUOp::Lsr, v242, v797, v31.1);
                            let v799 = constructor_output_reg(ctx, v798);
                            // Rule at src/isa/aarch64/lower.isle line 1216.
                            return Some(v799);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v790 = &constructor_vector_size(ctx, v501);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v791 = C::shift_mask(ctx, v501);
                            let v792 = constructor_and_imm(ctx, I32, v35, v791);
                            let v804 = C::zero_reg(ctx);
                            let v805 = constructor_sub(ctx, I64, v804, v792);
                            let v806 = constructor_vec_dup(ctx, v805, v790);
                            let v807 = C::put_in_reg(ctx, v31.0);
                            let v808 = constructor_ushl(ctx, v807, v806, v790);
                            let v809 = constructor_output_reg(ctx, v808);
                            // Rule at src/isa/aarch64/lower.isle line 1228.
                            return Some(v809);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v573 = constructor_put_in_reg_sext64(ctx, v31.0);
                                let v814 = constructor_do_shift(ctx, &ALUOp::Asr, I64, v573, v31.1);
                                let v815 = constructor_output_reg(ctx, v814);
                                // Rule at src/isa/aarch64/lower.isle line 1268.
                                return Some(v815);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v497 = C::put_in_regs(ctx, v31.1);
                                let v787 = C::value_regs_get(ctx, v497, 0x0);
                                let v816 = constructor_lower_sshr128(ctx, v124, v787);
                                let v817 = C::output(ctx, v816);
                                // Rule at src/isa/aarch64/lower.isle line 1272.
                                return Some(v817);
                            }
                            _ => {}
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v790 = &constructor_vector_size(ctx, v501);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v791 = C::shift_mask(ctx, v501);
                            let v792 = constructor_and_imm(ctx, I32, v35, v791);
                            let v804 = C::zero_reg(ctx);
                            let v805 = constructor_sub(ctx, I64, v804, v792);
                            let v806 = constructor_vec_dup(ctx, v805, v790);
                            let v807 = C::put_in_reg(ctx, v31.0);
                            let v818 = constructor_sshl(ctx, v807, v806, v790);
                            let v819 = constructor_output_reg(ctx, v818);
                            // Rule at src/isa/aarch64/lower.isle line 1278.
                            return Some(v819);
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v811 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v812 = constructor_do_shift(ctx, &ALUOp::Asr, v242, v811, v31.1);
                            let v813 = constructor_output_reg(ctx, v812);
                            // Rule at src/isa/aarch64/lower.isle line 1264.
                            return Some(v813);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v276 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v34, v35, v275);
                            let v277 = constructor_output_reg(ctx, v276);
                            // Rule at src/isa/aarch64/lower.isle line 259.
                            return Some(v277);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v270 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v271 = constructor_output_reg(ctx, v270);
                            // Rule at src/isa/aarch64/lower.isle line 256.
                            return Some(v271);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v270 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v1690 = C::value_reg(ctx, v270);
                            let v1691 = C::output(ctx, v1690);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 15.
                            return Some(v1691);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v282 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v34, v35, v275);
                            let v283 = constructor_output_reg(ctx, v282);
                            // Rule at src/isa/aarch64/lower.isle line 267.
                            return Some(v283);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v279 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v280 = constructor_output_reg(ctx, v279);
                            // Rule at src/isa/aarch64/lower.isle line 264.
                            return Some(v280);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v279 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v1692 = C::value_reg(ctx, v279);
                            let v1693 = C::output(ctx, v1692);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 19.
                            return Some(v1693);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v288 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v34, v35, v275);
                            let v289 = constructor_output_reg(ctx, v288);
                            // Rule at src/isa/aarch64/lower.isle line 275.
                            return Some(v289);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v285 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v286 = constructor_output_reg(ctx, v285);
                            // Rule at src/isa/aarch64/lower.isle line 272.
                            return Some(v286);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v285 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v1694 = C::value_reg(ctx, v285);
                            let v1695 = C::output(ctx, v1694);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 23.
                            return Some(v1695);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v294 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v34, v35, v275);
                            let v295 = constructor_output_reg(ctx, v294);
                            // Rule at src/isa/aarch64/lower.isle line 283.
                            return Some(v295);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v291 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v292 = constructor_output_reg(ctx, v291);
                            // Rule at src/isa/aarch64/lower.isle line 280.
                            return Some(v292);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v291 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v1696 = C::value_reg(ctx, v291);
                            let v1697 = C::output(ctx, v1696);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 27.
                            return Some(v1697);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v403 = constructor_fcopy_sign(ctx, v34, v35, v3);
                        let v404 = constructor_output_reg(ctx, v403);
                        // Rule at src/isa/aarch64/lower.isle line 408.
                        return Some(v404);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v300 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v34, v35, v275);
                            let v301 = constructor_output_reg(ctx, v300);
                            // Rule at src/isa/aarch64/lower.isle line 291.
                            return Some(v301);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v297 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v298 = constructor_output_reg(ctx, v297);
                            // Rule at src/isa/aarch64/lower.isle line 288.
                            return Some(v298);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v297 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v1698 = C::value_reg(ctx, v297);
                            let v1699 = C::output(ctx, v1698);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 31.
                            return Some(v1699);
                        }
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v313 = &constructor_scalar_size(ctx, v273);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v314 = &constructor_fpu_cmp(ctx, v313, v248, v112);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v316 = &constructor_fpu_csel(ctx, v273, &Cond::Gt, v310, v253);
                            let v317 = constructor_with_flags(ctx, v314, v316);
                            let v318 = C::output(ctx, v317);
                            // Rule at src/isa/aarch64/lower.isle line 307.
                            return Some(v318);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v309 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v34, v35, v121);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v311 = constructor_bsl(ctx, v3, v309, v310, v253);
                            let v312 = constructor_output_reg(ctx, v311);
                            // Rule at src/isa/aarch64/lower.isle line 304.
                            return Some(v312);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v309 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v34, v35, v121);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v311 = constructor_bsl(ctx, v3, v309, v310, v253);
                            let v1702 = C::value_reg(ctx, v311);
                            let v1703 = C::output(ctx, v1702);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 39.
                            return Some(v1703);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v275 = &constructor_scalar_size(ctx, v273);
                            let v306 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v34, v35, v275);
                            let v307 = constructor_output_reg(ctx, v306);
                            // Rule at src/isa/aarch64/lower.isle line 299.
                            return Some(v307);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v303 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v304 = constructor_output_reg(ctx, v303);
                            // Rule at src/isa/aarch64/lower.isle line 296.
                            return Some(v304);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v303 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v1700 = C::value_reg(ctx, v303);
                            let v1701 = C::output(ctx, v1700);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 35.
                            return Some(v1701);
                        }
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v313 = &constructor_scalar_size(ctx, v273);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v107 = C::put_in_reg(ctx, v31.0);
                            let v322 = &constructor_fpu_cmp(ctx, v313, v35, v107);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v316 = &constructor_fpu_csel(ctx, v273, &Cond::Gt, v310, v253);
                            let v323 = constructor_with_flags(ctx, v322, v316);
                            let v324 = C::output(ctx, v323);
                            // Rule at src/isa/aarch64/lower.isle line 316.
                            return Some(v324);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v319 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v56, v248, v121);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v320 = constructor_bsl(ctx, v3, v319, v310, v253);
                            let v321 = constructor_output_reg(ctx, v320);
                            // Rule at src/isa/aarch64/lower.isle line 313.
                            return Some(v321);
                        }
                        let v1674 = C::dynamic_lane(ctx, v3);
                        if let Some(v1675) = v1674 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v248 = C::put_in_reg(ctx, v31.0);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v319 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, v56, v248, v121);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v253 = C::put_in_reg(ctx, v31.0);
                            let v320 = constructor_bsl(ctx, v3, v319, v310, v253);
                            let v1704 = C::value_reg(ctx, v320);
                            let v1705 = C::output(ctx, v1704);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 45.
                            return Some(v1705);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1321 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1322) = v1321 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1324 = &constructor_lane_size(ctx, v1322);
                            let v1325 = constructor_sqxtn(ctx, v1323, v1324);
                            let v1326 = constructor_output_reg(ctx, v1325);
                            // Rule at src/isa/aarch64/lower.isle line 1959.
                            return Some(v1326);
                        }
                        let v1314 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1315) = v1314 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1318 = &constructor_lane_size(ctx, v1315);
                                let v1319 = constructor_sqxtn(ctx, v34, v1318);
                                let v1320 = constructor_output_reg(ctx, v1319);
                                // Rule at src/isa/aarch64/lower.isle line 1955.
                                return Some(v1320);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1318 = &constructor_lane_size(ctx, v1315);
                            let v1319 = constructor_sqxtn(ctx, v34, v1318);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1328 = &constructor_lane_size(ctx, v1315);
                            let v1329 = constructor_sqxtn2(ctx, v1319, v1327, v1328);
                            let v1330 = constructor_output_reg(ctx, v1329);
                            // Rule at src/isa/aarch64/lower.isle line 1963.
                            return Some(v1330);
                        }
                        let v1711 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1712) = v1711 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1713 = &constructor_lane_size(ctx, v1712);
                            let v1714 = constructor_sqxtn(ctx, v1323, v1713);
                            let v1715 = constructor_output_reg(ctx, v1714);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 55.
                            return Some(v1715);
                        }
                        let v1706 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1707) = v1706 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1708 = &constructor_lane_size(ctx, v1707);
                                let v1709 = constructor_sqxtn(ctx, v34, v1708);
                                let v1710 = constructor_output_reg(ctx, v1709);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 51.
                                return Some(v1710);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1708 = &constructor_lane_size(ctx, v1707);
                            let v1709 = constructor_sqxtn(ctx, v34, v1708);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1716 = &constructor_lane_size(ctx, v1707);
                            let v1717 = constructor_sqxtn2(ctx, v1709, v1327, v1716);
                            let v1718 = constructor_output_reg(ctx, v1717);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 59.
                            return Some(v1718);
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1321 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1322) = v1321 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1324 = &constructor_lane_size(ctx, v1322);
                            let v1333 = constructor_sqxtun(ctx, v1323, v1324);
                            let v1334 = constructor_output_reg(ctx, v1333);
                            // Rule at src/isa/aarch64/lower.isle line 1974.
                            return Some(v1334);
                        }
                        let v1314 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1315) = v1314 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1318 = &constructor_lane_size(ctx, v1315);
                                let v1331 = constructor_sqxtun(ctx, v34, v1318);
                                let v1332 = constructor_output_reg(ctx, v1331);
                                // Rule at src/isa/aarch64/lower.isle line 1970.
                                return Some(v1332);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1318 = &constructor_lane_size(ctx, v1315);
                            let v1331 = constructor_sqxtun(ctx, v34, v1318);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1328 = &constructor_lane_size(ctx, v1315);
                            let v1335 = constructor_sqxtun2(ctx, v1331, v1327, v1328);
                            let v1336 = constructor_output_reg(ctx, v1335);
                            // Rule at src/isa/aarch64/lower.isle line 1978.
                            return Some(v1336);
                        }
                        let v1711 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1712) = v1711 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1713 = &constructor_lane_size(ctx, v1712);
                            let v1721 = constructor_sqxtun(ctx, v1323, v1713);
                            let v1722 = constructor_output_reg(ctx, v1721);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 69.
                            return Some(v1722);
                        }
                        let v1706 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1707) = v1706 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1708 = &constructor_lane_size(ctx, v1707);
                                let v1719 = constructor_sqxtun(ctx, v34, v1708);
                                let v1720 = constructor_output_reg(ctx, v1719);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 65.
                                return Some(v1720);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1708 = &constructor_lane_size(ctx, v1707);
                            let v1719 = constructor_sqxtun(ctx, v34, v1708);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1716 = &constructor_lane_size(ctx, v1707);
                            let v1723 = constructor_sqxtun2(ctx, v1719, v1327, v1716);
                            let v1724 = constructor_output_reg(ctx, v1723);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 73.
                            return Some(v1724);
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1321 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1322) = v1321 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1324 = &constructor_lane_size(ctx, v1322);
                            let v1339 = constructor_uqxtn(ctx, v1323, v1324);
                            let v1340 = constructor_output_reg(ctx, v1339);
                            // Rule at src/isa/aarch64/lower.isle line 1990.
                            return Some(v1340);
                        }
                        let v1314 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1315) = v1314 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1318 = &constructor_lane_size(ctx, v1315);
                                let v1337 = constructor_uqxtn(ctx, v34, v1318);
                                let v1338 = constructor_output_reg(ctx, v1337);
                                // Rule at src/isa/aarch64/lower.isle line 1986.
                                return Some(v1338);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1318 = &constructor_lane_size(ctx, v1315);
                            let v1337 = constructor_uqxtn(ctx, v34, v1318);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1328 = &constructor_lane_size(ctx, v1315);
                            let v1341 = constructor_uqxtn2(ctx, v1337, v1327, v1328);
                            let v1342 = constructor_output_reg(ctx, v1341);
                            // Rule at src/isa/aarch64/lower.isle line 1994.
                            return Some(v1342);
                        }
                        let v1711 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1712) = v1711 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1323 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1713 = &constructor_lane_size(ctx, v1712);
                            let v1727 = constructor_uqxtn(ctx, v1323, v1713);
                            let v1728 = constructor_output_reg(ctx, v1727);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 83.
                            return Some(v1728);
                        }
                        let v1706 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1707) = v1706 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1316 = C::zero_value(ctx, v31.1);
                            if let Some(v1317) = v1316 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1708 = &constructor_lane_size(ctx, v1707);
                                let v1725 = constructor_uqxtn(ctx, v34, v1708);
                                let v1726 = constructor_output_reg(ctx, v1725);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 79.
                                return Some(v1726);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1708 = &constructor_lane_size(ctx, v1707);
                            let v1725 = constructor_uqxtn(ctx, v34, v1708);
                            let v1327 = C::put_in_reg(ctx, v31.1);
                            let v1716 = &constructor_lane_size(ctx, v1707);
                            let v1729 = constructor_uqxtn2(ctx, v1725, v1327, v1716);
                            let v1730 = constructor_output_reg(ctx, v1729);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 87.
                            return Some(v1730);
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v223,
                                        arg: v224,
                                    } = v40
                                    {
                                        match v223 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v221 {
                                                            if v222 == v224 {
                                                                let v225 = C::put_in_reg(ctx, v222);
                                                                let v226 =
                                                                    constructor_saddlp8(ctx, v225);
                                                                let v227 = constructor_output_reg(
                                                                    ctx, v226,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 207.
                                                                return Some(v227);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v221 {
                                                            if v222 == v224 {
                                                                let v225 = C::put_in_reg(ctx, v222);
                                                                let v230 =
                                                                    constructor_uaddlp8(ctx, v225);
                                                                let v231 = constructor_output_reg(
                                                                    ctx, v230,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 213.
                                                                return Some(v231);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v223,
                                        arg: v224,
                                    } = v40
                                    {
                                        match v223 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v221 {
                                                            if v222 == v224 {
                                                                let v225 = C::put_in_reg(ctx, v222);
                                                                let v228 =
                                                                    constructor_saddlp16(ctx, v225);
                                                                let v229 = constructor_output_reg(
                                                                    ctx, v228,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 210.
                                                                return Some(v229);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v221,
                                                        arg: v222,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v221 {
                                                            if v222 == v224 {
                                                                let v225 = C::put_in_reg(ctx, v222);
                                                                let v232 =
                                                                    constructor_uaddlp16(ctx, v225);
                                                                let v233 = constructor_output_reg(
                                                                    ctx, v232,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 216.
                                                                return Some(v233);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v121 = &constructor_vector_size(ctx, v3);
                        let v234 = constructor_addp(ctx, v34, v35, v121);
                        let v235 = constructor_output_reg(ctx, v234);
                        // Rule at src/isa/aarch64/lower.isle line 219.
                        return Some(v235);
                    }
                }
                &Opcode::WideningPairwiseDotProductS => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1363 = constructor_vec_rrr_long(
                                ctx,
                                &VecRRRLongOp::Smull16,
                                v34,
                                v35,
                                false,
                            );
                            let v627 = C::put_in_reg(ctx, v31.0);
                            let v310 = C::put_in_reg(ctx, v31.1);
                            let v1364 = constructor_vec_rrr_long(
                                ctx,
                                &VecRRRLongOp::Smull16,
                                v627,
                                v310,
                                true,
                            );
                            let v1366 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Addp,
                                v1363,
                                v1364,
                                &VectorSize::Size32x4,
                            );
                            let v1367 = constructor_output_reg(ctx, v1366);
                            // Rule at src/isa/aarch64/lower.isle line 2036.
                            return Some(v1367);
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v161 = C::value_regs(ctx, v34, v35);
                            let v162 = C::output(ctx, v161);
                            // Rule at src/isa/aarch64/lower.isle line 141.
                            return Some(v162);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1557,
            arg: v1558,
            imm: v1559,
        } => {
            match v1557 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v1560 = C::u8_from_uimm8(ctx, v1559);
                            if v1560 == 0x0 {
                                let v1561 = constructor_output_value(ctx, v1558);
                                // Rule at src/isa/aarch64/lower.isle line 2301.
                                return Some(v1561);
                            }
                            let v1562 = C::put_in_reg(ctx, v1558);
                            let v1566 = C::value_type(ctx, v1558);
                            let v1567 = &constructor_vector_size(ctx, v1566);
                            let v1568 = constructor_fpu_move_from_vec(ctx, v1562, v1560, v1567);
                            let v1569 = constructor_output_reg(ctx, v1568);
                            // Rule at src/isa/aarch64/lower.isle line 2309.
                            return Some(v1569);
                        }
                        let v606 = C::ty_int(ctx, v3);
                        if let Some(v607) = v606 {
                            let v1562 = C::put_in_reg(ctx, v1558);
                            let v1563 = &constructor_scalar_size(ctx, v607);
                            let v1560 = C::u8_from_uimm8(ctx, v1559);
                            let v1564 = constructor_mov_from_vec(ctx, v1562, v1560, v1563);
                            let v1565 = constructor_output_reg(ctx, v1564);
                            // Rule at src/isa/aarch64/lower.isle line 2304.
                            return Some(v1565);
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v1559 == 0x0 {
                        let v1562 = C::put_in_reg(ctx, v1558);
                        let v1739 = constructor_fpu_move_128(ctx, v1562);
                        let v1740 = C::value_reg(ctx, v1739);
                        let v1741 = C::output(ctx, v1740);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 99.
                        return Some(v1741);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1407,
            args: v1408,
            func_ref: v1409,
        } => {
            if let &Opcode::Call = v1407 {
                let v1411 = C::func_ref_data(ctx, v1409);
                let v1410 = C::value_list_slice(ctx, v1408);
                let v1415 = C::gen_call(ctx, v1411.0, v1411.1, v1411.2, v1410);
                // Rule at src/isa/aarch64/lower.isle line 2086.
                return Some(v1415);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1416,
            args: v1417,
            sig_ref: v1418,
        } => {
            if let &Opcode::CallIndirect = v1416 {
                let v1419 = C::value_list_slice(ctx, v1417);
                let v1420 = C::value_slice_unwrap(ctx, v1419);
                if let Some(v1421) = v1420 {
                    let v1424 = C::gen_call_indirect(ctx, v1418, v1421.0, v1421.1);
                    // Rule at src/isa/aarch64/lower.isle line 2089.
                    return Some(v1424);
                }
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v1731,
            dynamic_stack_slot: v1732,
        } => {
            if let &Opcode::DynamicStackAddr = v1731 {
                let v1733 = C::temp_writable_reg(ctx, I64);
                let v1734 = &C::abi_dynamic_stackslot_addr(ctx, v1733, v1732);
                let v1735 = C::emit(ctx, v1734);
                let v1736 = C::writable_reg_to_reg(ctx, v1733);
                let v1737 = C::value_reg(ctx, v1736);
                let v1738 = C::output(ctx, v1737);
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 93.
                return Some(v1738);
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1003,
            args: ref v1004,
            cond: ref v1005,
        } => {
            if let &Opcode::Fcmp = v1003 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1006 = C::unpack_value_array_2(ctx, v1004);
                        let v1011 = C::zero_value(ctx, v1006.1);
                        if let Some(v1012) = v1011 {
                            let v1009 = &C::fcmp_zero_cond_not_eq(ctx, v1005);
                            if let Some(v1010) = v1009 {
                                let v1013 = C::put_in_reg(ctx, v1006.0);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1014 = constructor_fcmeq0(ctx, v1013, v236);
                                let v1015 = constructor_not(ctx, v1014, v236);
                                let v1016 = C::value_reg(ctx, v1015);
                                let v1017 = C::output(ctx, v1016);
                                // Rule at src/isa/aarch64/lower.isle line 1664.
                                return Some(v1017);
                            }
                            let v1018 = &C::fcmp_zero_cond(ctx, v1005);
                            if let Some(v1019) = v1018 {
                                let v1013 = C::put_in_reg(ctx, v1006.0);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1020 = constructor_float_cmp_zero(ctx, v1019, v1013, v236);
                                let v1021 = C::value_reg(ctx, v1020);
                                let v1022 = C::output(ctx, v1021);
                                // Rule at src/isa/aarch64/lower.isle line 1670.
                                return Some(v1022);
                            }
                        }
                        let v1023 = C::zero_value(ctx, v1006.0);
                        if let Some(v1024) = v1023 {
                            let v1009 = &C::fcmp_zero_cond_not_eq(ctx, v1005);
                            if let Some(v1010) = v1009 {
                                let v1025 = C::put_in_reg(ctx, v1006.1);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1026 = constructor_fcmeq0(ctx, v1025, v236);
                                let v1027 = constructor_not(ctx, v1026, v236);
                                let v1028 = C::value_reg(ctx, v1027);
                                let v1029 = C::output(ctx, v1028);
                                // Rule at src/isa/aarch64/lower.isle line 1676.
                                return Some(v1029);
                            }
                            let v1018 = &C::fcmp_zero_cond(ctx, v1005);
                            if let Some(v1019) = v1018 {
                                let v1025 = C::put_in_reg(ctx, v1006.1);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1030 =
                                    constructor_float_cmp_zero_swap(ctx, v1019, v1025, v236);
                                let v1031 = C::value_reg(ctx, v1030);
                                let v1032 = C::output(ctx, v1031);
                                // Rule at src/isa/aarch64/lower.isle line 1682.
                                return Some(v1032);
                            }
                        }
                    }
                    let v1006 = C::unpack_value_array_2(ctx, v1004);
                    let v1033 = C::value_type(ctx, v1006.0);
                    let v1034 = C::ty_scalar_float(ctx, v1033);
                    if let Some(v1035) = v1034 {
                        let v1036 = &constructor_scalar_size(ctx, v1035);
                        let v1037 = C::put_in_reg(ctx, v1006.0);
                        let v1038 = C::put_in_reg(ctx, v1006.1);
                        let v1039 = &constructor_fpu_cmp(ctx, v1036, v1037, v1038);
                        let v1040 = &C::fp_cond_code(ctx, v1005);
                        let v1041 = &constructor_materialize_bool_result(ctx, v1040);
                        let v1042 = constructor_with_flags(ctx, v1039, v1041);
                        let v1043 = C::output(ctx, v1042);
                        // Rule at src/isa/aarch64/lower.isle line 1688.
                        return Some(v1043);
                    }
                    let v1044 = C::ty_vector_float(ctx, v1033);
                    if let Some(v1045) = v1044 {
                        let v1013 = C::put_in_reg(ctx, v1006.0);
                        let v1046 = C::put_in_reg(ctx, v1006.1);
                        let v1047 = &C::fp_cond_code(ctx, v1005);
                        let v1048 = constructor_vec_cmp(ctx, v1013, v1046, v1033, v1047);
                        let v1049 = constructor_output_reg(ctx, v1048);
                        // Rule at src/isa/aarch64/lower.isle line 1693.
                        return Some(v1049);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1381,
            func_ref: v1382,
        } => {
            if let &Opcode::FuncAddr = v1381 {
                let v1383 = C::func_ref_data(ctx, v1382);
                let v1387 = C::box_external_name(ctx, v1383.1);
                let v1389 = constructor_load_ext_name(ctx, v1387, 0x0);
                let v1390 = constructor_output_reg(ctx, v1389);
                // Rule at src/isa/aarch64/lower.isle line 2065.
                return Some(v1390);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1653,
            args: ref v1654,
            code: ref v1655,
        } => {
            if let &Opcode::UaddOverflowTrap = v1653 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v27 = C::fits_in_64(ctx, v3);
                    if let Some(v28) = v27 {
                        let v1656 = C::unpack_value_array_2(ctx, v1654);
                        let v1659 = C::put_in_reg(ctx, v1656.0);
                        let v1660 = C::put_in_reg(ctx, v1656.1);
                        let v1661 = &constructor_add_with_flags_paired(ctx, v28, v1659, v1660);
                        let v1662 = constructor_trap_if_overflow(ctx, v1661, v1655);
                        let v1663 = constructor_output_reg(ctx, v1662);
                        // Rule at src/isa/aarch64/lower.isle line 2443.
                        return Some(v1663);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1050,
            args: ref v1051,
            cond: ref v1052,
        } => {
            if let &Opcode::Icmp = v1050 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1053 = C::unpack_value_array_2(ctx, v1051);
                        let v1058 = C::zero_value(ctx, v1053.1);
                        if let Some(v1059) = v1058 {
                            let v1056 = &C::icmp_zero_cond_not_eq(ctx, v1052);
                            if let Some(v1057) = v1056 {
                                let v1060 = C::put_in_reg(ctx, v1053.0);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1061 = constructor_cmeq0(ctx, v1060, v236);
                                let v1062 = constructor_not(ctx, v1061, v236);
                                let v1063 = C::value_reg(ctx, v1062);
                                let v1064 = C::output(ctx, v1063);
                                // Rule at src/isa/aarch64/lower.isle line 1699.
                                return Some(v1064);
                            }
                            let v1065 = &C::icmp_zero_cond(ctx, v1052);
                            if let Some(v1066) = v1065 {
                                let v1060 = C::put_in_reg(ctx, v1053.0);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1067 = constructor_int_cmp_zero(ctx, v1066, v1060, v236);
                                let v1068 = C::value_reg(ctx, v1067);
                                let v1069 = C::output(ctx, v1068);
                                // Rule at src/isa/aarch64/lower.isle line 1705.
                                return Some(v1069);
                            }
                        }
                        let v1070 = C::zero_value(ctx, v1053.0);
                        if let Some(v1071) = v1070 {
                            let v1056 = &C::icmp_zero_cond_not_eq(ctx, v1052);
                            if let Some(v1057) = v1056 {
                                let v1072 = C::put_in_reg(ctx, v1053.1);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1073 = constructor_cmeq0(ctx, v1072, v236);
                                let v1074 = constructor_not(ctx, v1073, v236);
                                let v1075 = C::value_reg(ctx, v1074);
                                let v1076 = C::output(ctx, v1075);
                                // Rule at src/isa/aarch64/lower.isle line 1711.
                                return Some(v1076);
                            }
                            let v1065 = &C::icmp_zero_cond(ctx, v1052);
                            if let Some(v1066) = v1065 {
                                let v1072 = C::put_in_reg(ctx, v1053.1);
                                let v236 = &constructor_vector_size(ctx, v3);
                                let v1077 = constructor_int_cmp_zero_swap(ctx, v1066, v1072, v236);
                                let v1078 = C::value_reg(ctx, v1077);
                                let v1079 = C::output(ctx, v1078);
                                // Rule at src/isa/aarch64/lower.isle line 1717.
                                return Some(v1079);
                            }
                        }
                    }
                }
                let v1053 = C::unpack_value_array_2(ctx, v1051);
                let v1080 = C::value_type(ctx, v1053.0);
                let v1082 =
                    constructor_lower_icmp_into_reg(ctx, v1052, v1053.0, v1053.1, v1080, I8);
                let v1083 = C::output(ctx, v1082);
                // Rule at src/isa/aarch64/lower.isle line 1723.
                return Some(v1083);
            }
        }
        &InstructionData::Load {
            opcode: ref v1431,
            arg: v1432,
            flags: v1433,
            offset: v1434,
        } => {
            match v1431 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1436 = &C::amode(ctx, I8, v1432, v1435);
                                let v1437 = constructor_aarch64_uload8(ctx, v1436, v1433);
                                let v1438 = constructor_output_reg(ctx, v1437);
                                // Rule at src/isa/aarch64/lower.isle line 2100.
                                return Some(v1438);
                            }
                            I16 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1439 = &C::amode(ctx, I16, v1432, v1435);
                                let v1440 = constructor_aarch64_uload16(ctx, v1439, v1433);
                                let v1441 = constructor_output_reg(ctx, v1440);
                                // Rule at src/isa/aarch64/lower.isle line 2103.
                                return Some(v1441);
                            }
                            I32 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1442 = &C::amode(ctx, I32, v1432, v1435);
                                let v1443 = constructor_aarch64_uload32(ctx, v1442, v1433);
                                let v1444 = constructor_output_reg(ctx, v1443);
                                // Rule at src/isa/aarch64/lower.isle line 2106.
                                return Some(v1444);
                            }
                            I64 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1445 = &C::amode(ctx, I64, v1432, v1435);
                                let v1446 = constructor_aarch64_uload64(ctx, v1445, v1433);
                                let v1447 = constructor_output_reg(ctx, v1446);
                                // Rule at src/isa/aarch64/lower.isle line 2109.
                                return Some(v1447);
                            }
                            I128 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1454 = &C::pair_amode(ctx, v1432, v1435);
                                let v1455 = constructor_aarch64_loadp64(ctx, v1454, v1433);
                                let v1456 = C::output(ctx, v1455);
                                // Rule at src/isa/aarch64/lower.isle line 2121.
                                return Some(v1456);
                            }
                            R64 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1445 = &C::amode(ctx, I64, v1432, v1435);
                                let v1446 = constructor_aarch64_uload64(ctx, v1445, v1433);
                                let v1447 = constructor_output_reg(ctx, v1446);
                                // Rule at src/isa/aarch64/lower.isle line 2112.
                                return Some(v1447);
                            }
                            F32 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1448 = &C::amode(ctx, F32, v1432, v1435);
                                let v1449 = constructor_aarch64_fpuload32(ctx, v1448, v1433);
                                let v1450 = constructor_output_reg(ctx, v1449);
                                // Rule at src/isa/aarch64/lower.isle line 2115.
                                return Some(v1450);
                            }
                            F64 => {
                                let v1435 = C::offset32_to_u32(ctx, v1434);
                                let v1451 = &C::amode(ctx, F64, v1432, v1435);
                                let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                                let v1453 = constructor_output_reg(ctx, v1452);
                                // Rule at src/isa/aarch64/lower.isle line 2118.
                                return Some(v1453);
                            }
                            _ => {}
                        }
                        let v1457 = C::ty_vec64(ctx, v3);
                        if let Some(v1458) = v1457 {
                            let v1435 = C::offset32_to_u32(ctx, v1434);
                            let v1451 = &C::amode(ctx, F64, v1432, v1435);
                            let v1459 = constructor_aarch64_fpuload128(ctx, v1451, v1433);
                            let v1460 = constructor_output_reg(ctx, v1459);
                            // Rule at src/isa/aarch64/lower.isle line 2124.
                            return Some(v1460);
                        }
                        let v1465 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1466) = v1465 {
                            let v1435 = C::offset32_to_u32(ctx, v1434);
                            let v1451 = &C::amode(ctx, F64, v1432, v1435);
                            let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                            let v1453 = constructor_output_reg(ctx, v1452);
                            // Rule at src/isa/aarch64/lower.isle line 2132.
                            return Some(v1453);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v1435 = C::offset32_to_u32(ctx, v1434);
                            let v1462 = &C::amode(ctx, I8X16, v1432, v1435);
                            let v1463 = constructor_aarch64_fpuload128(ctx, v1462, v1433);
                            let v1464 = constructor_output_reg(ctx, v1463);
                            // Rule at src/isa/aarch64/lower.isle line 2128.
                            return Some(v1464);
                        }
                        let v1467 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1468) = v1467 {
                            let v1435 = C::offset32_to_u32(ctx, v1434);
                            let v1462 = &C::amode(ctx, I8X16, v1432, v1435);
                            let v1463 = constructor_aarch64_fpuload128(ctx, v1462, v1433);
                            let v1464 = constructor_output_reg(ctx, v1463);
                            // Rule at src/isa/aarch64/lower.isle line 2136.
                            return Some(v1464);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1436 = &C::amode(ctx, I8, v1432, v1435);
                    let v1437 = constructor_aarch64_uload8(ctx, v1436, v1433);
                    let v1438 = constructor_output_reg(ctx, v1437);
                    // Rule at src/isa/aarch64/lower.isle line 2141.
                    return Some(v1438);
                }
                &Opcode::Sload8 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1436 = &C::amode(ctx, I8, v1432, v1435);
                    let v1469 = constructor_aarch64_sload8(ctx, v1436, v1433);
                    let v1470 = constructor_output_reg(ctx, v1469);
                    // Rule at src/isa/aarch64/lower.isle line 2144.
                    return Some(v1470);
                }
                &Opcode::Uload16 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1439 = &C::amode(ctx, I16, v1432, v1435);
                    let v1440 = constructor_aarch64_uload16(ctx, v1439, v1433);
                    let v1441 = constructor_output_reg(ctx, v1440);
                    // Rule at src/isa/aarch64/lower.isle line 2147.
                    return Some(v1441);
                }
                &Opcode::Sload16 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1439 = &C::amode(ctx, I16, v1432, v1435);
                    let v1471 = constructor_aarch64_sload16(ctx, v1439, v1433);
                    let v1472 = constructor_output_reg(ctx, v1471);
                    // Rule at src/isa/aarch64/lower.isle line 2150.
                    return Some(v1472);
                }
                &Opcode::Uload32 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1442 = &C::amode(ctx, I32, v1432, v1435);
                    let v1443 = constructor_aarch64_uload32(ctx, v1442, v1433);
                    let v1444 = constructor_output_reg(ctx, v1443);
                    // Rule at src/isa/aarch64/lower.isle line 2153.
                    return Some(v1444);
                }
                &Opcode::Sload32 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1442 = &C::amode(ctx, I32, v1432, v1435);
                    let v1473 = constructor_aarch64_sload32(ctx, v1442, v1433);
                    let v1474 = constructor_output_reg(ctx, v1473);
                    // Rule at src/isa/aarch64/lower.isle line 2156.
                    return Some(v1474);
                }
                &Opcode::Uload8x8 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1478 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1452,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1479 = constructor_output_reg(ctx, v1478);
                    // Rule at src/isa/aarch64/lower.isle line 2166.
                    return Some(v1479);
                }
                &Opcode::Sload8x8 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1476 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1452,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1477 = constructor_output_reg(ctx, v1476);
                    // Rule at src/isa/aarch64/lower.isle line 2160.
                    return Some(v1477);
                }
                &Opcode::Uload16x4 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1482 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1452,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1483 = constructor_output_reg(ctx, v1482);
                    // Rule at src/isa/aarch64/lower.isle line 2178.
                    return Some(v1483);
                }
                &Opcode::Sload16x4 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1480 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1452,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1481 = constructor_output_reg(ctx, v1480);
                    // Rule at src/isa/aarch64/lower.isle line 2172.
                    return Some(v1481);
                }
                &Opcode::Uload32x2 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1486 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1452,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1487 = constructor_output_reg(ctx, v1486);
                    // Rule at src/isa/aarch64/lower.isle line 2190.
                    return Some(v1487);
                }
                &Opcode::Sload32x2 => {
                    let v1435 = C::offset32_to_u32(ctx, v1434);
                    let v1451 = &C::amode(ctx, F64, v1432, v1435);
                    let v1452 = constructor_aarch64_fpuload64(ctx, v1451, v1433);
                    let v1484 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1452,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1485 = constructor_output_reg(ctx, v1484);
                    // Rule at src/isa/aarch64/lower.isle line 2184.
                    return Some(v1485);
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1206,
            arg: v1207,
            flags: v1208,
        } => {
            match v1206 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1539 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v1540) = v1539 {
                            let v1541 = C::value_type(ctx, v1207);
                            let v1542 = C::ty_float_or_vec(ctx, v1541);
                            if let Some(v1543) = v1542 {
                                let v1544 = constructor_output_value(ctx, v1207);
                                // Rule at src/isa/aarch64/lower.isle line 2277.
                                return Some(v1544);
                            }
                            let v1545 = C::ty_int_ref_scalar_64(ctx, v1541);
                            if let Some(v1546) = v1545 {
                                let v1209 = C::put_in_reg(ctx, v1207);
                                let v1547 = &constructor_scalar_size(ctx, v1541);
                                let v1548 = constructor_mov_to_fpu(ctx, v1209, v1547);
                                let v1549 = constructor_output_reg(ctx, v1548);
                                // Rule at src/isa/aarch64/lower.isle line 2281.
                                return Some(v1549);
                            }
                        }
                        let v989 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v990) = v989 {
                            let v1541 = C::value_type(ctx, v1207);
                            let v1550 = C::fits_in_64(ctx, v1541);
                            if let Some(v1551) = v1550 {
                                let v1552 = C::ty_float_or_vec(ctx, v1551);
                                if let Some(v1553) = v1552 {
                                    let v1209 = C::put_in_reg(ctx, v1207);
                                    let v1554 = &constructor_scalar_size(ctx, v3);
                                    let v1555 = constructor_mov_from_vec(ctx, v1209, 0x0, v1554);
                                    let v1556 = constructor_output_reg(ctx, v1555);
                                    // Rule at src/isa/aarch64/lower.isle line 2286.
                                    return Some(v1556);
                                }
                            }
                            let v1545 = C::ty_int_ref_scalar_64(ctx, v1541);
                            if let Some(v1546) = v1545 {
                                let v1544 = constructor_output_value(ctx, v1207);
                                // Rule at src/isa/aarch64/lower.isle line 2291.
                                return Some(v1544);
                            }
                        }
                        if v3 == I128 {
                            let v1541 = C::value_type(ctx, v1207);
                            if v1541 == I128 {
                                let v1544 = constructor_output_value(ctx, v1207);
                                // Rule at src/isa/aarch64/lower.isle line 2295.
                                return Some(v1544);
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1204 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1205) = v1204 {
                            let v1209 = C::put_in_reg(ctx, v1207);
                            let v1210 = constructor_load_acquire(ctx, v1205, v1208, v1209);
                            let v1211 = constructor_output_reg(ctx, v1210);
                            // Rule at src/isa/aarch64/lower.isle line 1855.
                            return Some(v1211);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1425,
            args: v1426,
        } => {
            if let &Opcode::Return = v1425 {
                let v1427 = C::value_list_slice(ctx, v1426);
                let v1428 = C::value_slice_len(ctx, v1427);
                let v1429 = C::range(ctx, 0x0, v1428);
                let v1430 = constructor_lower_return(ctx, v1429, v1427);
                // Rule at src/isa/aarch64/lower.isle line 2095.
                return Some(v1430);
            }
        }
        &InstructionData::NullAry { opcode: ref v11 } => {
            match v11 {
                &Opcode::Debugtrap => {
                    let v1379 = &constructor_brk(ctx);
                    let v1380 = constructor_side_effect(ctx, v1379);
                    // Rule at src/isa/aarch64/lower.isle line 2060.
                    return Some(v1380);
                }
                &Opcode::GetPinnedReg => {
                    let v1534 = C::preg_pinned(ctx);
                    let v1535 = constructor_mov_from_preg(ctx, v1534);
                    let v1536 = constructor_output_reg(ctx, v1535);
                    // Rule at src/isa/aarch64/lower.isle line 2268.
                    return Some(v1536);
                }
                &Opcode::GetFramePointer => {
                    let v1401 = constructor_aarch64_fp(ctx);
                    let v1402 = constructor_output_reg(ctx, v1401);
                    // Rule at src/isa/aarch64/lower.isle line 2075.
                    return Some(v1402);
                }
                &Opcode::GetStackPointer => {
                    let v1403 = constructor_aarch64_sp(ctx);
                    let v1404 = constructor_output_reg(ctx, v1403);
                    // Rule at src/isa/aarch64/lower.isle line 2078.
                    return Some(v1404);
                }
                &Opcode::GetReturnAddress => {
                    let v1405 = constructor_aarch64_link(ctx);
                    let v1406 = constructor_output_reg(ctx, v1405);
                    // Rule at src/isa/aarch64/lower.isle line 2081.
                    return Some(v1406);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v13 = constructor_imm(ctx, v3, &ImmExtend::Zero, 0x0);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src/isa/aarch64/lower.isle line 24.
                        return Some(v14);
                    }
                }
                &Opcode::Nop => {
                    let v25 = C::invalid_reg(ctx);
                    let v26 = constructor_output_reg(ctx, v25);
                    // Rule at src/isa/aarch64/lower.isle line 39.
                    return Some(v26);
                }
                &Opcode::Fence => {
                    let v1368 = &constructor_aarch64_fence(ctx);
                    let v1369 = constructor_side_effect(ctx, v1368);
                    // Rule at src/isa/aarch64/lower.isle line 2043.
                    return Some(v1369);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v137,
            args: ref v138,
            imm: v139,
        } => {
            if let &Opcode::Shuffle = v137 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v143 = C::u128_from_immediate(ctx, v139);
                    if let Some(v144) = v143 {
                        let v145 = C::constant_f128(ctx, v144);
                        let v140 = C::unpack_value_array_2(ctx, v138);
                        let v146 = C::put_in_reg(ctx, v140.0);
                        let v147 = C::put_in_reg(ctx, v140.1);
                        let v3 = C::value_type(ctx, v2);
                        let v148 = constructor_vec_tbl2(ctx, v146, v147, v145, v3);
                        let v149 = constructor_output_reg(ctx, v148);
                        // Rule at src/isa/aarch64/lower.isle line 121.
                        return Some(v149);
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1590,
            stack_slot: v1591,
            offset: v1592,
        } => {
            if let &Opcode::StackAddr = v1590 {
                let v1593 = constructor_compute_stack_addr(ctx, v1591, v1592);
                let v1594 = constructor_output_reg(ctx, v1593);
                // Rule at src/isa/aarch64/lower.isle line 2328.
                return Some(v1594);
            }
        }
        &InstructionData::Store {
            opcode: ref v1488,
            args: ref v1489,
            flags: v1490,
            offset: v1491,
        } => {
            match v1488 {
                &Opcode::Store => {
                    let v1492 = C::unpack_value_array_2(ctx, v1489);
                    let v1495 = C::value_type(ctx, v1492.0);
                    match v1495 {
                        I8 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1497 = &C::amode(ctx, I8, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1499 = &constructor_aarch64_store8(ctx, v1497, v1490, v1498);
                            let v1500 = constructor_side_effect(ctx, v1499);
                            // Rule at src/isa/aarch64/lower.isle line 2199.
                            return Some(v1500);
                        }
                        I16 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1501 = &C::amode(ctx, I16, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1502 = &constructor_aarch64_store16(ctx, v1501, v1490, v1498);
                            let v1503 = constructor_side_effect(ctx, v1502);
                            // Rule at src/isa/aarch64/lower.isle line 2203.
                            return Some(v1503);
                        }
                        I32 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1504 = &C::amode(ctx, I32, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1505 = &constructor_aarch64_store32(ctx, v1504, v1490, v1498);
                            let v1506 = constructor_side_effect(ctx, v1505);
                            // Rule at src/isa/aarch64/lower.isle line 2207.
                            return Some(v1506);
                        }
                        I64 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1507 = &C::amode(ctx, I64, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1508 = &constructor_aarch64_store64(ctx, v1507, v1490, v1498);
                            let v1509 = constructor_side_effect(ctx, v1508);
                            // Rule at src/isa/aarch64/lower.isle line 2211.
                            return Some(v1509);
                        }
                        I128 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1516 = &C::pair_amode(ctx, v1492.1, v1496);
                            let v1517 = C::put_in_regs(ctx, v1492.0);
                            let v1518 = C::value_regs_get(ctx, v1517, 0x0);
                            let v1519 = C::put_in_regs(ctx, v1492.0);
                            let v1520 = C::value_regs_get(ctx, v1519, 0x1);
                            let v1521 =
                                &constructor_aarch64_storep64(ctx, v1516, v1490, v1518, v1520);
                            let v1522 = constructor_side_effect(ctx, v1521);
                            // Rule at src/isa/aarch64/lower.isle line 2242.
                            return Some(v1522);
                        }
                        R64 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1507 = &C::amode(ctx, I64, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1508 = &constructor_aarch64_store64(ctx, v1507, v1490, v1498);
                            let v1509 = constructor_side_effect(ctx, v1508);
                            // Rule at src/isa/aarch64/lower.isle line 2215.
                            return Some(v1509);
                        }
                        F32 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1510 = &C::amode(ctx, F32, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1511 = &constructor_aarch64_fpustore32(ctx, v1510, v1490, v1498);
                            let v1512 = constructor_side_effect(ctx, v1511);
                            // Rule at src/isa/aarch64/lower.isle line 2233.
                            return Some(v1512);
                        }
                        F64 => {
                            let v1496 = C::offset32_to_u32(ctx, v1491);
                            let v1513 = &C::amode(ctx, F64, v1492.1, v1496);
                            let v1498 = C::put_in_reg(ctx, v1492.0);
                            let v1514 = &constructor_aarch64_fpustore64(ctx, v1513, v1490, v1498);
                            let v1515 = constructor_side_effect(ctx, v1514);
                            // Rule at src/isa/aarch64/lower.isle line 2237.
                            return Some(v1515);
                        }
                        _ => {}
                    }
                    let v1523 = C::ty_vec64(ctx, v1495);
                    if let Some(v1524) = v1523 {
                        let v1496 = C::offset32_to_u32(ctx, v1491);
                        let v1513 = &C::amode(ctx, F64, v1492.1, v1496);
                        let v1498 = C::put_in_reg(ctx, v1492.0);
                        let v1514 = &constructor_aarch64_fpustore64(ctx, v1513, v1490, v1498);
                        let v1515 = constructor_side_effect(ctx, v1514);
                        // Rule at src/isa/aarch64/lower.isle line 2249.
                        return Some(v1515);
                    }
                    let v1530 = C::ty_dyn_vec64(ctx, v1495);
                    if let Some(v1531) = v1530 {
                        let v1496 = C::offset32_to_u32(ctx, v1491);
                        let v1513 = &C::amode(ctx, F64, v1492.1, v1496);
                        let v1498 = C::put_in_reg(ctx, v1492.0);
                        let v1514 = &constructor_aarch64_fpustore64(ctx, v1513, v1490, v1498);
                        let v1515 = constructor_side_effect(ctx, v1514);
                        // Rule at src/isa/aarch64/lower.isle line 2257.
                        return Some(v1515);
                    }
                    let v1525 = C::ty_vec128(ctx, v1495);
                    if let Some(v1526) = v1525 {
                        let v1496 = C::offset32_to_u32(ctx, v1491);
                        let v1527 = &C::amode(ctx, I8X16, v1492.1, v1496);
                        let v1498 = C::put_in_reg(ctx, v1492.0);
                        let v1528 = &constructor_aarch64_fpustore128(ctx, v1527, v1490, v1498);
                        let v1529 = constructor_side_effect(ctx, v1528);
                        // Rule at src/isa/aarch64/lower.isle line 2253.
                        return Some(v1529);
                    }
                    let v1532 = C::ty_dyn_vec128(ctx, v1495);
                    if let Some(v1533) = v1532 {
                        let v1496 = C::offset32_to_u32(ctx, v1491);
                        let v1527 = &C::amode(ctx, I8X16, v1492.1, v1496);
                        let v1498 = C::put_in_reg(ctx, v1492.0);
                        let v1528 = &constructor_aarch64_fpustore128(ctx, v1527, v1490, v1498);
                        let v1529 = constructor_side_effect(ctx, v1528);
                        // Rule at src/isa/aarch64/lower.isle line 2261.
                        return Some(v1529);
                    }
                }
                &Opcode::Istore8 => {
                    let v1492 = C::unpack_value_array_2(ctx, v1489);
                    let v1496 = C::offset32_to_u32(ctx, v1491);
                    let v1497 = &C::amode(ctx, I8, v1492.1, v1496);
                    let v1498 = C::put_in_reg(ctx, v1492.0);
                    let v1499 = &constructor_aarch64_store8(ctx, v1497, v1490, v1498);
                    let v1500 = constructor_side_effect(ctx, v1499);
                    // Rule at src/isa/aarch64/lower.isle line 2220.
                    return Some(v1500);
                }
                &Opcode::Istore16 => {
                    let v1492 = C::unpack_value_array_2(ctx, v1489);
                    let v1496 = C::offset32_to_u32(ctx, v1491);
                    let v1501 = &C::amode(ctx, I16, v1492.1, v1496);
                    let v1498 = C::put_in_reg(ctx, v1492.0);
                    let v1502 = &constructor_aarch64_store16(ctx, v1501, v1490, v1498);
                    let v1503 = constructor_side_effect(ctx, v1502);
                    // Rule at src/isa/aarch64/lower.isle line 2224.
                    return Some(v1503);
                }
                &Opcode::Istore32 => {
                    let v1492 = C::unpack_value_array_2(ctx, v1489);
                    let v1496 = C::offset32_to_u32(ctx, v1491);
                    let v1504 = &C::amode(ctx, I32, v1492.1, v1496);
                    let v1498 = C::put_in_reg(ctx, v1492.0);
                    let v1505 = &constructor_aarch64_store32(ctx, v1504, v1490, v1498);
                    let v1506 = constructor_side_effect(ctx, v1505);
                    // Rule at src/isa/aarch64/lower.isle line 2228.
                    return Some(v1506);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1212,
            args: ref v1213,
            flags: v1214,
        } => {
            if let &Opcode::AtomicStore = v1212 {
                let v1215 = C::unpack_value_array_2(ctx, v1213);
                let v1218 = C::value_type(ctx, v1215.0);
                let v1219 = C::valid_atomic_transaction(ctx, v1218);
                if let Some(v1220) = v1219 {
                    let v1221 = C::put_in_reg(ctx, v1215.0);
                    let v1222 = C::put_in_reg(ctx, v1215.1);
                    let v1223 = &constructor_store_release(ctx, v1220, v1214, v1221, v1222);
                    let v1224 = constructor_side_effect(ctx, v1223);
                    // Rule at src/isa/aarch64/lower.isle line 1860.
                    return Some(v1224);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v386,
            args: ref v387,
        } => {
            match v386 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v388 = C::unpack_value_array_3(ctx, v387);
                        let v1088 = C::maybe_uextend(ctx, v388.0);
                        if let Some(v1089) = v1088 {
                            let v1090 = C::def_inst(ctx, v1089);
                            if let Some(v1091) = v1090 {
                                let v1092 = &C::inst_data(ctx, v1091);
                                match v1092 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1106,
                                        args: ref v1107,
                                        cond: ref v1108,
                                    } => {
                                        if let &Opcode::Fcmp = v1106 {
                                            let v1113 = &C::fp_cond_code(ctx, v1108);
                                            let v1109 = C::unpack_value_array_2(ctx, v1107);
                                            let v1112 = C::value_type(ctx, v1109.0);
                                            let v1114 = &constructor_scalar_size(ctx, v1112);
                                            let v1115 = C::put_in_reg(ctx, v1109.0);
                                            let v1116 = C::put_in_reg(ctx, v1109.1);
                                            let v1117 =
                                                &constructor_fpu_cmp(ctx, v1114, v1115, v1116);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1118 = constructor_lower_select(
                                                ctx, v1117, v1113, v3, v388.1, v388.2,
                                            );
                                            let v1119 = C::output(ctx, v1118);
                                            // Rule at src/isa/aarch64/lower.isle line 1751.
                                            return Some(v1119);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1093,
                                        args: ref v1094,
                                        cond: ref v1095,
                                    } => {
                                        if let &Opcode::Icmp = v1093 {
                                            let v1096 = C::unpack_value_array_2(ctx, v1094);
                                            let v1099 = C::value_type(ctx, v1096.0);
                                            let v1100 = &constructor_lower_icmp_into_flags(
                                                ctx, v1095, v1096.0, v1096.1, v1099,
                                            );
                                            let v1101 = &constructor_flags_and_cc_flags(ctx, v1100);
                                            let v1102 = &constructor_flags_and_cc_cc(ctx, v1100);
                                            let v1103 = &C::cond_code(ctx, v1102);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1104 = constructor_lower_select(
                                                ctx, v1101, v1103, v3, v388.1, v388.2,
                                            );
                                            let v1105 = C::output(ctx, v1104);
                                            // Rule at src/isa/aarch64/lower.isle line 1738.
                                            return Some(v1105);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1120 = C::value_type(ctx, v388.0);
                        if v1120 == I8 {
                            let v997 = C::put_in_reg(ctx, v388.0);
                            let v1122 = C::u64_into_imm_logic(ctx, I32, 0xFF);
                            let v1123 = &constructor_tst_imm(ctx, I32, v997, v1122);
                            let v3 = C::value_type(ctx, v2);
                            let v1124 =
                                constructor_lower_select(ctx, v1123, &Cond::Ne, v3, v388.1, v388.2);
                            let v1125 = C::output(ctx, v1124);
                            // Rule at src/isa/aarch64/lower.isle line 1760.
                            return Some(v1125);
                        }
                        let v1126 = C::fits_in_32(ctx, v1120);
                        if let Some(v1127) = v1126 {
                            let v1128 = constructor_put_in_reg_zext32(ctx, v388.0);
                            let v1129 = C::zero_reg(ctx);
                            let v1130 = &constructor_cmp(ctx, &OperandSize::Size32, v1128, v1129);
                            let v3 = C::value_type(ctx, v2);
                            let v1131 =
                                constructor_lower_select(ctx, v1130, &Cond::Ne, v3, v388.1, v388.2);
                            let v1132 = C::output(ctx, v1131);
                            // Rule at src/isa/aarch64/lower.isle line 1766.
                            return Some(v1132);
                        }
                        let v1133 = C::fits_in_64(ctx, v1120);
                        if let Some(v1134) = v1133 {
                            let v1135 = constructor_put_in_reg_zext64(ctx, v388.0);
                            let v1129 = C::zero_reg(ctx);
                            let v1136 = &constructor_cmp(ctx, &OperandSize::Size64, v1135, v1129);
                            let v3 = C::value_type(ctx, v2);
                            let v1137 =
                                constructor_lower_select(ctx, v1136, &Cond::Ne, v3, v388.1, v388.2);
                            let v1138 = C::output(ctx, v1137);
                            // Rule at src/isa/aarch64/lower.isle line 1772.
                            return Some(v1138);
                        }
                        if v1120 == I128 {
                            let v1139 = C::put_in_regs(ctx, v388.0);
                            let v1140 = C::value_regs_get(ctx, v1139, 0x0);
                            let v1141 = C::value_regs_get(ctx, v1139, 0x1);
                            let v1142 = constructor_orr(ctx, I64, v1140, v1141);
                            let v804 = C::zero_reg(ctx);
                            let v1143 = &constructor_cmp(ctx, &OperandSize::Size64, v1142, v804);
                            let v3 = C::value_type(ctx, v2);
                            let v1144 =
                                constructor_lower_select(ctx, v1143, &Cond::Ne, v3, v388.1, v388.2);
                            let v1145 = C::output(ctx, v1144);
                            // Rule at src/isa/aarch64/lower.isle line 1778.
                            return Some(v1145);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v388 = C::unpack_value_array_3(ctx, v387);
                        let v1088 = C::maybe_uextend(ctx, v388.0);
                        if let Some(v1089) = v1088 {
                            let v1090 = C::def_inst(ctx, v1089);
                            if let Some(v1091) = v1090 {
                                let v1092 = &C::inst_data(ctx, v1091);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1093,
                                    args: ref v1094,
                                    cond: ref v1095,
                                } = v1092
                                {
                                    if let &Opcode::Icmp = v1093 {
                                        let v1096 = C::unpack_value_array_2(ctx, v1094);
                                        let v1099 = C::value_type(ctx, v1096.0);
                                        let v1100 = &constructor_lower_icmp_into_flags(
                                            ctx, v1095, v1096.0, v1096.1, v1099,
                                        );
                                        let v1101 = &constructor_flags_and_cc_flags(ctx, v1100);
                                        let v1102 = &constructor_flags_and_cc_cc(ctx, v1100);
                                        let v1103 = &C::cond_code(ctx, v1102);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1104 = constructor_lower_select(
                                            ctx, v1101, v1103, v3, v388.1, v388.2,
                                        );
                                        let v1146 = &constructor_csdb(ctx);
                                        let v1147 = constructor_side_effect(ctx, v1146);
                                        let v1148 = C::output(ctx, v1104);
                                        // Rule at src/isa/aarch64/lower.isle line 1789.
                                        return Some(v1148);
                                    }
                                }
                            }
                        }
                        let v1120 = C::value_type(ctx, v388.0);
                        let v1133 = C::fits_in_64(ctx, v1120);
                        if let Some(v1134) = v1133 {
                            let v1135 = constructor_put_in_reg_zext64(ctx, v388.0);
                            let v1129 = C::zero_reg(ctx);
                            let v1136 = &constructor_cmp(ctx, &OperandSize::Size64, v1135, v1129);
                            let v3 = C::value_type(ctx, v2);
                            let v1137 =
                                constructor_lower_select(ctx, v1136, &Cond::Ne, v3, v388.1, v388.2);
                            let v1138 = C::output(ctx, v1137);
                            // Rule at src/isa/aarch64/lower.isle line 1803.
                            return Some(v1138);
                        }
                        if v1120 == I128 {
                            let v1139 = C::put_in_regs(ctx, v388.0);
                            let v1140 = C::value_regs_get(ctx, v1139, 0x0);
                            let v1141 = C::value_regs_get(ctx, v1139, 0x1);
                            let v1142 = constructor_orr(ctx, I64, v1140, v1141);
                            let v804 = C::zero_reg(ctx);
                            let v1143 = &constructor_cmp(ctx, &OperandSize::Size64, v1142, v804);
                            let v3 = C::value_type(ctx, v2);
                            let v1144 =
                                constructor_lower_select(ctx, v1143, &Cond::Ne, v3, v388.1, v388.2);
                            let v1145 = C::output(ctx, v1144);
                            // Rule at src/isa/aarch64/lower.isle line 1809.
                            return Some(v1145);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v388 = C::unpack_value_array_3(ctx, v387);
                            let v997 = C::put_in_reg(ctx, v388.0);
                            let v998 = C::put_in_reg(ctx, v388.1);
                            let v999 = C::put_in_reg(ctx, v388.2);
                            let v1000 = constructor_bsl(ctx, v501, v997, v998, v999);
                            let v1001 = constructor_output_reg(ctx, v1000);
                            // Rule at src/isa/aarch64/lower.isle line 1645.
                            return Some(v1001);
                        }
                        let v989 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v990) = v989 {
                            let v388 = C::unpack_value_array_3(ctx, v387);
                            let v991 = C::put_in_reg(ctx, v388.1);
                            let v394 = C::put_in_reg(ctx, v388.0);
                            let v992 = constructor_and_reg(ctx, v3, v991, v394);
                            let v400 = C::put_in_reg(ctx, v388.2);
                            let v993 = C::put_in_reg(ctx, v388.0);
                            let v994 = constructor_bic(ctx, v3, v400, v993);
                            let v995 = constructor_orr(ctx, v3, v992, v994);
                            let v996 = constructor_output_reg(ctx, v995);
                            // Rule at src/isa/aarch64/lower.isle line 1639.
                            return Some(v996);
                        }
                    }
                }
                &Opcode::Vselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v388 = C::unpack_value_array_3(ctx, v387);
                            let v997 = C::put_in_reg(ctx, v388.0);
                            let v998 = C::put_in_reg(ctx, v388.1);
                            let v999 = C::put_in_reg(ctx, v388.2);
                            let v1000 = constructor_bsl(ctx, v501, v997, v998, v999);
                            let v1001 = constructor_output_reg(ctx, v1000);
                            // Rule at src/isa/aarch64/lower.isle line 1650.
                            return Some(v1001);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v313 = &constructor_scalar_size(ctx, v273);
                            let v388 = C::unpack_value_array_3(ctx, v387);
                            let v394 = C::put_in_reg(ctx, v388.0);
                            let v395 = C::put_in_reg(ctx, v388.1);
                            let v400 = C::put_in_reg(ctx, v388.2);
                            let v401 =
                                constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v313, v394, v395, v400);
                            let v402 = constructor_output_reg(ctx, v401);
                            // Rule at src/isa/aarch64/lower.isle line 403.
                            return Some(v402);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v388 = C::unpack_value_array_3(ctx, v387);
                            let v393 = C::put_in_reg(ctx, v388.2);
                            let v394 = C::put_in_reg(ctx, v388.0);
                            let v395 = C::put_in_reg(ctx, v388.1);
                            let v396 = &constructor_vector_size(ctx, v3);
                            let v397 = constructor_vec_rrr_mod(
                                ctx,
                                &VecALUModOp::Fmla,
                                v393,
                                v394,
                                v395,
                                v396,
                            );
                            let v398 = constructor_output_reg(ctx, v397);
                            // Rule at src/isa/aarch64/lower.isle line 400.
                            return Some(v398);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1570,
            args: ref v1571,
            imm: v1572,
        } => {
            if let &Opcode::Insertlane = v1570 {
                let v1573 = C::unpack_value_array_2(ctx, v1571);
                let v1577 = C::value_type(ctx, v1573.1);
                let v1578 = C::ty_int(ctx, v1577);
                if let Some(v1579) = v1578 {
                    let v1581 = C::put_in_reg(ctx, v1573.0);
                    let v1582 = C::put_in_reg(ctx, v1573.1);
                    let v1576 = C::value_type(ctx, v1573.0);
                    let v1583 = &constructor_vector_size(ctx, v1576);
                    let v1580 = C::u8_from_uimm8(ctx, v1572);
                    let v1584 = constructor_mov_to_vec(ctx, v1581, v1582, v1580, v1583);
                    let v1585 = constructor_output_reg(ctx, v1584);
                    // Rule at src/isa/aarch64/lower.isle line 2316.
                    return Some(v1585);
                }
                let v1586 = C::ty_scalar_float(ctx, v1577);
                if let Some(v1587) = v1586 {
                    let v1581 = C::put_in_reg(ctx, v1573.0);
                    let v1582 = C::put_in_reg(ctx, v1573.1);
                    let v1576 = C::value_type(ctx, v1573.0);
                    let v1583 = &constructor_vector_size(ctx, v1576);
                    let v1580 = C::u8_from_uimm8(ctx, v1572);
                    let v1588 = constructor_mov_vec_elem(ctx, v1581, v1582, v1580, 0x0, v1583);
                    let v1589 = constructor_output_reg(ctx, v1588);
                    // Rule at src/isa/aarch64/lower.isle line 2321.
                    return Some(v1589);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1084,
            code: ref v1085,
        } => {
            match v1084 {
                &Opcode::Trap => {
                    let v1086 = &constructor_udf(ctx, v1085);
                    let v1087 = constructor_side_effect(ctx, v1086);
                    // Rule at src/isa/aarch64/lower.isle line 1728.
                    return Some(v1087);
                }
                &Opcode::ResumableTrap => {
                    let v1086 = &constructor_udf(ctx, v1085);
                    let v1087 = constructor_side_effect(ctx, v1086);
                    // Rule at src/isa/aarch64/lower.isle line 1733.
                    return Some(v1087);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v152,
            arg: v153,
        } => {
            match v152 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v653 = C::def_inst(ctx, v153);
                        if let Some(v654) = v653 {
                            let v655 = &C::inst_data(ctx, v654);
                            match v655 {
                                &InstructionData::Load {
                                    opcode: ref v1195,
                                    arg: v1196,
                                    flags: v1197,
                                    offset: v1198,
                                } => {
                                    if let &Opcode::Load = v1195 {
                                        let v668 = C::is_sinkable_inst(ctx, v153);
                                        if let Some(v669) = v668 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1199 = C::lane_type(ctx, v3);
                                            let v1200 =
                                                &constructor_sink_load_into_amode(ctx, v1199, v669);
                                            let v1201 = constructor_load_addr(ctx, v1200);
                                            let v121 = &constructor_vector_size(ctx, v3);
                                            let v1202 = constructor_ld1r(ctx, v1201, v121, v1197);
                                            let v1203 = constructor_output_reg(ctx, v1202);
                                            // Rule at src/isa/aarch64/lower.isle line 1848.
                                            return Some(v1203);
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1185,
                                    arg: v1186,
                                } => {
                                    if let &Opcode::Ireduce = v1185 {
                                        let v1187 = C::def_inst(ctx, v1186);
                                        if let Some(v1188) = v1187 {
                                            let v1189 = &C::inst_data(ctx, v1188);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1190,
                                                imm: v1191,
                                            } = v1189
                                            {
                                                if let &Opcode::Iconst = v1190 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1172 = &constructor_vector_size(ctx, v3);
                                                    let v1192 = C::u64_from_imm64(ctx, v1191);
                                                    let v1193 = C::splat_const(ctx, v1192, v1172);
                                                    let v1194 = constructor_output_reg(ctx, v1193);
                                                    // Rule at src/isa/aarch64/lower.isle line 1845.
                                                    return Some(v1194);
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1169,
                                    imm: v1170,
                                } => {
                                    if let &Opcode::F32const = v1169 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1172 = &constructor_vector_size(ctx, v3);
                                        let v1171 = C::u64_from_ieee32(ctx, v1170);
                                        let v1173 = C::splat_const(ctx, v1171, v1172);
                                        let v1174 = constructor_output_reg(ctx, v1173);
                                        // Rule at src/isa/aarch64/lower.isle line 1836.
                                        return Some(v1174);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1175,
                                    imm: v1176,
                                } => {
                                    if let &Opcode::F64const = v1175 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1172 = &constructor_vector_size(ctx, v3);
                                        let v1177 = C::u64_from_ieee64(ctx, v1176);
                                        let v1178 = C::splat_const(ctx, v1177, v1172);
                                        let v1179 = constructor_output_reg(ctx, v1178);
                                        // Rule at src/isa/aarch64/lower.isle line 1839.
                                        return Some(v1179);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1180,
                                    imm: v1181,
                                } => {
                                    if let &Opcode::Iconst = v1180 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1172 = &constructor_vector_size(ctx, v3);
                                        let v1182 = C::u64_from_imm64(ctx, v1181);
                                        let v1183 = C::splat_const(ctx, v1182, v1172);
                                        let v1184 = constructor_output_reg(ctx, v1183);
                                        // Rule at src/isa/aarch64/lower.isle line 1842.
                                        return Some(v1184);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v154 = C::value_type(ctx, v153);
                        let v1161 = C::ty_int_ref_scalar_64(ctx, v154);
                        if let Some(v1162) = v1161 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v3 = C::value_type(ctx, v2);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v1163 = constructor_vec_dup(ctx, v163, v236);
                            let v1164 = constructor_output_reg(ctx, v1163);
                            // Rule at src/isa/aarch64/lower.isle line 1829.
                            return Some(v1164);
                        }
                        let v1165 = C::ty_scalar_float(ctx, v154);
                        if let Some(v1166) = v1165 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v3 = C::value_type(ctx, v2);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v1167 = constructor_vec_dup_from_fpu(ctx, v163, v236);
                            let v1168 = constructor_output_reg(ctx, v1167);
                            // Rule at src/isa/aarch64/lower.isle line 1833.
                            return Some(v1168);
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v163 = C::put_in_reg(ctx, v153);
                    let v1537 = &constructor_write_pinned_reg(ctx, v163);
                    let v1538 = constructor_side_effect(ctx, v1537);
                    // Rule at src/isa/aarch64/lower.isle line 2271.
                    return Some(v1538);
                }
                &Opcode::VanyTrue => {
                    let v163 = C::put_in_reg(ctx, v153);
                    let v154 = C::value_type(ctx, v153);
                    let v217 = &constructor_vanytrue(ctx, v163, v154);
                    let v218 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v219 = constructor_with_flags(ctx, v217, v218);
                    let v220 = C::output(ctx, v219);
                    // Rule at src/isa/aarch64/lower.isle line 201.
                    return Some(v220);
                }
                &Opcode::VallTrue => {
                    let v154 = C::value_type(ctx, v153);
                    let v177 = C::multi_lane(ctx, v154);
                    if let Some(v178) = v177 {
                        match v178.0 {
                            0x20 => {
                                if v178.1 == 0x2 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v190 = constructor_mov_from_vec(
                                        ctx,
                                        v163,
                                        0x0,
                                        &ScalarSize::Size64,
                                    );
                                    let v192 = C::zero_reg(ctx);
                                    let v194 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v192,
                                        v190,
                                        0x20,
                                    );
                                    let v196 = C::u8_into_uimm5(ctx, 0x0);
                                    let v199 = C::nzcv(ctx, false, true, false, false);
                                    let v201 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v190,
                                        v196,
                                        v199,
                                        &Cond::Ne,
                                    );
                                    let v202 = constructor_with_flags(ctx, v194, v201);
                                    let v203 = C::output(ctx, v202);
                                    // Rule at src/isa/aarch64/lower.isle line 175.
                                    return Some(v203);
                                }
                            }
                            0x40 => {
                                if v178.1 == 0x2 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v182 = constructor_cmeq0(ctx, v163, &VectorSize::Size64x2);
                                    let v183 =
                                        constructor_addp(ctx, v182, v182, &VectorSize::Size64x2);
                                    let v184 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v183, v183);
                                    let v186 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v187 = constructor_with_flags(ctx, v184, v186);
                                    let v188 = C::output(ctx, v187);
                                    // Rule at src/isa/aarch64/lower.isle line 169.
                                    return Some(v188);
                                }
                            }
                            _ => {}
                        }
                    }
                    let v204 = C::lane_fits_in_32(ctx, v154);
                    if let Some(v205) = v204 {
                        let v206 = C::not_vec32x2(ctx, v205);
                        if let Some(v207) = v206 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v209 = &constructor_vector_size(ctx, v205);
                            let v210 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v163, v209);
                            let v211 =
                                constructor_mov_from_vec(ctx, v210, 0x0, &ScalarSize::Size64);
                            let v212 = C::u8_into_imm12(ctx, 0x0);
                            let v213 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v211, v212);
                            let v214 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v215 = constructor_with_flags(ctx, v213, v214);
                            let v216 = C::output(ctx, v215);
                            // Rule at src/isa/aarch64/lower.isle line 192.
                            return Some(v216);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v154 = C::value_type(ctx, v153);
                    match v154 {
                        I8X16 => {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1597 = constructor_vec_shift_imm(
                                ctx,
                                &VecShiftImmOp::Sshr,
                                0x7,
                                v163,
                                &VectorSize::Size8x16,
                            );
                            let v1599 = C::constant_f128(ctx, 0x80402010080402018040201008040201);
                            let v1600 =
                                constructor_and_vec(ctx, v1597, v1599, &VectorSize::Size8x16);
                            let v1602 = constructor_vec_extract(ctx, v1600, v1600, 0x8);
                            let v1603 = constructor_zip1(ctx, v1600, v1602, &VectorSize::Size8x16);
                            let v1605 = constructor_addv(ctx, v1603, &VectorSize::Size16x8);
                            let v1606 =
                                constructor_mov_from_vec(ctx, v1605, 0x0, &ScalarSize::Size16);
                            let v1607 = constructor_output_reg(ctx, v1606);
                            // Rule at src/isa/aarch64/lower.isle line 2342.
                            return Some(v1607);
                        }
                        I16X8 => {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1609 = constructor_vec_shift_imm(
                                ctx,
                                &VecShiftImmOp::Sshr,
                                0xF,
                                v163,
                                &VectorSize::Size16x8,
                            );
                            let v1611 = C::constant_f128(ctx, 0x800040002000100008000400020001);
                            let v1612 =
                                constructor_and_vec(ctx, v1609, v1611, &VectorSize::Size16x8);
                            let v1613 = constructor_addv(ctx, v1612, &VectorSize::Size16x8);
                            let v1614 =
                                constructor_mov_from_vec(ctx, v1613, 0x0, &ScalarSize::Size16);
                            let v1615 = constructor_output_reg(ctx, v1614);
                            // Rule at src/isa/aarch64/lower.isle line 2366.
                            return Some(v1615);
                        }
                        I32X4 => {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1617 = constructor_vec_shift_imm(
                                ctx,
                                &VecShiftImmOp::Sshr,
                                0x1F,
                                v163,
                                &VectorSize::Size32x4,
                            );
                            let v1619 = C::constant_f128(ctx, 0x8000000040000000200000001);
                            let v1620 =
                                constructor_and_vec(ctx, v1617, v1619, &VectorSize::Size32x4);
                            let v1621 = constructor_addv(ctx, v1620, &VectorSize::Size32x4);
                            let v1622 =
                                constructor_mov_from_vec(ctx, v1621, 0x0, &ScalarSize::Size32);
                            let v1623 = constructor_output_reg(ctx, v1622);
                            // Rule at src/isa/aarch64/lower.isle line 2379.
                            return Some(v1623);
                        }
                        I64X2 => {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1624 =
                                constructor_mov_from_vec(ctx, v163, 0x1, &ScalarSize::Size64);
                            let v1625 = C::put_in_reg(ctx, v153);
                            let v1626 =
                                constructor_mov_from_vec(ctx, v1625, 0x0, &ScalarSize::Size64);
                            let v696 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1627 = constructor_lsr_imm(ctx, I64, v1624, v696);
                            let v932 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1628 = constructor_lsr_imm(ctx, I64, v1626, v932);
                            let v1629 = C::lshl_from_u64(ctx, I64, 0x1);
                            let v1630 = v1629?;
                            let v1631 = constructor_add_shift(ctx, I64, v1628, v1627, v1630);
                            let v1632 = constructor_output_reg(ctx, v1631);
                            // Rule at src/isa/aarch64/lower.isle line 2392.
                            return Some(v1632);
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v515 = constructor_value_regs_zero(ctx);
                            let v516 = C::put_in_regs(ctx, v153);
                            let v517 = constructor_sub_i128(ctx, v515, v516);
                            let v518 = C::output(ctx, v517);
                            // Rule at src/isa/aarch64/lower.isle line 583.
                            return Some(v518);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v511 = C::zero_reg(ctx);
                            let v512 = C::put_in_reg(ctx, v153);
                            let v513 = constructor_sub(ctx, v28, v511, v512);
                            let v514 = constructor_output_reg(ctx, v513);
                            // Rule at src/isa/aarch64/lower.isle line 579.
                            return Some(v514);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v519 = &constructor_vector_size(ctx, v501);
                            let v520 = constructor_neg(ctx, v163, v519);
                            let v521 = constructor_output_reg(ctx, v520);
                            // Rule at src/isa/aarch64/lower.isle line 587.
                            return Some(v521);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v239 = constructor_abs(ctx, &OperandSize::Size64, v163);
                            let v240 = constructor_output_reg(ctx, v239);
                            // Rule at src/isa/aarch64/lower.isle line 227.
                            return Some(v240);
                        }
                        let v241 = C::fits_in_32(ctx, v3);
                        if let Some(v242) = v241 {
                            let v243 = constructor_put_in_reg_sext32(ctx, v153);
                            let v244 = constructor_abs(ctx, &OperandSize::Size32, v243);
                            let v245 = constructor_output_reg(ctx, v244);
                            // Rule at src/isa/aarch64/lower.isle line 230.
                            return Some(v245);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v237 = constructor_vec_abs(ctx, v163, v236);
                            let v238 = constructor_output_reg(ctx, v237);
                            // Rule at src/isa/aarch64/lower.isle line 224.
                            return Some(v238);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v653 = C::def_inst(ctx, v153);
                            if let Some(v654) = v653 {
                                let v655 = &C::inst_data(ctx, v654);
                                if let &InstructionData::Binary {
                                    opcode: ref v707,
                                    args: ref v708,
                                } = v655
                                {
                                    if let &Opcode::Ishl = v707 {
                                        let v709 = C::unpack_value_array_2(ctx, v708);
                                        let v712 = C::def_inst(ctx, v709.1);
                                        if let Some(v713) = v712 {
                                            let v714 = &C::inst_data(ctx, v713);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v715,
                                                imm: v716,
                                            } = v714
                                            {
                                                if let &Opcode::Iconst = v715 {
                                                    let v717 = C::lshl_from_imm64(ctx, v28, v716);
                                                    if let Some(v718) = v717 {
                                                        let v511 = C::zero_reg(ctx);
                                                        let v719 = C::put_in_reg(ctx, v709.0);
                                                        let v720 = constructor_orr_not_shift(
                                                            ctx, v28, v511, v719, v718,
                                                        );
                                                        let v721 =
                                                            constructor_output_reg(ctx, v720);
                                                        // Rule at src/isa/aarch64/lower.isle line 1037.
                                                        return Some(v721);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v155 = C::put_in_regs(ctx, v153);
                            let v156 = C::value_regs_get(ctx, v155, 0x0);
                            let v722 = C::value_regs_get(ctx, v155, 0x1);
                            let v723 = C::zero_reg(ctx);
                            let v724 = constructor_orr_not(ctx, I64, v723, v156);
                            let v725 = C::zero_reg(ctx);
                            let v726 = constructor_orr_not(ctx, I64, v725, v722);
                            let v727 = C::value_regs(ctx, v724, v726);
                            let v728 = C::output(ctx, v727);
                            // Rule at src/isa/aarch64/lower.isle line 1043.
                            return Some(v728);
                        }
                        if let Some(v28) = v27 {
                            let v511 = C::zero_reg(ctx);
                            let v512 = C::put_in_reg(ctx, v153);
                            let v705 = constructor_orr_not(ctx, v28, v511, v512);
                            let v706 = constructor_output_reg(ctx, v705);
                            // Rule at src/isa/aarch64/lower.isle line 1032.
                            return Some(v706);
                        }
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v519 = &constructor_vector_size(ctx, v501);
                            let v729 = constructor_not(ctx, v163, v519);
                            let v730 = constructor_output_reg(ctx, v729);
                            // Rule at src/isa/aarch64/lower.isle line 1052.
                            return Some(v730);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v884 = constructor_rbit(ctx, I32, v163);
                                let v886 = C::imm_shift_from_u8(ctx, 0x18);
                                let v887 = constructor_lsr_imm(ctx, I32, v884, v886);
                                let v888 = constructor_output_reg(ctx, v887);
                                // Rule at src/isa/aarch64/lower.isle line 1461.
                                return Some(v888);
                            }
                            I16 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v884 = constructor_rbit(ctx, I32, v163);
                                let v890 = C::imm_shift_from_u8(ctx, 0x10);
                                let v891 = constructor_lsr_imm(ctx, I32, v884, v890);
                                let v892 = constructor_output_reg(ctx, v891);
                                // Rule at src/isa/aarch64/lower.isle line 1467.
                                return Some(v892);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v156 = C::value_regs_get(ctx, v155, 0x0);
                                let v893 = constructor_rbit(ctx, I64, v156);
                                let v158 = C::value_regs_get(ctx, v155, 0x1);
                                let v894 = constructor_rbit(ctx, I64, v158);
                                let v895 = C::value_regs(ctx, v894, v893);
                                let v896 = C::output(ctx, v895);
                                // Rule at src/isa/aarch64/lower.isle line 1470.
                                return Some(v896);
                            }
                            _ => {}
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v897 = constructor_rbit(ctx, v3, v163);
                        let v898 = constructor_output_reg(ctx, v897);
                        // Rule at src/isa/aarch64/lower.isle line 1476.
                        return Some(v898);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v174 = constructor_put_in_reg_zext32(ctx, v153);
                                let v899 = constructor_a64_clz(ctx, I32, v174);
                                let v900 = C::u8_into_imm12(ctx, 0x18);
                                let v901 = constructor_sub_imm(ctx, I32, v899, v900);
                                let v902 = constructor_output_reg(ctx, v901);
                                // Rule at src/isa/aarch64/lower.isle line 1482.
                                return Some(v902);
                            }
                            I16 => {
                                let v174 = constructor_put_in_reg_zext32(ctx, v153);
                                let v899 = constructor_a64_clz(ctx, I32, v174);
                                let v903 = C::u8_into_imm12(ctx, 0x10);
                                let v904 = constructor_sub_imm(ctx, I32, v899, v903);
                                let v905 = constructor_output_reg(ctx, v904);
                                // Rule at src/isa/aarch64/lower.isle line 1485.
                                return Some(v905);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v906 = constructor_lower_clz128(ctx, v155);
                                let v907 = C::output(ctx, v906);
                                // Rule at src/isa/aarch64/lower.isle line 1488.
                                return Some(v907);
                            }
                            _ => {}
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v908 = constructor_a64_clz(ctx, v3, v163);
                        let v909 = constructor_output_reg(ctx, v908);
                        // Rule at src/isa/aarch64/lower.isle line 1491.
                        return Some(v909);
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v243 = constructor_put_in_reg_sext32(ctx, v153);
                                let v924 = constructor_a64_cls(ctx, I32, v243);
                                let v900 = C::u8_into_imm12(ctx, 0x18);
                                let v925 = constructor_sub_imm(ctx, I32, v924, v900);
                                let v926 = constructor_output_reg(ctx, v925);
                                // Rule at src/isa/aarch64/lower.isle line 1529.
                                return Some(v926);
                            }
                            I16 => {
                                let v243 = constructor_put_in_reg_sext32(ctx, v153);
                                let v924 = constructor_a64_cls(ctx, I32, v243);
                                let v903 = C::u8_into_imm12(ctx, 0x10);
                                let v927 = constructor_sub_imm(ctx, I32, v924, v903);
                                let v928 = constructor_output_reg(ctx, v927);
                                // Rule at src/isa/aarch64/lower.isle line 1532.
                                return Some(v928);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v156 = C::value_regs_get(ctx, v155, 0x0);
                                let v722 = C::value_regs_get(ctx, v155, 0x1);
                                let v929 = constructor_a64_cls(ctx, I64, v156);
                                let v930 = constructor_a64_cls(ctx, I64, v722);
                                let v931 = constructor_eon(ctx, I64, v722, v156);
                                let v932 = C::imm_shift_from_u8(ctx, 0x3F);
                                let v933 = constructor_lsr_imm(ctx, I64, v931, v932);
                                let v934 = constructor_madd(ctx, I64, v929, v933, v933);
                                let v935 = C::u8_into_imm12(ctx, 0x3F);
                                let v936 = &constructor_cmp64_imm(ctx, v930, v935);
                                let v937 = C::zero_reg(ctx);
                                let v938 = &constructor_csel(ctx, &Cond::Eq, v934, v937);
                                let v939 = constructor_with_flags_reg(ctx, v936, v938);
                                let v940 = constructor_add(ctx, I64, v939, v930);
                                let v941 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v942 = C::value_regs(ctx, v940, v941);
                                let v943 = C::output(ctx, v942);
                                // Rule at src/isa/aarch64/lower.isle line 1544.
                                return Some(v943);
                            }
                            _ => {}
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v944 = constructor_a64_cls(ctx, v3, v163);
                        let v945 = constructor_output_reg(ctx, v944);
                        // Rule at src/isa/aarch64/lower.isle line 1558.
                        return Some(v945);
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v884 = constructor_rbit(ctx, I32, v163);
                                let v911 = C::u64_into_imm_logic(ctx, I32, 0x800000);
                                let v912 = constructor_orr_imm(ctx, I32, v884, v911);
                                let v913 = constructor_a64_clz(ctx, I32, v912);
                                let v914 = constructor_output_reg(ctx, v913);
                                // Rule at src/isa/aarch64/lower.isle line 1512.
                                return Some(v914);
                            }
                            I16 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v884 = constructor_rbit(ctx, I32, v163);
                                let v916 = C::u64_into_imm_logic(ctx, I32, 0x8000);
                                let v917 = constructor_orr_imm(ctx, I32, v884, v916);
                                let v918 = constructor_a64_clz(ctx, I32, v917);
                                let v919 = constructor_output_reg(ctx, v918);
                                // Rule at src/isa/aarch64/lower.isle line 1515.
                                return Some(v919);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v156 = C::value_regs_get(ctx, v155, 0x0);
                                let v893 = constructor_rbit(ctx, I64, v156);
                                let v158 = C::value_regs_get(ctx, v155, 0x1);
                                let v894 = constructor_rbit(ctx, I64, v158);
                                let v895 = C::value_regs(ctx, v894, v893);
                                let v920 = constructor_lower_clz128(ctx, v895);
                                let v921 = C::output(ctx, v920);
                                // Rule at src/isa/aarch64/lower.isle line 1518.
                                return Some(v921);
                            }
                            _ => {}
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v897 = constructor_rbit(ctx, v3, v163);
                        let v922 = constructor_a64_clz(ctx, v3, v897);
                        let v923 = constructor_output_reg(ctx, v922);
                        // Rule at src/isa/aarch64/lower.isle line 1524.
                        return Some(v923);
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v947 = constructor_a64_rev16(ctx, I16, v163);
                                let v948 = constructor_output_reg(ctx, v947);
                                // Rule at src/isa/aarch64/lower.isle line 1563.
                                return Some(v948);
                            }
                            I32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v949 = constructor_a64_rev32(ctx, I32, v163);
                                let v950 = constructor_output_reg(ctx, v949);
                                // Rule at src/isa/aarch64/lower.isle line 1566.
                                return Some(v950);
                            }
                            I64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v951 = constructor_a64_rev64(ctx, I64, v163);
                                let v952 = constructor_output_reg(ctx, v951);
                                // Rule at src/isa/aarch64/lower.isle line 1569.
                                return Some(v952);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v953 = C::value_regs_get(ctx, v155, 0x1);
                                let v954 = constructor_a64_rev64(ctx, I64, v953);
                                let v955 = C::put_in_regs(ctx, v153);
                                let v956 = C::value_regs_get(ctx, v955, 0x0);
                                let v957 = constructor_a64_rev64(ctx, I64, v956);
                                let v958 = C::value_regs(ctx, v954, v957);
                                let v959 = C::output(ctx, v958);
                                // Rule at src/isa/aarch64/lower.isle line 1572.
                                return Some(v959);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v962 = constructor_mov_to_fpu(ctx, v163, &ScalarSize::Size32);
                                let v964 = constructor_vec_cnt(ctx, v962, &VectorSize::Size8x8);
                                let v966 =
                                    constructor_mov_from_vec(ctx, v964, 0x0, &ScalarSize::Size8);
                                let v967 = constructor_output_reg(ctx, v966);
                                // Rule at src/isa/aarch64/lower.isle line 1602.
                                return Some(v967);
                            }
                            I16 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v962 = constructor_mov_to_fpu(ctx, v163, &ScalarSize::Size32);
                                let v964 = constructor_vec_cnt(ctx, v962, &VectorSize::Size8x8);
                                let v968 = constructor_addp(ctx, v964, v964, &VectorSize::Size8x8);
                                let v969 =
                                    constructor_mov_from_vec(ctx, v968, 0x0, &ScalarSize::Size8);
                                let v970 = constructor_output_reg(ctx, v969);
                                // Rule at src/isa/aarch64/lower.isle line 1608.
                                return Some(v970);
                            }
                            I32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v962 = constructor_mov_to_fpu(ctx, v163, &ScalarSize::Size32);
                                let v964 = constructor_vec_cnt(ctx, v962, &VectorSize::Size8x8);
                                let v971 = constructor_addv(ctx, v964, &VectorSize::Size8x8);
                                let v972 =
                                    constructor_mov_from_vec(ctx, v971, 0x0, &ScalarSize::Size8);
                                let v973 = constructor_output_reg(ctx, v972);
                                // Rule at src/isa/aarch64/lower.isle line 1614.
                                return Some(v973);
                            }
                            I64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v170 = constructor_mov_to_fpu(ctx, v163, &ScalarSize::Size64);
                                let v974 = constructor_vec_cnt(ctx, v170, &VectorSize::Size8x8);
                                let v975 = constructor_addv(ctx, v974, &VectorSize::Size8x8);
                                let v976 =
                                    constructor_mov_from_vec(ctx, v975, 0x0, &ScalarSize::Size8);
                                let v977 = constructor_output_reg(ctx, v976);
                                // Rule at src/isa/aarch64/lower.isle line 1620.
                                return Some(v977);
                            }
                            I128 => {
                                let v155 = C::put_in_regs(ctx, v153);
                                let v156 = C::value_regs_get(ctx, v155, 0x0);
                                let v978 = constructor_mov_to_fpu(ctx, v156, &ScalarSize::Size64);
                                let v158 = C::value_regs_get(ctx, v155, 0x1);
                                let v979 = constructor_mov_to_vec(
                                    ctx,
                                    v978,
                                    v158,
                                    0x1,
                                    &VectorSize::Size64x2,
                                );
                                let v981 = constructor_vec_cnt(ctx, v979, &VectorSize::Size8x16);
                                let v982 = constructor_addv(ctx, v981, &VectorSize::Size8x16);
                                let v983 =
                                    constructor_mov_from_vec(ctx, v982, 0x0, &ScalarSize::Size8);
                                let v984 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v985 = C::value_regs(ctx, v983, v984);
                                let v986 = C::output(ctx, v985);
                                // Rule at src/isa/aarch64/lower.isle line 1626.
                                return Some(v986);
                            }
                            I8X16 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v987 = constructor_vec_cnt(ctx, v163, &VectorSize::Size8x16);
                                let v988 = constructor_output_reg(ctx, v987);
                                // Rule at src/isa/aarch64/lower.isle line 1634.
                                return Some(v988);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v329 = &constructor_scalar_size(ctx, v273);
                            let v330 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v163, v329);
                            let v331 = constructor_output_reg(ctx, v330);
                            // Rule at src/isa/aarch64/lower.isle line 325.
                            return Some(v331);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v326 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v163, v236);
                            let v327 = constructor_output_reg(ctx, v326);
                            // Rule at src/isa/aarch64/lower.isle line 322.
                            return Some(v327);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v329 = &constructor_scalar_size(ctx, v273);
                            let v336 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v163, v329);
                            let v337 = constructor_output_reg(ctx, v336);
                            // Rule at src/isa/aarch64/lower.isle line 333.
                            return Some(v337);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v333 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v163, v236);
                            let v334 = constructor_output_reg(ctx, v333);
                            // Rule at src/isa/aarch64/lower.isle line 330.
                            return Some(v334);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v272 = C::ty_scalar_float(ctx, v3);
                        if let Some(v273) = v272 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v329 = &constructor_scalar_size(ctx, v273);
                            let v342 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v163, v329);
                            let v343 = constructor_output_reg(ctx, v342);
                            // Rule at src/isa/aarch64/lower.isle line 341.
                            return Some(v343);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v339 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v163, v236);
                            let v340 = constructor_output_reg(ctx, v339);
                            // Rule at src/isa/aarch64/lower.isle line 338.
                            return Some(v340);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v354 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v163);
                                let v355 = constructor_output_reg(ctx, v354);
                                // Rule at src/isa/aarch64/lower.isle line 359.
                                return Some(v355);
                            }
                            F64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v357 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v163);
                                let v358 = constructor_output_reg(ctx, v357);
                                // Rule at src/isa/aarch64/lower.isle line 362.
                                return Some(v358);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v351 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v163, v236);
                            let v352 = constructor_output_reg(ctx, v351);
                            // Rule at src/isa/aarch64/lower.isle line 356.
                            return Some(v352);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v363 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v163);
                                let v364 = constructor_output_reg(ctx, v363);
                                // Rule at src/isa/aarch64/lower.isle line 370.
                                return Some(v364);
                            }
                            F64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v366 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v163);
                                let v367 = constructor_output_reg(ctx, v366);
                                // Rule at src/isa/aarch64/lower.isle line 373.
                                return Some(v367);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v360 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v163, v236);
                            let v361 = constructor_output_reg(ctx, v360);
                            // Rule at src/isa/aarch64/lower.isle line 367.
                            return Some(v361);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v372 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v163);
                                let v373 = constructor_output_reg(ctx, v372);
                                // Rule at src/isa/aarch64/lower.isle line 381.
                                return Some(v373);
                            }
                            F64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v375 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v163);
                                let v376 = constructor_output_reg(ctx, v375);
                                // Rule at src/isa/aarch64/lower.isle line 384.
                                return Some(v376);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v369 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v163, v236);
                            let v370 = constructor_output_reg(ctx, v369);
                            // Rule at src/isa/aarch64/lower.isle line 378.
                            return Some(v370);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v381 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v163);
                                let v382 = constructor_output_reg(ctx, v381);
                                // Rule at src/isa/aarch64/lower.isle line 392.
                                return Some(v382);
                            }
                            F64 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v384 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v163);
                                let v385 = constructor_output_reg(ctx, v384);
                                // Rule at src/isa/aarch64/lower.isle line 395.
                                return Some(v385);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v236 = &constructor_vector_size(ctx, v3);
                            let v378 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v163, v236);
                            let v379 = constructor_output_reg(ctx, v378);
                            // Rule at src/isa/aarch64/lower.isle line 389.
                            return Some(v379);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v154 = C::value_type(ctx, v153);
                    let v1370 = &constructor_operand_size(ctx, v154);
                    let v512 = C::put_in_reg(ctx, v153);
                    let v1371 = C::u8_into_imm12(ctx, 0x0);
                    let v1372 = &constructor_cmp_imm(ctx, v1370, v512, v1371);
                    let v186 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1373 = constructor_with_flags(ctx, v1372, v186);
                    let v1374 = C::output(ctx, v1373);
                    // Rule at src/isa/aarch64/lower.isle line 2048.
                    return Some(v1374);
                }
                &Opcode::IsInvalid => {
                    let v154 = C::value_type(ctx, v153);
                    let v1370 = &constructor_operand_size(ctx, v154);
                    let v512 = C::put_in_reg(ctx, v153);
                    let v1375 = C::u8_into_imm12(ctx, 0x1);
                    let v1376 = &constructor_cmn_imm(ctx, v1370, v512, v1375);
                    let v186 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1377 = constructor_with_flags(ctx, v1376, v186);
                    let v1378 = C::output(ctx, v1377);
                    // Rule at src/isa/aarch64/lower.isle line 2054.
                    return Some(v1378);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v165 = constructor_fpu_extend(ctx, v163, &ScalarSize::Size32);
                                let v166 = constructor_output_reg(ctx, v165);
                                // Rule at src/isa/aarch64/lower.isle line 146.
                                return Some(v166);
                            }
                            F64X2 => {
                                let v163 = C::put_in_reg(ctx, v153);
                                let v168 = constructor_fpu_extend(ctx, v163, &ScalarSize::Size64);
                                let v169 = constructor_output_reg(ctx, v168);
                                // Rule at src/isa/aarch64/lower.isle line 149.
                                return Some(v169);
                            }
                            _ => {}
                        }
                    }
                    let v154 = C::value_type(ctx, v153);
                    if v154 == I64 {
                        let v163 = C::put_in_reg(ctx, v153);
                        let v170 = constructor_mov_to_fpu(ctx, v163, &ScalarSize::Size64);
                        let v171 = constructor_output_reg(ctx, v170);
                        // Rule at src/isa/aarch64/lower.isle line 152.
                        return Some(v171);
                    }
                    let v172 = C::int_fits_in_32(ctx, v154);
                    if let Some(v173) = v172 {
                        let v174 = constructor_put_in_reg_zext32(ctx, v153);
                        let v175 = constructor_mov_to_fpu(ctx, v174, &ScalarSize::Size32);
                        let v176 = constructor_output_reg(ctx, v175);
                        // Rule at src/isa/aarch64/lower.isle line 155.
                        return Some(v176);
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v155 = C::put_in_regs(ctx, v153);
                        let v3 = C::value_type(ctx, v2);
                        let v154 = C::value_type(ctx, v153);
                        let v960 = constructor_lower_bmask(ctx, v3, v154, v155);
                        let v961 = C::output(ctx, v960);
                        // Rule at src/isa/aarch64/lower.isle line 1580.
                        return Some(v961);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v989 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v990) = v989 {
                            let v155 = C::put_in_regs(ctx, v153);
                            let v156 = C::value_regs_get(ctx, v155, 0x0);
                            let v1002 = constructor_output_reg(ctx, v156);
                            // Rule at src/isa/aarch64/lower.isle line 1658.
                            return Some(v1002);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v163 = C::put_in_reg(ctx, v153);
                        let v3 = C::value_type(ctx, v2);
                        let v1344 = &constructor_lane_size(ctx, v3);
                        let v1345 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v163, false, v1344);
                        let v1346 = constructor_output_reg(ctx, v1345);
                        // Rule at src/isa/aarch64/lower.isle line 2001.
                        return Some(v1346);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1347 = &constructor_lane_size(ctx, v501);
                            let v1348 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v163, true, v1347);
                            let v1349 = constructor_output_reg(ctx, v1348);
                            // Rule at src/isa/aarch64/lower.isle line 2006.
                            return Some(v1349);
                        }
                        let v1157 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1351 = constructor_fpu_move_from_vec(
                                ctx,
                                v163,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1352 = &constructor_lane_size(ctx, v3);
                            let v1353 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v1351,
                                false,
                                v1352,
                            );
                            let v1354 = constructor_output_reg(ctx, v1353);
                            // Rule at src/isa/aarch64/lower.isle line 2009.
                            return Some(v1354);
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v1344 = &constructor_lane_size(ctx, v3);
                        let v1742 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v163, true, v1344);
                        let v1743 = constructor_output_reg(ctx, v1742);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 104.
                        return Some(v1743);
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v163 = C::put_in_reg(ctx, v153);
                        let v3 = C::value_type(ctx, v2);
                        let v1344 = &constructor_lane_size(ctx, v3);
                        let v1356 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v163, false, v1344);
                        let v1357 = constructor_output_reg(ctx, v1356);
                        // Rule at src/isa/aarch64/lower.isle line 2016.
                        return Some(v1357);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v500 = C::ty_vec128(ctx, v3);
                        if let Some(v501) = v500 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1347 = &constructor_lane_size(ctx, v501);
                            let v1358 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v163, true, v1347);
                            let v1359 = constructor_output_reg(ctx, v1358);
                            // Rule at src/isa/aarch64/lower.isle line 2021.
                            return Some(v1359);
                        }
                        let v1157 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1351 = constructor_fpu_move_from_vec(
                                ctx,
                                v163,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1352 = &constructor_lane_size(ctx, v3);
                            let v1360 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Uxtl,
                                v1351,
                                false,
                                v1352,
                            );
                            let v1361 = constructor_output_reg(ctx, v1360);
                            // Rule at src/isa/aarch64/lower.isle line 2024.
                            return Some(v1361);
                        }
                        let v163 = C::put_in_reg(ctx, v153);
                        let v1344 = &constructor_lane_size(ctx, v3);
                        let v1744 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v163, true, v1344);
                        let v1745 = constructor_output_reg(ctx, v1744);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 109.
                        return Some(v1745);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v653 = C::def_inst(ctx, v153);
                        if let Some(v654) = v653 {
                            let v655 = &C::inst_data(ctx, v654);
                            match v655 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v656,
                                    arg: v657,
                                    imm: v658,
                                } => {
                                    if let &Opcode::Extractlane = v656 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v661 = C::put_in_reg(ctx, v657);
                                            let v659 = C::value_type(ctx, v657);
                                            let v662 = &constructor_lane_size(ctx, v659);
                                            let v660 = C::u8_from_uimm8(ctx, v658);
                                            let v663 =
                                                constructor_mov_from_vec(ctx, v661, v660, v662);
                                            let v664 = constructor_output_reg(ctx, v663);
                                            // Rule at src/isa/aarch64/lower.isle line 953.
                                            return Some(v664);
                                        }
                                        if v3 == I128 {
                                            let v661 = C::put_in_reg(ctx, v657);
                                            let v659 = C::value_type(ctx, v657);
                                            let v662 = &constructor_lane_size(ctx, v659);
                                            let v660 = C::u8_from_uimm8(ctx, v658);
                                            let v663 =
                                                constructor_mov_from_vec(ctx, v661, v660, v662);
                                            let v677 =
                                                constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                            let v678 = C::value_regs(ctx, v663, v677);
                                            let v679 = C::output(ctx, v678);
                                            // Rule at src/isa/aarch64/lower.isle line 972.
                                            return Some(v679);
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v665,
                                    arg: v666,
                                    flags: v667,
                                } => {
                                    if let &Opcode::AtomicLoad = v665 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v668 = C::is_sinkable_inst(ctx, v153);
                                            if let Some(v669) = v668 {
                                                let v670 = constructor_sink_atomic_load(ctx, v669);
                                                let v154 = C::value_type(ctx, v153);
                                                let v671 =
                                                    constructor_load_acquire(ctx, v154, v667, v670);
                                                let v672 = constructor_output_reg(ctx, v671);
                                                // Rule at src/isa/aarch64/lower.isle line 960.
                                                return Some(v672);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v673 = constructor_put_in_reg_zext64(ctx, v153);
                            let v674 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                            let v675 = C::value_regs(ctx, v673, v674);
                            let v676 = C::output(ctx, v675);
                            // Rule at src/isa/aarch64/lower.isle line 967.
                            return Some(v676);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v154 = C::value_type(ctx, v153);
                            let v649 = C::ty_bits(ctx, v154);
                            let v650 = C::ty_bits(ctx, v28);
                            let v651 = constructor_extend(ctx, v163, false, v649, v650);
                            let v652 = constructor_output_reg(ctx, v651);
                            // Rule at src/isa/aarch64/lower.isle line 948.
                            return Some(v652);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v653 = C::def_inst(ctx, v153);
                            if let Some(v654) = v653 {
                                let v655 = &C::inst_data(ctx, v654);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v656,
                                    arg: v657,
                                    imm: v658,
                                } = v655
                                {
                                    if let &Opcode::Extractlane = v656 {
                                        let v659 = C::value_type(ctx, v657);
                                        let v692 = C::not_i64x2(ctx, v659);
                                        if let Some(v693) = v692 {
                                            let v661 = C::put_in_reg(ctx, v657);
                                            let v682 = &constructor_vector_size(ctx, v659);
                                            let v694 = &constructor_size_from_ty(ctx, I64);
                                            let v660 = C::u8_from_uimm8(ctx, v658);
                                            let v695 = constructor_mov_from_vec_signed(
                                                ctx, v661, v660, v682, v694,
                                            );
                                            let v696 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v697 = constructor_asr_imm(ctx, I64, v695, v696);
                                            let v698 = C::value_regs(ctx, v695, v697);
                                            let v699 = C::output(ctx, v698);
                                            // Rule at src/isa/aarch64/lower.isle line 1005.
                                            return Some(v699);
                                        }
                                        if v659 == I64X2 {
                                            let v661 = C::put_in_reg(ctx, v657);
                                            let v660 = C::u8_from_uimm8(ctx, v658);
                                            let v700 = constructor_mov_from_vec(
                                                ctx,
                                                v661,
                                                v660,
                                                &ScalarSize::Size64,
                                            );
                                            let v701 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v702 = constructor_asr_imm(ctx, I64, v700, v701);
                                            let v703 = C::value_regs(ctx, v700, v702);
                                            let v704 = C::output(ctx, v703);
                                            // Rule at src/isa/aarch64/lower.isle line 1016.
                                            return Some(v704);
                                        }
                                    }
                                }
                            }
                            let v686 = constructor_put_in_reg_sext64(ctx, v153);
                            let v688 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v689 = constructor_asr_imm(ctx, I64, v686, v688);
                            let v690 = C::value_regs(ctx, v686, v689);
                            let v691 = C::output(ctx, v690);
                            // Rule at src/isa/aarch64/lower.isle line 995.
                            return Some(v691);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v653 = C::def_inst(ctx, v153);
                            if let Some(v654) = v653 {
                                let v655 = &C::inst_data(ctx, v654);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v656,
                                    arg: v657,
                                    imm: v658,
                                } = v655
                                {
                                    if let &Opcode::Extractlane = v656 {
                                        let v661 = C::put_in_reg(ctx, v657);
                                        let v659 = C::value_type(ctx, v657);
                                        let v682 = &constructor_vector_size(ctx, v659);
                                        let v683 = &constructor_size_from_ty(ctx, v28);
                                        let v660 = C::u8_from_uimm8(ctx, v658);
                                        let v684 = constructor_mov_from_vec_signed(
                                            ctx, v661, v660, v682, v683,
                                        );
                                        let v685 = constructor_output_reg(ctx, v684);
                                        // Rule at src/isa/aarch64/lower.isle line 986.
                                        return Some(v685);
                                    }
                                }
                            }
                            let v163 = C::put_in_reg(ctx, v153);
                            let v154 = C::value_type(ctx, v153);
                            let v649 = C::ty_bits(ctx, v154);
                            let v650 = C::ty_bits(ctx, v28);
                            let v680 = constructor_extend(ctx, v163, true, v649, v650);
                            let v681 = constructor_output_reg(ctx, v680);
                            // Rule at src/isa/aarch64/lower.isle line 981.
                            return Some(v681);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v345 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v163,
                                &ScalarSize::Size32,
                            );
                            let v346 = constructor_output_reg(ctx, v345);
                            // Rule at src/isa/aarch64/lower.isle line 346.
                            return Some(v346);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v348 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v163,
                                &ScalarSize::Size64,
                            );
                            let v349 = constructor_output_reg(ctx, v348);
                            // Rule at src/isa/aarch64/lower.isle line 351.
                            return Some(v349);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v163 = C::put_in_reg(ctx, v153);
                    let v1312 = constructor_fcvtn(ctx, v163, &ScalarSize::Size32);
                    let v1313 = constructor_output_reg(ctx, v1312);
                    // Rule at src/isa/aarch64/lower.isle line 1950.
                    return Some(v1313);
                }
                &Opcode::FvpromoteLow => {
                    let v163 = C::put_in_reg(ctx, v153);
                    let v1672 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v163, false);
                    let v1673 = constructor_output_reg(ctx, v1672);
                    // Rule at src/isa/aarch64/lower.isle line 2461.
                    return Some(v1673);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v154 = C::value_type(ctx, v153);
                        match v154 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v410 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v163,
                                        false,
                                        F32,
                                        I64,
                                    );
                                    let v411 = constructor_output_reg(ctx, v410);
                                    // Rule at src/isa/aarch64/lower.isle line 416.
                                    return Some(v411);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v407 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v163,
                                        false,
                                        F32,
                                        v242,
                                    );
                                    let v408 = constructor_output_reg(ctx, v407);
                                    // Rule at src/isa/aarch64/lower.isle line 413.
                                    return Some(v408);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v417 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v163,
                                        false,
                                        F64,
                                        I64,
                                    );
                                    let v418 = constructor_output_reg(ctx, v417);
                                    // Rule at src/isa/aarch64/lower.isle line 422.
                                    return Some(v418);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v414 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v163,
                                        false,
                                        F64,
                                        v242,
                                    );
                                    let v415 = constructor_output_reg(ctx, v414);
                                    // Rule at src/isa/aarch64/lower.isle line 419.
                                    return Some(v415);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v154 = C::value_type(ctx, v153);
                        match v154 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v423 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v163,
                                        true,
                                        F32,
                                        I64,
                                    );
                                    let v424 = constructor_output_reg(ctx, v423);
                                    // Rule at src/isa/aarch64/lower.isle line 430.
                                    return Some(v424);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v420 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v163,
                                        true,
                                        F32,
                                        v242,
                                    );
                                    let v421 = constructor_output_reg(ctx, v420);
                                    // Rule at src/isa/aarch64/lower.isle line 427.
                                    return Some(v421);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v429 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v163,
                                        true,
                                        F64,
                                        I64,
                                    );
                                    let v430 = constructor_output_reg(ctx, v429);
                                    // Rule at src/isa/aarch64/lower.isle line 436.
                                    return Some(v430);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v426 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v163,
                                        true,
                                        F64,
                                        v242,
                                    );
                                    let v427 = constructor_output_reg(ctx, v426);
                                    // Rule at src/isa/aarch64/lower.isle line 433.
                                    return Some(v427);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v154 = C::value_type(ctx, v153);
                        match v154 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v468 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v163,
                                        false,
                                        I64,
                                    );
                                    let v469 = constructor_output_reg(ctx, v468);
                                    // Rule at src/isa/aarch64/lower.isle line 490.
                                    return Some(v469);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v466 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v163,
                                        false,
                                        v242,
                                    );
                                    let v467 = constructor_output_reg(ctx, v466);
                                    // Rule at src/isa/aarch64/lower.isle line 487.
                                    return Some(v467);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v472 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v163,
                                        false,
                                        I64,
                                    );
                                    let v473 = constructor_output_reg(ctx, v472);
                                    // Rule at src/isa/aarch64/lower.isle line 496.
                                    return Some(v473);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v470 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v163,
                                        false,
                                        v242,
                                    );
                                    let v471 = constructor_output_reg(ctx, v470);
                                    // Rule at src/isa/aarch64/lower.isle line 493.
                                    return Some(v471);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x20 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v464 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v163,
                                                v236,
                                            );
                                            let v465 = constructor_output_reg(ctx, v464);
                                            // Rule at src/isa/aarch64/lower.isle line 481.
                                            return Some(v465);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x40 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v464 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v163,
                                                v236,
                                            );
                                            let v465 = constructor_output_reg(ctx, v464);
                                            // Rule at src/isa/aarch64/lower.isle line 484.
                                            return Some(v465);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v154 = C::value_type(ctx, v153);
                        match v154 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v479 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v163,
                                        true,
                                        I64,
                                    );
                                    let v480 = constructor_output_reg(ctx, v479);
                                    // Rule at src/isa/aarch64/lower.isle line 510.
                                    return Some(v480);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v477 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v163,
                                        true,
                                        v242,
                                    );
                                    let v478 = constructor_output_reg(ctx, v477);
                                    // Rule at src/isa/aarch64/lower.isle line 507.
                                    return Some(v478);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v483 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v163,
                                        true,
                                        I64,
                                    );
                                    let v484 = constructor_output_reg(ctx, v483);
                                    // Rule at src/isa/aarch64/lower.isle line 516.
                                    return Some(v484);
                                }
                                let v241 = C::fits_in_32(ctx, v3);
                                if let Some(v242) = v241 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v481 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v163,
                                        true,
                                        v242,
                                    );
                                    let v482 = constructor_output_reg(ctx, v481);
                                    // Rule at src/isa/aarch64/lower.isle line 513.
                                    return Some(v482);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x20 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v475 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v163,
                                                v236,
                                            );
                                            let v476 = constructor_output_reg(ctx, v475);
                                            // Rule at src/isa/aarch64/lower.isle line 501.
                                            return Some(v476);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x40 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v475 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v163,
                                                v236,
                                            );
                                            let v476 = constructor_output_reg(ctx, v475);
                                            // Rule at src/isa/aarch64/lower.isle line 504.
                                            return Some(v476);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v154 = C::value_type(ctx, v153);
                                if v154 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v443 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v163);
                                    let v444 = constructor_output_reg(ctx, v443);
                                    // Rule at src/isa/aarch64/lower.isle line 453.
                                    return Some(v444);
                                }
                                let v434 = C::fits_in_32(ctx, v154);
                                if let Some(v435) = v434 {
                                    let v174 = constructor_put_in_reg_zext32(ctx, v153);
                                    let v437 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v174);
                                    let v438 = constructor_output_reg(ctx, v437);
                                    // Rule at src/isa/aarch64/lower.isle line 447.
                                    return Some(v438);
                                }
                            }
                            F64 => {
                                let v154 = C::value_type(ctx, v153);
                                if v154 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v446 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v163);
                                    let v447 = constructor_output_reg(ctx, v446);
                                    // Rule at src/isa/aarch64/lower.isle line 456.
                                    return Some(v447);
                                }
                                let v434 = C::fits_in_32(ctx, v154);
                                if let Some(v435) = v434 {
                                    let v174 = constructor_put_in_reg_zext32(ctx, v153);
                                    let v440 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v174);
                                    let v441 = constructor_output_reg(ctx, v440);
                                    // Rule at src/isa/aarch64/lower.isle line 450.
                                    return Some(v441);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v154 = C::value_type(ctx, v153);
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x20 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v432 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v163,
                                                v236,
                                            );
                                            let v433 = constructor_output_reg(ctx, v432);
                                            // Rule at src/isa/aarch64/lower.isle line 441.
                                            return Some(v433);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v154 = C::value_type(ctx, v153);
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x40 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v432 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v163,
                                                v236,
                                            );
                                            let v433 = constructor_output_reg(ctx, v432);
                                            // Rule at src/isa/aarch64/lower.isle line 444.
                                            return Some(v433);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v154 = C::value_type(ctx, v153);
                                if v154 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v458 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v163);
                                    let v459 = constructor_output_reg(ctx, v458);
                                    // Rule at src/isa/aarch64/lower.isle line 473.
                                    return Some(v459);
                                }
                                let v434 = C::fits_in_32(ctx, v154);
                                if let Some(v435) = v434 {
                                    let v243 = constructor_put_in_reg_sext32(ctx, v153);
                                    let v452 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v243);
                                    let v453 = constructor_output_reg(ctx, v452);
                                    // Rule at src/isa/aarch64/lower.isle line 467.
                                    return Some(v453);
                                }
                            }
                            F64 => {
                                let v154 = C::value_type(ctx, v153);
                                if v154 == I64 {
                                    let v163 = C::put_in_reg(ctx, v153);
                                    let v461 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v163);
                                    let v462 = constructor_output_reg(ctx, v461);
                                    // Rule at src/isa/aarch64/lower.isle line 476.
                                    return Some(v462);
                                }
                                let v434 = C::fits_in_32(ctx, v154);
                                if let Some(v435) = v434 {
                                    let v243 = constructor_put_in_reg_sext32(ctx, v153);
                                    let v455 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v243);
                                    let v456 = constructor_output_reg(ctx, v455);
                                    // Rule at src/isa/aarch64/lower.isle line 470.
                                    return Some(v456);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v154 = C::value_type(ctx, v153);
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x20 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v449 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v163,
                                                v236,
                                            );
                                            let v450 = constructor_output_reg(ctx, v449);
                                            // Rule at src/isa/aarch64/lower.isle line 461.
                                            return Some(v450);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v154 = C::value_type(ctx, v153);
                                    let v177 = C::multi_lane(ctx, v154);
                                    if let Some(v178) = v177 {
                                        if v178.0 == 0x40 {
                                            let v163 = C::put_in_reg(ctx, v153);
                                            let v236 = &constructor_vector_size(ctx, v3);
                                            let v449 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v163,
                                                v236,
                                            );
                                            let v450 = constructor_output_reg(ctx, v449);
                                            // Rule at src/isa/aarch64/lower.isle line 464.
                                            return Some(v450);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtLowFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v163 = C::put_in_reg(ctx, v153);
                            let v1668 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v163,
                                false,
                                &ScalarSize::Size64,
                            );
                            let v1669 = constructor_vec_misc(
                                ctx,
                                &VecMisc2::Scvtf,
                                v1668,
                                &VectorSize::Size64x2,
                            );
                            let v1670 = constructor_output_reg(ctx, v1669);
                            // Rule at src/isa/aarch64/lower.isle line 2454.
                            return Some(v1670);
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v154 = C::value_type(ctx, v153);
                    if v154 == I128 {
                        let v155 = C::put_in_regs(ctx, v153);
                        let v156 = C::value_regs_get(ctx, v155, 0x0);
                        let v157 = C::value_reg(ctx, v156);
                        let v158 = C::value_regs_get(ctx, v155, 0x1);
                        let v159 = C::value_reg(ctx, v158);
                        let v160 = C::output_pair(ctx, v157, v159);
                        // Rule at src/isa/aarch64/lower.isle line 132.
                        return Some(v160);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1149,
            constant_handle: v1150,
        } => {
            if let &Opcode::Vconst = v1149 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1155 = C::u64_from_constant(ctx, v1150);
                    if let Some(v1156) = v1155 {
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1158) = v1157 {
                            let v1159 = C::constant_f64(ctx, v1156);
                            let v1160 = constructor_output_reg(ctx, v1159);
                            // Rule at src/isa/aarch64/lower.isle line 1823.
                            return Some(v1160);
                        }
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v500 = C::ty_vec128(ctx, v3);
                    if let Some(v501) = v500 {
                        let v1151 = C::u128_from_constant(ctx, v1150);
                        if let Some(v1152) = v1151 {
                            let v1153 = C::constant_f128(ctx, v1152);
                            let v1154 = constructor_output_reg(ctx, v1153);
                            // Rule at src/isa/aarch64/lower.isle line 1820.
                            return Some(v1154);
                        }
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1391,
            global_value: v1392,
        } => {
            match v1391 {
                &Opcode::SymbolValue => {
                    let v1393 = C::symbol_value_data(ctx, v1392);
                    if let Some(v1394) = v1393 {
                        let v1398 = C::box_external_name(ctx, v1394.0);
                        let v1399 = constructor_load_ext_name(ctx, v1398, v1394.2);
                        let v1400 = constructor_output_reg(ctx, v1399);
                        // Rule at src/isa/aarch64/lower.isle line 2070.
                        return Some(v1400);
                    }
                }
                &Opcode::TlsValue => {
                    let v1393 = C::symbol_value_data(ctx, v1392);
                    if let Some(v1394) = v1393 {
                        let v1664 = C::tls_model_is_elf_gd(ctx);
                        if let Some(v1665) = v1664 {
                            let v1666 = constructor_elf_tls_get_addr(ctx, v1394.0);
                            let v1667 = constructor_output_reg(ctx, v1666);
                            // Rule at src/isa/aarch64/lower.isle line 2448.
                            return Some(v1667);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v15,
            imm: v16,
        } => {
            if let &Opcode::F32const = v15 {
                let v17 = C::u64_from_ieee32(ctx, v16);
                let v18 = C::constant_f32(ctx, v17);
                let v19 = constructor_output_reg(ctx, v18);
                // Rule at src/isa/aarch64/lower.isle line 29.
                return Some(v19);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F64const = v20 {
                let v22 = C::u64_from_ieee64(ctx, v21);
                let v23 = C::constant_f64(ctx, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/aarch64/lower.isle line 34.
                return Some(v24);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    // Rule at src/isa/aarch64/lower.isle line 19.
                    return Some(v10);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v82,
            arg: v83,
            destination: v84,
            table: v85,
        } => {
            if let &Opcode::BrTable = v82 {
                let v86 = C::targets_jt_size(ctx, arg1);
                let v87 = C::targets_jt_space(ctx, arg1);
                let v88 = &constructor_emit_island(ctx, v87);
                let v89 = constructor_side_effect(ctx, v88);
                let v90 = constructor_put_in_reg_zext32(ctx, v83);
                let v91 = C::u32_as_u64(ctx, v86);
                let v92 = constructor_br_table_impl(ctx, v91, v90, arg1);
                // Rule at src/isa/aarch64/lower.isle line 2519.
                return Some(v92);
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v5 = C::maybe_uextend(ctx, v3);
                if let Some(v6) = v5 {
                    let v7 = C::def_inst(ctx, v6);
                    if let Some(v8) = v7 {
                        let v9 = &C::inst_data(ctx, v8);
                        match v9 {
                            &InstructionData::FloatCompare {
                                opcode: ref v33,
                                args: ref v34,
                                cond: ref v35,
                            } => {
                                if let &Opcode::Fcmp = v33 {
                                    let v36 = C::unpack_value_array_2(ctx, v34);
                                    let v39 = C::value_type(ctx, v36.0);
                                    let v40 = C::ty_scalar_float(ctx, v39);
                                    if let Some(v41) = v40 {
                                        let v42 = &C::fp_cond_code(ctx, v35);
                                        let v43 = C::branch_target(ctx, arg1, 0x0);
                                        let v44 = C::branch_target(ctx, arg1, 0x1);
                                        let v45 = &constructor_scalar_size(ctx, v41);
                                        let v46 = C::put_in_reg(ctx, v36.0);
                                        let v47 = C::put_in_reg(ctx, v36.1);
                                        let v48 = &constructor_fpu_cmp(ctx, v45, v46, v47);
                                        let v49 = C::cond_br_cond(ctx, v42);
                                        let v50 = &constructor_cond_br(ctx, v43, v44, v49);
                                        let v51 =
                                            &constructor_with_flags_side_effect(ctx, v48, v50);
                                        let v52 = constructor_emit_side_effect(ctx, v51);
                                        // Rule at src/isa/aarch64/lower.isle line 2479.
                                        return Some(v52);
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v10,
                                args: ref v11,
                                cond: ref v12,
                            } => {
                                if let &Opcode::Icmp = v10 {
                                    let v13 = C::unpack_value_array_2(ctx, v11);
                                    let v16 = C::value_type(ctx, v13.0);
                                    let v21 = &constructor_lower_icmp_into_flags(
                                        ctx, v12, v13.0, v13.1, v16,
                                    );
                                    let v22 = &constructor_flags_and_cc_cc(ctx, v21);
                                    let v23 = &C::cond_code(ctx, v22);
                                    let v25 = C::branch_target(ctx, arg1, 0x0);
                                    let v27 = C::branch_target(ctx, arg1, 0x1);
                                    let v28 = &constructor_flags_and_cc_flags(ctx, v21);
                                    let v29 = C::cond_br_cond(ctx, v23);
                                    let v30 = &constructor_cond_br(ctx, v25, v27, v29);
                                    let v31 = &constructor_with_flags_side_effect(ctx, v28, v30);
                                    let v32 = constructor_emit_side_effect(ctx, v31);
                                    // Rule at src/isa/aarch64/lower.isle line 2467.
                                    return Some(v32);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v53 = C::value_type(ctx, v3);
                if v53 == I128 {
                    let v54 = &constructor_flags_to_producesflags(ctx, v3);
                    let v55 = C::put_in_regs(ctx, v3);
                    let v57 = C::value_regs_get(ctx, v55, 0x0);
                    let v59 = C::value_regs_get(ctx, v55, 0x1);
                    let v61 = constructor_orr(ctx, I64, v57, v59);
                    let v62 = C::branch_target(ctx, arg1, 0x0);
                    let v63 = C::branch_target(ctx, arg1, 0x1);
                    let v64 = C::cond_br_not_zero(ctx, v61);
                    let v65 = &constructor_cond_br(ctx, v62, v63, v64);
                    let v66 = &constructor_with_flags_side_effect(ctx, v54, v65);
                    let v67 = constructor_emit_side_effect(ctx, v66);
                    // Rule at src/isa/aarch64/lower.isle line 2489.
                    return Some(v67);
                }
                let v68 = C::ty_int_ref_scalar_64(ctx, v53);
                if let Some(v69) = v68 {
                    let v54 = &constructor_flags_to_producesflags(ctx, v3);
                    let v70 = constructor_put_in_reg_zext64(ctx, v3);
                    let v71 = C::branch_target(ctx, arg1, 0x0);
                    let v72 = C::branch_target(ctx, arg1, 0x1);
                    let v73 = C::cond_br_not_zero(ctx, v70);
                    let v74 = &constructor_cond_br(ctx, v71, v72, v73);
                    let v75 = &constructor_with_flags_side_effect(ctx, v54, v74);
                    let v76 = constructor_emit_side_effect(ctx, v75);
                    // Rule at src/isa/aarch64/lower.isle line 2500.
                    return Some(v76);
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v77,
            destination: v78,
        } => {
            if let &Opcode::Jump = v77 {
                let v79 = C::branch_target(ctx, arg1, 0x0);
                let v80 = &constructor_aarch64_jump(ctx, v79);
                let v81 = constructor_emit_side_effect(ctx, v80);
                // Rule at src/isa/aarch64/lower.isle line 2512.
                return Some(v81);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src/isa/aarch64/lower.isle line 810.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 805.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src/isa/aarch64/lower.isle line 856.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 851.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src/isa/aarch64/lower.isle line 903.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/lower.isle line 895.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/aarch64/lower.isle line 894"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1151.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src/isa/aarch64/lower.isle line 1209.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1200.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1201.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src/isa/aarch64/lower.isle line 1191.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src/isa/aarch64/lower.isle line 1180"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1244.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3F);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src/isa/aarch64/lower.isle line 1295.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src/isa/aarch64/lower.isle line 1414.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src/isa/aarch64/lower.isle line 1435.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src/isa/aarch64/lower.isle line 1500.
    return v15;
}
