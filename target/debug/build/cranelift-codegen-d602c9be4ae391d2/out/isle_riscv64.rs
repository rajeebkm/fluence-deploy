// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/riscv64/inst.isle
// - src/isa/riscv64/lower.isle
// - /Users/rajeeb/Work/personal/fluence-fil-bangalore/target/debug/build/cranelift-codegen-d602c9be4ae391d2/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn zero_reg(&mut self) -> Reg;
    fn imm(&mut self, arg0: Type, arg1: u64) -> Reg;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn gen_default_frm(&mut self) -> OptionFloatRoundingMode;
    fn pack_float_rounding_mode(&mut self, arg0: &FRM) -> OptionFloatRoundingMode;
    fn neg_imm12(&mut self, arg0: Imm12) -> Imm12;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn gen_select_reg(&mut self, arg0: &IntCC, arg1: Reg, arg2: Reg, arg3: Reg, arg4: Reg) -> Reg;
    fn load_u64_constant(&mut self, arg0: u64) -> Reg;
    fn ext_sign_bit(&mut self, arg0: Type, arg1: Reg) -> Reg;
    fn has_b(&mut self) -> bool;
    fn gen_shamt(&mut self, arg0: Type, arg1: Reg) -> ValueRegs;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_and(&mut self, arg0: Imm12, arg1: i32) -> Imm12;
    fn gen_amode(&mut self, arg0: Reg, arg1: Offset32, arg2: Type) -> AMode;
    fn offset32_imm(&mut self, arg0: i32) -> Offset32;
    fn default_memflags(&mut self) -> MemFlags;
    fn offset32_add(&mut self, arg0: Offset32, arg1: i64) -> Offset32;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn move_f_to_x(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn move_x_to_f(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn gen_move2(&mut self, arg0: Reg, arg1: Type, arg2: Type) -> Reg;
    fn gen_moves(&mut self, arg0: ValueRegs, arg1: Type, arg2: Type) -> ValueRegs;
    fn vec_writable_clone(&mut self, arg0: &VecWritableReg) -> VecWritableReg;
    fn vec_writable_to_regs(&mut self, arg0: &VecWritableReg) -> ValueRegs;
    fn alloc_vec_writable(&mut self, arg0: Type) -> VecWritableReg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_convert_2_float_op(&mut self, arg0: Type, arg1: bool, arg2: Type) -> FpuOPRR;
    fn inst_output_get(&mut self, arg0: InstOutput, arg1: u8) -> ValueRegs;
    fn label_to_br_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn vec_label_get(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn lower_br_icmp(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: ValueRegs,
        arg3: &VecMachLabel,
        arg4: Type,
    ) -> Unit;
    fn int_zero_reg(&mut self, arg0: Type) -> ValueRegs;
    fn lower_cond_br(
        &mut self,
        arg0: &IntCC,
        arg1: ValueRegs,
        arg2: &VecMachLabel,
        arg3: Type,
    ) -> Unit;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &VecMachLabel) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn has_zbkb(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn shift_int_to_most_significant(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: Reg, arg2: Reg) -> IntegerCompare;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/riscv64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadConst32 {
        rd: WritableReg,
        imm: u32,
    },
    LoadConst64 {
        rd: WritableReg,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: OptionFloatRoundingMode,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    AjustSp {
        amount: i64,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    TrapIf {
        test: Reg,
        trap_code: TrapCode,
    },
    TrapIfC {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    VirtualSPOffsetAdj {
        amount: i64,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    FenceI,
    ECall,
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: VecWritableReg,
        ty: Type,
        condition: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    ReferenceCheck {
        rd: WritableReg,
        op: ReferenceCheckOP,
        x: Reg,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        targets: VecBranchTarget,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    IntSelect {
        op: IntSelectOP,
        dst: VecWritableReg,
        x: ValueRegs,
        y: ValueRegs,
        ty: Type,
    },
    Csr {
        csr_op: CsrOP,
        rd: WritableReg,
        rs: OptionReg,
        imm: OptionUimm5,
        csr: CsrAddress,
    },
    Icmp {
        cc: IntCC,
        rd: WritableReg,
        a: ValueRegs,
        b: ValueRegs,
        ty: Type,
    },
    SelectReg {
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        condition: IntegerCompare,
    },
    FcvtToInt {
        is_sat: bool,
        rd: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        is_signed: bool,
        in_type: Type,
        out_type: Type,
    },
    SelectIf {
        if_spectre_guard: bool,
        rd: VecWritableReg,
        test: Reg,
        x: ValueRegs,
        y: ValueRegs,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    FloatRound {
        op: FloatRoundOP,
        rd: WritableReg,
        int_tmp: WritableReg,
        f_tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    FloatSelect {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    FloatSelectPseudo {
        op: FloatSelectOP,
        rd: WritableReg,
        tmp: WritableReg,
        rs1: Reg,
        rs2: Reg,
        ty: Type,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Rev8 {
        rs: Reg,
        step: WritableReg,
        tmp: WritableReg,
        rd: WritableReg,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
}

/// Internal type FloatSelectOP: defined at src/isa/riscv64/inst.isle line 344.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatSelectOP {
    Max,
    Min,
}

/// Internal type FloatRoundOP: defined at src/isa/riscv64/inst.isle line 349.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FloatRoundOP {
    Nearest,
    Ceil,
    Floor,
    Trunc,
}

/// Internal type CsrOP: defined at src/isa/riscv64/inst.isle line 356.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrOP {
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
}

/// Internal type IntSelectOP: defined at src/isa/riscv64/inst.isle line 365.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntSelectOP {
    Smax,
    Umax,
    Smin,
    Umin,
}

/// Internal type ReferenceCheckOP: defined at src/isa/riscv64/inst.isle line 372.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ReferenceCheckOP {
    IsNull,
    IsInvalid,
}

/// Internal type AtomicOP: defined at src/isa/riscv64/inst.isle line 377.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src/isa/riscv64/inst.isle line 402.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src/isa/riscv64/inst.isle line 415.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src/isa/riscv64/inst.isle line 438.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
}

/// Internal type LoadOP: defined at src/isa/riscv64/inst.isle line 478.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src/isa/riscv64/inst.isle line 490.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src/isa/riscv64/inst.isle line 499.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Andn,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Max,
    Maxu,
    Min,
    Minu,
    Orn,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Xnor,
}

/// Internal type FpuOPRRR: defined at src/isa/riscv64/inst.isle line 569.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
}

/// Internal type AluOPRRI: defined at src/isa/riscv64/inst.isle line 602.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
    Rori,
    Roriw,
    SlliUw,
    Clz,
    Clzw,
    Cpop,
    Cpopw,
    Ctz,
    Ctzw,
    Rev8,
    Sextb,
    Sexth,
    Zexth,
    Orcb,
    Brev8,
}

/// Internal type FRM: defined at src/isa/riscv64/inst.isle line 638.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src/isa/riscv64/inst.isle line 654.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type FenceFm: defined at src/isa/riscv64/inst.isle line 673.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FenceFm {
    None,
    Tso,
}

/// Internal type CmpResult: defined at src/isa/riscv64/inst.isle line 2205.
#[derive(Clone, Debug)]
pub enum CmpResult {
    Result { result: Reg, invert: bool },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = C::imm(ctx, I64, 0x0);
    let v3 = C::imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 702.
    return v4;
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FloatRoundOP,
    arg1: Reg,
    arg2: Type,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg2);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, F64);
    let v8 = MInst::FloatRound {
        op: arg0.clone(),
        rd: v3,
        int_tmp: v5,
        f_tmp: v7,
        rs: arg1,
        ty: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 707.
    return v10;
}

// Generated as internal constructor for term gen_float_select_pseudo.
pub fn constructor_gen_float_select_pseudo<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::FloatSelectPseudo {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 717.
    return v9;
}

// Generated as internal constructor for term gen_float_select.
pub fn constructor_gen_float_select<C: Context>(
    ctx: &mut C,
    arg0: &FloatSelectOP,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg3);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::FloatSelect {
        op: arg0.clone(),
        rd: v4,
        tmp: v6,
        rs1: arg1,
        rs2: arg2,
        ty: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 726.
    return v9;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: &FpuOPRR, arg1: Type, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg1);
    let v4 = C::gen_default_frm(ctx);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: v4,
        rd: v3,
        rs: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 755.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 762.
    return v7;
}

// Generated as internal constructor for term alu_add.
pub fn constructor_alu_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Add, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 770.
    return v3;
}

// Generated as internal constructor for term alu_and.
pub fn constructor_alu_and<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::And, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 775.
    return v3;
}

// Generated as internal constructor for term alu_sub.
pub fn constructor_alu_sub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 782.
    return v3;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = C::gen_default_frm(ctx);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: v5,
        rd: v4,
        rs1: arg2,
        rs2: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 790.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = C::gen_default_frm(ctx);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: v6,
        rd: v5,
        rs1: arg2,
        rs2: arg3,
        rs3: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 798.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 806.
    return v7;
}

// Generated as internal constructor for term alu_andi.
pub fn constructor_alu_andi<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    let v3 = C::imm12_const(ctx, arg1);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 812.
    return v4;
}

// Generated as internal constructor for term alu_slli.
pub fn constructor_alu_slli<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    let v3 = C::imm12_const(ctx, arg1);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 817.
    return v4;
}

// Generated as internal constructor for term alu_srli.
pub fn constructor_alu_srli<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    let v3 = C::imm12_const(ctx, arg1);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 820.
    return v4;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 826.
    return v7;
}

// Generated as internal constructor for term ext_int_if_need.
pub fn constructor_ext_int_if_need<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: ValueRegs,
    arg2: Type,
) -> ValueRegs {
    match arg2 {
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 840.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 843.
            return arg1;
        }
        _ => {}
    }
    let v3 = constructor_convert_valueregs_reg(ctx, arg1);
    let v4 = C::ty_bits(ctx, arg2);
    let v6 = constructor_gen_extend(ctx, v3, arg0, v4, 0x40);
    let v7 = C::value_reg(ctx, v6);
    // Rule at src/isa/riscv64/inst.isle line 834.
    return v7;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/riscv64/inst.isle line 859.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/riscv64/inst.isle line 860.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src/isa/riscv64/inst.isle line 858"
    )
}

// Generated as internal constructor for term bnot_128.
pub fn constructor_bnot_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v3 = constructor_gen_bit_not(ctx, v2);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = constructor_gen_bit_not(ctx, v5);
    let v7 = C::value_regs(ctx, v3, v6);
    // Rule at src/isa/riscv64/inst.isle line 865.
    return v7;
}

// Generated as internal constructor for term lower_bit_reverse.
pub fn constructor_lower_bit_reverse<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    match arg1 {
        I8 => {
            let v3 = constructor_gen_brev8(ctx, arg0, I8);
            // Rule at src/isa/riscv64/inst.isle line 876.
            return v3;
        }
        I16 => {
            let v5 = constructor_gen_brev8(ctx, arg0, I16);
            let v6 = constructor_gen_rev8(ctx, v5);
            let v9 = C::imm12_const(ctx, 0x30);
            let v10 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v6, v9);
            // Rule at src/isa/riscv64/inst.isle line 880.
            return v10;
        }
        I32 => {
            let v12 = constructor_gen_brev8(ctx, arg0, I32);
            let v13 = constructor_gen_rev8(ctx, v12);
            let v15 = C::imm12_const(ctx, 0x20);
            let v16 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v13, v15);
            // Rule at src/isa/riscv64/inst.isle line 888.
            return v16;
        }
        I64 => {
            let v17 = constructor_gen_rev8(ctx, arg0);
            let v19 = constructor_gen_brev8(ctx, v17, I64);
            // Rule at src/isa/riscv64/inst.isle line 896.
            return v19;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bit_reverse", "src/isa/riscv64/inst.isle line 873"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 904.
    return v1;
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = C::has_b(ctx);
    match v2 {
        true => {
            match arg0 {
                I32 => {
                    let v8 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, arg1);
                    // Rule at src/isa/riscv64/inst.isle line 918.
                    return v8;
                }
                I64 => {
                    let v6 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, arg1);
                    // Rule at src/isa/riscv64/inst.isle line 913.
                    return v6;
                }
                _ => {}
            }
            let v10 = C::ty_bits(ctx, arg0);
            let v11 = C::u8_as_i32(ctx, v10);
            let v12 = C::imm12_const(ctx, v11);
            let v13 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, arg1, v12);
            let v14 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, arg1);
            // Rule at src/isa/riscv64/inst.isle line 923.
            return v14;
        }
        false => {
            let v4 = constructor_gen_cltz(ctx, false, arg1, arg0);
            // Rule at src/isa/riscv64/inst.isle line 909.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_ctz", "src/isa/riscv64/inst.isle line 907"
    )
}

// Generated as internal constructor for term lower_ctz_128.
pub fn constructor_lower_ctz_128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = constructor_lower_ctz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lower_ctz(ctx, I64, v6);
    let v9 = C::load_u64_constant(ctx, 0x40);
    let v11 = C::zero_reg(ctx);
    let v12 = C::gen_select_reg(ctx, &IntCC::Equal, v9, v4, v7, v11);
    let v13 = constructor_alu_add(ctx, v4, v12);
    let v15 = C::load_u64_constant(ctx, 0x0);
    let v16 = C::value_regs(ctx, v13, v15);
    // Rule at src/isa/riscv64/inst.isle line 933.
    return v16;
}

// Generated as internal constructor for term lower_clz.
pub fn constructor_lower_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = C::has_b(ctx);
    match v2 {
        true => {
            match arg0 {
                I32 => {
                    let v8 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, arg1);
                    // Rule at src/isa/riscv64/inst.isle line 962.
                    return v8;
                }
                I64 => {
                    let v6 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, arg1);
                    // Rule at src/isa/riscv64/inst.isle line 958.
                    return v6;
                }
                _ => {}
            }
            let v10 = C::value_reg(ctx, arg1);
            let v11 = constructor_ext_int_if_need(ctx, false, v10, arg0);
            let v12 = constructor_convert_valueregs_reg(ctx, v11);
            let v13 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v12);
            let v15 = C::ty_bits(ctx, arg0);
            let v16 = C::u8_as_i32(ctx, v15);
            let v18 = C::imm12_const_add(ctx, v16, -0x40);
            let v19 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v13, v18);
            // Rule at src/isa/riscv64/inst.isle line 968.
            return v19;
        }
        false => {
            let v4 = constructor_gen_cltz(ctx, true, arg1, arg0);
            // Rule at src/isa/riscv64/inst.isle line 955.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_clz", "src/isa/riscv64/inst.isle line 953"
    )
}

// Generated as internal constructor for term lower_clz_i128.
pub fn constructor_lower_clz_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_lower_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_lower_clz(ctx, I64, v6);
    let v9 = C::load_u64_constant(ctx, 0x40);
    let v11 = C::zero_reg(ctx);
    let v12 = C::gen_select_reg(ctx, &IntCC::Equal, v9, v4, v7, v11);
    let v13 = constructor_alu_add(ctx, v4, v12);
    let v15 = C::load_u64_constant(ctx, 0x0);
    let v16 = C::value_regs(ctx, v13, v15);
    // Rule at src/isa/riscv64/inst.isle line 990.
    return v16;
}

// Generated as internal constructor for term gen_extend.
pub fn constructor_gen_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I16);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1005.
    return v8;
}

// Generated as internal constructor for term lower_extend.
pub fn constructor_lower_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> ValueRegs {
    match arg1 {
        true => {
            if arg3 == 0x80 {
                if arg2 == 0x40 {
                    let v7 = C::zero_reg(ctx);
                    let v8 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, arg0, v7);
                    let v12 = constructor_gen_extend(ctx, v8, true, 0x1, 0x40);
                    let v14 = C::gen_move2(ctx, arg0, I64, I64);
                    let v15 = C::value_regs(ctx, v14, v12);
                    // Rule at src/isa/riscv64/inst.isle line 1018.
                    return v15;
                }
                let v16 = constructor_gen_extend(ctx, arg0, true, arg2, 0x40);
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v16, v17);
                let v19 = constructor_gen_extend(ctx, v18, true, 0x1, 0x40);
                let v20 = C::gen_move2(ctx, v16, I64, I64);
                let v21 = C::value_regs(ctx, v20, v19);
                // Rule at src/isa/riscv64/inst.isle line 1026.
                return v21;
            }
        }
        false => {
            if arg3 == 0x80 {
                if arg2 == 0x40 {
                    let v22 = C::gen_move2(ctx, arg0, I64, I64);
                    let v24 = C::load_u64_constant(ctx, 0x0);
                    let v25 = C::value_regs(ctx, v22, v24);
                    // Rule at src/isa/riscv64/inst.isle line 1035.
                    return v25;
                }
                let v27 = constructor_gen_extend(ctx, arg0, false, arg2, 0x40);
                let v24 = C::load_u64_constant(ctx, 0x0);
                let v28 = C::value_regs(ctx, v27, v24);
                // Rule at src/isa/riscv64/inst.isle line 1040.
                return v28;
            }
        }
        _ => {}
    }
    let v4 = constructor_gen_extend(ctx, arg0, arg1, arg2, arg3);
    let v5 = C::value_reg(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1013.
    return v5;
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v8 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = C::value_regs_get(ctx, arg2, 0x1);
    let v10 = constructor_alu_rrr(ctx, arg0, v8, v9);
    let v11 = C::value_regs(ctx, v6, v10);
    // Rule at src/isa/riscv64/inst.isle line 1049.
    return v11;
}

// Generated as internal constructor for term lower_umlhi.
pub fn constructor_lower_umlhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    if arg0 == I64 {
        let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1058.
        return v4;
    }
    let v7 = C::value_reg(ctx, arg1);
    let v8 = constructor_ext_int_if_need(ctx, false, v7, arg0);
    let v9 = constructor_convert_valueregs_reg(ctx, v8);
    let v10 = C::value_reg(ctx, arg2);
    let v11 = constructor_ext_int_if_need(ctx, false, v10, arg0);
    let v12 = constructor_convert_valueregs_reg(ctx, v11);
    let v13 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v9, v12);
    let v15 = C::ty_bits(ctx, arg0);
    let v16 = C::u8_as_i32(ctx, v15);
    let v17 = C::imm12_const(ctx, v16);
    let v18 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v13, v17);
    // Rule at src/isa/riscv64/inst.isle line 1063.
    return v18;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    if arg0 == I64 {
        let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, arg1, arg2);
        // Rule at src/isa/riscv64/inst.isle line 1069.
        return v4;
    }
    let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, arg1, arg2);
    let v8 = C::ty_bits(ctx, arg0);
    let v9 = C::u8_as_i32(ctx, v8);
    let v10 = C::imm12_const(ctx, v9);
    let v11 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v6, v10);
    // Rule at src/isa/riscv64/inst.isle line 1074.
    return v11;
}

// Generated as internal constructor for term lower_rotl.
pub fn constructor_lower_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::has_b(ctx);
            match v3 {
                true => {
                    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1096.
                    return v9;
                }
                false => {
                    let v11 = constructor_lower_rotl_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1102.
                    return v11;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_b(ctx);
            match v3 {
                true => {
                    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1086.
                    return v5;
                }
                false => {
                    let v7 = constructor_lower_rotl_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1092.
                    return v7;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v12 = constructor_lower_rotl_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1106.
    return v12;
}

// Generated as internal constructor for term lower_rotl_shift.
pub fn constructor_lower_rotl_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, arg1, v5);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, arg1, v7);
    let v13 = C::zero_reg(ctx);
    let v14 = C::zero_reg(ctx);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v5, v13, v14, v11);
    let v17 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v9, v15);
    // Rule at src/isa/riscv64/inst.isle line 1115.
    return v17;
}

// Generated as internal constructor for term lower_rotr.
pub fn constructor_lower_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::has_b(ctx);
            match v3 {
                true => {
                    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1145.
                    return v9;
                }
                false => {
                    let v11 = constructor_lower_rotr_shift(ctx, I32, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1151.
                    return v11;
                }
                _ => {}
            }
        }
        I64 => {
            let v3 = C::has_b(ctx);
            match v3 {
                true => {
                    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1136.
                    return v5;
                }
                false => {
                    let v7 = constructor_lower_rotr_shift(ctx, I64, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 1141.
                    return v7;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v12 = constructor_lower_rotr_shift(ctx, arg0, arg1, arg2);
    // Rule at src/isa/riscv64/inst.isle line 1155.
    return v12;
}

// Generated as internal constructor for term lower_rotr_shift.
pub fn constructor_lower_rotr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = C::gen_shamt(ctx, arg0, arg2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v7 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, arg1, v5);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, arg1, v7);
    let v13 = C::zero_reg(ctx);
    let v14 = C::zero_reg(ctx);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v5, v13, v14, v11);
    let v17 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v9, v15);
    // Rule at src/isa/riscv64/inst.isle line 1163.
    return v17;
}

// Generated as internal constructor for term lower_cls.
pub fn constructor_lower_cls<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::value_reg(ctx, arg0);
    let v4 = constructor_ext_int_if_need(ctx, true, v3, arg1);
    let v5 = constructor_convert_valueregs_reg(ctx, v4);
    let v7 = C::zero_reg(ctx);
    let v8 = constructor_gen_bit_not(ctx, arg0);
    let v9 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v5, v7, v8, arg0);
    let v10 = constructor_lower_clz(ctx, arg1, v9);
    let v13 = C::imm12_const(ctx, -0x1);
    let v14 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v10, v13);
    // Rule at src/isa/riscv64/inst.isle line 1178.
    return v14;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: Reg, arg2: Type) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v5,
        tmp: v4,
        rs: arg1,
        ty: arg2,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/riscv64/inst.isle line 1190.
    return v9;
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Popcnt {
        sum: v5,
        step: v4,
        tmp: v3,
        rs: arg0,
        ty: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1200.
    return v8;
}

// Generated as internal constructor for term lower_popcnt.
pub fn constructor_lower_popcnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_b(ctx);
    match v2 {
        true => {
            let v5 = C::value_reg(ctx, arg0);
            let v6 = constructor_ext_int_if_need(ctx, false, v5, arg1);
            let v7 = constructor_convert_valueregs_reg(ctx, v6);
            let v8 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v7);
            // Rule at src/isa/riscv64/inst.isle line 1209.
            return v8;
        }
        false => {
            let v9 = constructor_gen_popcnt(ctx, arg0, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1212.
            return v9;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_popcnt", "src/isa/riscv64/inst.isle line 1208"
    )
}

// Generated as internal constructor for term lower_popcnt_i128.
pub fn constructor_lower_popcnt_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = constructor_lower_popcnt(ctx, v2, I64);
    let v6 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lower_popcnt(ctx, v6, I64);
    let v8 = constructor_alu_add(ctx, v4, v7);
    let v10 = C::load_u64_constant(ctx, 0x0);
    let v11 = C::value_regs(ctx, v8, v10);
    // Rule at src/isa/riscv64/inst.isle line 1218.
    return v11;
}

// Generated as internal constructor for term lower_i128_rotl.
pub fn constructor_lower_i128_rotl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::value_regs_get(ctx, arg0, 0x0);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v10, v6);
    let v13 = C::value_regs_get(ctx, arg0, 0x1);
    let v14 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v13, v8);
    let v16 = C::zero_reg(ctx);
    let v17 = C::zero_reg(ctx);
    let v18 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v16, v17, v14);
    let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v11, v18);
    let v21 = C::value_regs_get(ctx, arg0, 0x1);
    let v22 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v21, v6);
    let v23 = C::value_regs_get(ctx, arg0, 0x0);
    let v24 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v23, v8);
    let v25 = C::zero_reg(ctx);
    let v26 = C::zero_reg(ctx);
    let v27 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v25, v26, v24);
    let v28 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v22, v27);
    let v30 = C::load_u64_constant(ctx, 0x40);
    let v31 = C::value_regs_get(ctx, arg1, 0x0);
    let v33 = constructor_alu_andi(ctx, v31, 0x7F);
    let v35 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v30, v28, v20);
    let v36 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v30, v20, v28);
    let v37 = C::value_regs(ctx, v35, v36);
    // Rule at src/isa/riscv64/inst.isle line 1230.
    return v37;
}

// Generated as internal constructor for term lower_i128_rotr.
pub fn constructor_lower_i128_rotr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::value_regs_get(ctx, arg0, 0x0);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v10, v6);
    let v13 = C::value_regs_get(ctx, arg0, 0x1);
    let v14 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v13, v8);
    let v16 = C::zero_reg(ctx);
    let v17 = C::zero_reg(ctx);
    let v18 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v16, v17, v14);
    let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v11, v18);
    let v21 = C::value_regs_get(ctx, arg0, 0x1);
    let v22 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v21, v6);
    let v23 = C::value_regs_get(ctx, arg0, 0x0);
    let v24 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v23, v8);
    let v25 = C::zero_reg(ctx);
    let v26 = C::zero_reg(ctx);
    let v27 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v25, v26, v24);
    let v28 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v22, v27);
    let v30 = C::load_u64_constant(ctx, 0x40);
    let v31 = C::value_regs_get(ctx, arg1, 0x0);
    let v33 = constructor_alu_andi(ctx, v31, 0x7F);
    let v35 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v30, v28, v20);
    let v36 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v33, v30, v20, v28);
    let v37 = C::value_regs(ctx, v35, v36);
    // Rule at src/isa/riscv64/inst.isle line 1259.
    return v37;
}

// Generated as internal constructor for term lower_i128_ishl.
pub fn constructor_lower_i128_ishl<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::value_regs_get(ctx, arg0, 0x0);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v10, v6);
    let v13 = C::value_regs_get(ctx, arg0, 0x0);
    let v14 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v13, v8);
    let v16 = C::zero_reg(ctx);
    let v17 = C::zero_reg(ctx);
    let v18 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v16, v17, v14);
    let v19 = C::value_regs_get(ctx, arg0, 0x1);
    let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v19, v6);
    let v22 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v18, v20);
    let v24 = C::load_u64_constant(ctx, 0x40);
    let v25 = C::value_regs_get(ctx, arg1, 0x0);
    let v27 = constructor_alu_andi(ctx, v25, 0x7F);
    let v29 = C::zero_reg(ctx);
    let v30 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v27, v24, v29, v11);
    let v31 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v27, v24, v11, v22);
    let v32 = C::value_regs(ctx, v30, v31);
    // Rule at src/isa/riscv64/inst.isle line 1289.
    return v32;
}

// Generated as internal constructor for term lower_i128_ushr.
pub fn constructor_lower_i128_ushr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::value_regs_get(ctx, arg0, 0x1);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v10, v8);
    let v13 = C::zero_reg(ctx);
    let v14 = C::zero_reg(ctx);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v13, v14, v11);
    let v17 = C::value_regs_get(ctx, arg0, 0x0);
    let v18 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v17, v6);
    let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v15, v18);
    let v22 = C::load_u64_constant(ctx, 0x40);
    let v23 = C::value_regs_get(ctx, arg0, 0x1);
    let v24 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v23, v6);
    let v25 = C::value_regs_get(ctx, arg1, 0x0);
    let v27 = constructor_alu_andi(ctx, v25, 0x7F);
    let v29 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v27, v22, v24, v20);
    let v30 = C::zero_reg(ctx);
    let v31 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v27, v22, v30, v24);
    let v32 = C::value_regs(ctx, v29, v31);
    // Rule at src/isa/riscv64/inst.isle line 1311.
    return v32;
}

// Generated as internal constructor for term lower_i128_sshr.
pub fn constructor_lower_i128_sshr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::gen_shamt(ctx, I128, v4);
    let v6 = C::value_regs_get(ctx, v5, 0x0);
    let v8 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::value_regs_get(ctx, arg0, 0x1);
    let v11 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v10, v8);
    let v13 = C::zero_reg(ctx);
    let v14 = C::zero_reg(ctx);
    let v15 = C::gen_select_reg(ctx, &IntCC::Equal, v6, v13, v14, v11);
    let v17 = C::value_regs_get(ctx, arg0, 0x0);
    let v18 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v17, v6);
    let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v15, v18);
    let v22 = C::load_u64_constant(ctx, 0x40);
    let v24 = C::value_regs_get(ctx, arg0, 0x1);
    let v25 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v24, v6);
    let v27 = constructor_load_imm12(ctx, -0x1);
    let v29 = C::value_regs_get(ctx, arg0, 0x1);
    let v30 = C::zero_reg(ctx);
    let v31 = C::zero_reg(ctx);
    let v32 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v29, v30, v27, v31);
    let v33 = C::load_u64_constant(ctx, 0x40);
    let v34 = C::value_regs_get(ctx, arg1, 0x0);
    let v36 = constructor_alu_andi(ctx, v34, 0x7F);
    let v38 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v36, v33, v25, v20);
    let v39 = C::gen_select_reg(ctx, &IntCC::UnsignedGreaterThanOrEqual, v36, v33, v32, v25);
    let v40 = C::value_regs(ctx, v38, v39);
    // Rule at src/isa/riscv64/inst.isle line 1336.
    return v40;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::imm12_const(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v2, v3);
    // Rule at src/isa/riscv64/inst.isle line 1364.
    return v4;
}

// Generated as internal constructor for term lower_cls_i128.
pub fn constructor_lower_cls_i128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = C::zero_reg(ctx);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_gen_bit_not(ctx, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v3, v4, v7, v8);
    let v10 = C::value_regs_get(ctx, arg0, 0x1);
    let v11 = C::zero_reg(ctx);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = constructor_gen_bit_not(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg0, 0x1);
    let v15 = C::gen_select_reg(ctx, &IntCC::SignedLessThan, v10, v11, v13, v14);
    let v16 = C::value_regs(ctx, v9, v15);
    let v17 = constructor_lower_clz_i128(ctx, v16);
    let v18 = C::value_regs_get(ctx, v17, 0x0);
    let v21 = C::imm12_const(ctx, -0x1);
    let v22 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v18, v21);
    let v24 = C::load_u64_constant(ctx, 0x0);
    let v25 = C::value_regs(ctx, v22, v24);
    // Rule at src/isa/riscv64/inst.isle line 1369.
    return v25;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &LoadOP,
    arg3: MemFlags,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = MInst::Load {
        rd: v5,
        op: arg2.clone(),
        flags: arg3,
        from: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1404.
    return v10;
}

// Generated as internal constructor for term gen_load_128.
pub fn constructor_gen_load_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
) -> ValueRegs {
    let v5 = constructor_gen_load(ctx, arg0, arg1, &LoadOP::Ld, arg2, I64);
    let v7 = C::offset32_add(ctx, arg1, 0x8);
    let v8 = constructor_gen_load(ctx, arg0, v7, &LoadOP::Ld, arg2, I64);
    let v9 = C::value_regs(ctx, v5, v8);
    // Rule at src/isa/riscv64/inst.isle line 1412.
    return v9;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: &StoreOP,
    arg3: MemFlags,
    arg4: Reg,
) -> InstOutput {
    let v6 = C::gen_amode(ctx, arg0, arg1, I64);
    let v7 = MInst::Store {
        to: v6,
        op: arg2.clone(),
        flags: arg3,
        src: arg4,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src/isa/riscv64/inst.isle line 1427.
    return v9;
}

// Generated as internal constructor for term gen_store_128.
pub fn constructor_gen_store_128<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Offset32,
    arg2: MemFlags,
    arg3: ValueRegs,
) -> InstOutput {
    let v5 = C::gen_amode(ctx, arg0, arg1, I64);
    let v8 = C::value_regs_get(ctx, arg3, 0x0);
    let v11 = C::offset32_add(ctx, arg1, 0x8);
    let v12 = C::gen_amode(ctx, arg0, v11, I64);
    let v14 = C::value_regs_get(ctx, arg3, 0x1);
    let v9 = MInst::Store {
        to: v5,
        op: StoreOP::Sd,
        flags: arg2,
        src: v8,
    };
    let v15 = MInst::Store {
        to: v12,
        op: StoreOP::Sd,
        flags: arg2,
        src: v14,
    };
    let v16 = SideEffectNoResult::Inst2 {
        inst1: v9,
        inst2: v15,
    };
    let v17 = constructor_side_effect(ctx, &v16);
    // Rule at src/isa/riscv64/inst.isle line 1433.
    return v17;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1446.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 1455.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 1462.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 1470.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 1478.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 1486.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 1494.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 1503.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 1511.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 1519.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src/isa/riscv64/inst.isle line 1458.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src/isa/riscv64/inst.isle line 1466.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src/isa/riscv64/inst.isle line 1474.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src/isa/riscv64/inst.isle line 1482.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src/isa/riscv64/inst.isle line 1490.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src/isa/riscv64/inst.isle line 1499.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src/isa/riscv64/inst.isle line 1507.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src/isa/riscv64/inst.isle line 1515.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src/isa/riscv64/inst.isle line 1523.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src/isa/riscv64/inst.isle line 1453"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1532.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src/isa/riscv64/inst.isle line 1541.
    return v5;
}

// Generated as internal constructor for term gen_bit_not.
pub fn constructor_gen_bit_not<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = C::imm12_const(ctx, -0x1);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 1547.
    return v4;
}

// Generated as internal constructor for term f_arithmatic_op.
pub fn constructor_f_arithmatic_op<C: Context>(ctx: &mut C, arg0: Type, arg1: &Opcode) -> FpuOPRRR {
    match arg0 {
        F32 => {
            match arg1 {
                &Opcode::Fadd => {
                    // Rule at src/isa/riscv64/inst.isle line 1554.
                    return FpuOPRRR::FaddS;
                }
                &Opcode::Fsub => {
                    // Rule at src/isa/riscv64/inst.isle line 1562.
                    return FpuOPRRR::FsubS;
                }
                &Opcode::Fmul => {
                    // Rule at src/isa/riscv64/inst.isle line 1569.
                    return FpuOPRRR::FmulS;
                }
                &Opcode::Fdiv => {
                    // Rule at src/isa/riscv64/inst.isle line 1577.
                    return FpuOPRRR::FdivS;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &Opcode::Fadd => {
                    // Rule at src/isa/riscv64/inst.isle line 1558.
                    return FpuOPRRR::FaddD;
                }
                &Opcode::Fsub => {
                    // Rule at src/isa/riscv64/inst.isle line 1565.
                    return FpuOPRRR::FsubD;
                }
                &Opcode::Fmul => {
                    // Rule at src/isa/riscv64/inst.isle line 1573.
                    return FpuOPRRR::FmulD;
                }
                &Opcode::Fdiv => {
                    // Rule at src/isa/riscv64/inst.isle line 1581.
                    return FpuOPRRR::FdivD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "f_arithmatic_op", "src/isa/riscv64/inst.isle line 1552"
    )
}

// Generated as internal constructor for term f_copysign_op.
pub fn constructor_f_copysign_op<C: Context>(ctx: &mut C, arg0: Type) -> FpuOPRRR {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1594.
            return FpuOPRRR::FsgnjS;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1595.
            return FpuOPRRR::FsgnjD;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "f_copysign_op", "src/isa/riscv64/inst.isle line 1593"
    )
}

// Generated as internal constructor for term f_copy_neg_sign_op.
pub fn constructor_f_copy_neg_sign_op<C: Context>(ctx: &mut C, arg0: Type) -> FpuOPRRR {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1599.
            return FpuOPRRR::FsgnjnS;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1600.
            return FpuOPRRR::FsgnjnD;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "f_copy_neg_sign_op", "src/isa/riscv64/inst.isle line 1598"
    )
}

// Generated as internal constructor for term fabs_copy_sign.
pub fn constructor_fabs_copy_sign<C: Context>(ctx: &mut C, arg0: Type) -> FpuOPRRR {
    match arg0 {
        F32 => {
            // Rule at src/isa/riscv64/inst.isle line 1603.
            return FpuOPRRR::FsgnjxS;
        }
        F64 => {
            // Rule at src/isa/riscv64/inst.isle line 1604.
            return FpuOPRRR::FsgnjxD;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fabs_copy_sign", "src/isa/riscv64/inst.isle line 1602"
    )
}

// Generated as internal constructor for term gen_reference_check.
pub fn constructor_gen_reference_check<C: Context>(
    ctx: &mut C,
    arg0: &ReferenceCheckOP,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ReferenceCheck {
        rd: v3,
        op: arg0.clone(),
        x: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/riscv64/inst.isle line 1622.
    return v6;
}

// Generated as internal constructor for term gen_select.
pub fn constructor_gen_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::Select {
        dst: v4.clone(),
        ty: arg0,
        condition: arg1,
        x: arg2,
        y: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1631.
    return v8;
}

// Generated as internal constructor for term gen_bitselect.
pub fn constructor_gen_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, arg1, arg2);
    let v6 = constructor_gen_bit_not(ctx, arg1);
    let v7 = constructor_alu_rrr(ctx, &AluOPRRR::And, v6, arg3);
    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v5, v7);
    // Rule at src/isa/riscv64/inst.isle line 1652.
    return v9;
}

// Generated as internal constructor for term gen_int_select.
pub fn constructor_gen_int_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntSelectOP,
    arg2: ValueRegs,
    arg3: ValueRegs,
) -> ValueRegs {
    let v4 = &C::alloc_vec_writable(ctx, arg0);
    let v5 = &C::vec_writable_clone(ctx, v4);
    let v6 = MInst::IntSelect {
        op: arg1.clone(),
        dst: v5.clone(),
        x: arg2,
        y: arg3,
        ty: arg0,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::vec_writable_to_regs(ctx, v4);
    // Rule at src/isa/riscv64/inst.isle line 1665.
    return v8;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src/isa/riscv64/inst.isle line 1675.
    return v3;
}

// Generated as internal constructor for term int_load_op.
pub fn constructor_int_load_op<C: Context>(ctx: &mut C, arg0: bool, arg1: u8) -> LoadOP {
    match arg1 {
        0x8 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 1691.
                    return LoadOP::Lb;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 1687.
                    return LoadOP::Lbu;
                }
                _ => {}
            }
        }
        0x10 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 1698.
                    return LoadOP::Lh;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 1695.
                    return LoadOP::Lhu;
                }
                _ => {}
            }
        }
        0x20 => {
            match arg0 {
                true => {
                    // Rule at src/isa/riscv64/inst.isle line 1704.
                    return LoadOP::Lw;
                }
                false => {
                    // Rule at src/isa/riscv64/inst.isle line 1701.
                    return LoadOP::Lwu;
                }
                _ => {}
            }
        }
        0x40 => {
            // Rule at src/isa/riscv64/inst.isle line 1708.
            return LoadOP::Ld;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_load_op", "src/isa/riscv64/inst.isle line 1685"
    )
}

// Generated as internal constructor for term gen_fcvt_int.
pub fn constructor_gen_fcvt_int<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg4);
    let v7 = C::temp_writable_reg(ctx, F64);
    let v8 = MInst::FcvtToInt {
        is_sat: arg0,
        rd: v5,
        tmp: v7,
        rs: arg1,
        is_signed: arg2,
        in_type: arg3,
        out_type: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/inst.isle line 1721.
    return v10;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v4 = C::move_f_to_x(ctx, arg1, arg3);
    let v5 = C::move_f_to_x(ctx, arg2, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::move_x_to_f(ctx, v6, arg3);
    // Rule at src/isa/riscv64/inst.isle line 1734.
    return v7;
}

// Generated as internal constructor for term lower_float_bnot.
pub fn constructor_lower_float_bnot<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::move_f_to_x(ctx, arg0, arg1);
    let v3 = constructor_gen_bit_not(ctx, v2);
    let v4 = C::move_x_to_f(ctx, v3, arg1);
    // Rule at src/isa/riscv64/inst.isle line 1746.
    return v4;
}

// Generated as internal constructor for term convert_valueregs_reg.
pub fn constructor_convert_valueregs_reg<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Reg {
    let v2 = C::value_regs_get(ctx, arg0, 0x0);
    // Rule at src/isa/riscv64/inst.isle line 1758.
    return v2;
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v4 = &C::signed_cond_code(ctx, arg0);
    if let Some(v5) = v4 {
        let v7 = constructor_ext_int_if_need(ctx, true, arg1, arg3);
        let v8 = constructor_ext_int_if_need(ctx, true, arg2, arg3);
        let v9 = constructor_gen_icmp(ctx, arg0, v7, v8, arg3);
        // Rule at src/isa/riscv64/inst.isle line 1764.
        return v9;
    }
    let v11 = constructor_ext_int_if_need(ctx, false, arg1, arg3);
    let v12 = constructor_ext_int_if_need(ctx, false, arg2, arg3);
    let v13 = constructor_gen_icmp(ctx, arg0, v11, v12, arg3);
    // Rule at src/isa/riscv64/inst.isle line 1767.
    return v13;
}

// Generated as internal constructor for term lower_icmp_over_flow.
pub fn constructor_lower_icmp_over_flow<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
    arg2: Type,
) -> Reg {
    match arg2 {
        I64 => {
            let v21 = constructor_convert_valueregs_reg(ctx, arg1);
            let v22 = C::zero_reg(ctx);
            let v23 = constructor_alu_rrr(ctx, &AluOPRRR::Sgt, v21, v22);
            let v24 = constructor_convert_valueregs_reg(ctx, arg0);
            let v25 = constructor_convert_valueregs_reg(ctx, arg1);
            let v26 = constructor_alu_sub(ctx, v24, v25);
            let v28 = constructor_convert_valueregs_reg(ctx, arg0);
            let v29 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v26, v28);
            let v30 = C::value_reg(ctx, v23);
            let v31 = C::value_reg(ctx, v29);
            let v32 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v30, v31, I64);
            // Rule at src/isa/riscv64/inst.isle line 1782.
            return v32;
        }
        I128 => {
            let v35 = C::value_regs_get(ctx, arg0, 0x1);
            let v37 = C::imm12_const(ctx, 0x3F);
            let v38 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v35, v37);
            let v39 = C::value_regs_get(ctx, arg1, 0x1);
            let v40 = C::imm12_const(ctx, 0x3F);
            let v41 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v39, v40);
            let v42 = constructor_i128_sub(ctx, arg0, arg1);
            let v43 = C::value_regs_get(ctx, v42, 0x1);
            let v44 = C::imm12_const(ctx, 0x3F);
            let v45 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v43, v44);
            let v46 = constructor_gen_bit_not(ctx, v41);
            let v47 = constructor_gen_bit_not(ctx, v45);
            let v48 = constructor_alu_and(ctx, v46, v47);
            let v49 = constructor_alu_and(ctx, v38, v48);
            let v50 = constructor_gen_bit_not(ctx, v38);
            let v51 = constructor_alu_and(ctx, v41, v45);
            let v52 = constructor_alu_and(ctx, v50, v51);
            let v54 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v49, v52);
            let v56 = constructor_gen_extend(ctx, v54, true, 0x1, 0x40);
            // Rule at src/isa/riscv64/inst.isle line 1791.
            return v56;
        }
        _ => {}
    }
    let v4 = constructor_ext_int_if_need(ctx, true, arg0, arg2);
    let v5 = constructor_convert_valueregs_reg(ctx, v4);
    let v6 = constructor_ext_int_if_need(ctx, true, arg1, arg2);
    let v7 = constructor_convert_valueregs_reg(ctx, v6);
    let v8 = constructor_alu_sub(ctx, v5, v7);
    let v10 = C::temp_writable_reg(ctx, I64);
    let v11 = C::ty_bits(ctx, arg2);
    let v13 = MInst::Extend {
        rd: v10,
        rn: v8,
        signed: true,
        from_bits: v11,
        to_bits: 0x40,
    };
    let v14 = C::emit(ctx, &v13);
    let v16 = C::writable_reg_to_reg(ctx, v10);
    let v17 = C::value_reg(ctx, v16);
    let v18 = C::value_reg(ctx, v8);
    let v19 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v17, v18, I64);
    // Rule at src/isa/riscv64/inst.isle line 1773.
    return v19;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v4, v5);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v8, v6);
    let v11 = C::value_regs_get(ctx, arg0, 0x1);
    let v12 = C::value_regs_get(ctx, arg1, 0x1);
    let v13 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v11, v12);
    let v14 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v13, v9);
    let v15 = C::value_regs(ctx, v6, v14);
    // Rule at src/isa/riscv64/inst.isle line 1817.
    return v15;
}

// Generated as internal constructor for term gen_fabs.
pub fn constructor_gen_fabs<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = &constructor_fabs_copy_sign(ctx, arg1);
    let v3 = constructor_fpu_rrr(ctx, v2, arg1, arg0, arg0);
    // Rule at src/isa/riscv64/inst.isle line 1832.
    return v3;
}

// Generated as internal constructor for term lower_uadd_overflow.
pub fn constructor_lower_uadd_overflow<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> ValueRegs {
    if arg2 == I64 {
        let v3 = constructor_alu_add(ctx, arg0, arg1);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::value_reg(ctx, arg0);
        let v8 = constructor_gen_icmp(ctx, &IntCC::UnsignedLessThan, v5, v6, I64);
        let v9 = C::value_regs(ctx, v3, v8);
        // Rule at src/isa/riscv64/inst.isle line 1838.
        return v9;
    }
    let v10 = C::fits_in_32(ctx, arg2);
    if let Some(v11) = v10 {
        let v13 = C::value_reg(ctx, arg0);
        let v14 = constructor_ext_int_if_need(ctx, false, v13, v11);
        let v15 = constructor_convert_valueregs_reg(ctx, v14);
        let v16 = C::value_reg(ctx, arg1);
        let v17 = constructor_ext_int_if_need(ctx, false, v16, v11);
        let v18 = constructor_convert_valueregs_reg(ctx, v17);
        let v19 = constructor_alu_add(ctx, v15, v18);
        let v20 = C::ty_bits(ctx, v11);
        let v21 = C::u8_as_i32(ctx, v20);
        let v22 = constructor_alu_srli(ctx, v19, v21);
        let v23 = C::value_regs(ctx, v19, v22);
        // Rule at src/isa/riscv64/inst.isle line 1845.
        return v23;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uadd_overflow", "src/isa/riscv64/inst.isle line 1836"
    )
}

// Generated as internal constructor for term gen_jump.
pub fn constructor_gen_jump<C: Context>(ctx: &mut C, arg0: MachLabel) -> MInst {
    let v1 = C::label_to_br_target(ctx, arg0);
    let v2 = MInst::Jal { dest: v1 };
    // Rule at src/isa/riscv64/inst.isle line 1860.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v68,
            arg: v69,
            destination: v70,
            table: v71,
        } => {
            if let &Opcode::BrTable = v68 {
                let v72 = C::put_in_reg(ctx, v69);
                let v73 = C::lower_br_table(ctx, v72, arg1);
                // Rule at src/isa/riscv64/inst.isle line 1945.
                return Some(v73);
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v13 = C::value_type(ctx, v11);
                if v13 == I128 {
                    let v21 = C::zero_reg(ctx);
                    let v22 = C::zero_reg(ctx);
                    let v23 = C::value_regs(ctx, v21, v22);
                    let v24 = C::put_in_regs(ctx, v11);
                    let v26 = constructor_gen_icmp(ctx, &IntCC::NotEqual, v24, v23, I128);
                    let v27 = C::value_reg(ctx, v26);
                    let v29 = C::lower_cond_br(ctx, &IntCC::NotEqual, v27, arg1, I64);
                    // Rule at src/isa/riscv64/inst.isle line 1914.
                    return Some(v29);
                }
                let v30 = C::maybe_uextend(ctx, v11);
                if let Some(v31) = v30 {
                    let v32 = C::def_inst(ctx, v31);
                    if let Some(v33) = v32 {
                        let v34 = &C::inst_data(ctx, v33);
                        match v34 {
                            &InstructionData::FloatCompare {
                                opcode: ref v45,
                                args: ref v46,
                                cond: ref v47,
                            } => {
                                if let &Opcode::Fcmp = v45 {
                                    let v52 = C::floatcc_unordered(ctx, v47);
                                    match v52 {
                                        true => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v53 = C::label_to_br_target(ctx, v6);
                                            let v55 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v56 = C::label_to_br_target(ctx, v55);
                                            let v57 = &C::floatcc_inverse(ctx, v47);
                                            let v48 = C::unpack_value_array_2(ctx, v46);
                                            let v58 = C::put_in_reg(ctx, v48.0);
                                            let v59 = C::put_in_reg(ctx, v48.1);
                                            let v51 = C::value_type(ctx, v48.0);
                                            let v60 =
                                                &constructor_emit_fcmp(ctx, v57, v51, v58, v59);
                                            let v61 = &constructor_cond_br(ctx, v60, v56, v53);
                                            let v62 = constructor_emit_side_effect(ctx, v61);
                                            // Rule at src/isa/riscv64/inst.isle line 1926.
                                            return Some(v62);
                                        }
                                        false => {
                                            let v6 = C::vec_label_get(ctx, arg1, 0x0);
                                            let v53 = C::label_to_br_target(ctx, v6);
                                            let v55 = C::vec_label_get(ctx, arg1, 0x1);
                                            let v56 = C::label_to_br_target(ctx, v55);
                                            let v48 = C::unpack_value_array_2(ctx, v46);
                                            let v63 = C::put_in_reg(ctx, v48.0);
                                            let v64 = C::put_in_reg(ctx, v48.1);
                                            let v51 = C::value_type(ctx, v48.0);
                                            let v65 =
                                                &constructor_emit_fcmp(ctx, v47, v51, v63, v64);
                                            let v66 = &constructor_cond_br(ctx, v65, v53, v56);
                                            let v67 = constructor_emit_side_effect(ctx, v66);
                                            // Rule at src/isa/riscv64/inst.isle line 1933.
                                            return Some(v67);
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v35,
                                args: ref v36,
                                cond: ref v37,
                            } => {
                                if let &Opcode::Icmp = v35 {
                                    let v38 = C::unpack_value_array_2(ctx, v36);
                                    let v42 = C::put_in_regs(ctx, v38.0);
                                    let v43 = C::put_in_regs(ctx, v38.1);
                                    let v41 = C::value_type(ctx, v38.0);
                                    let v44 = C::lower_br_icmp(ctx, v37, v42, v43, arg1, v41);
                                    // Rule at src/isa/riscv64/inst.isle line 1921.
                                    return Some(v44);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v18 = C::put_in_regs(ctx, v11);
                let v19 = constructor_normalize_cmp_value(ctx, v13, v18);
                let v20 = C::lower_cond_br(ctx, &IntCC::NotEqual, v19, arg1, v13);
                // Rule at src/isa/riscv64/inst.isle line 1910.
                return Some(v20);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_label_get(ctx, arg1, 0x0);
                let v7 = &constructor_gen_jump(ctx, v6);
                let v8 = SideEffectNoResult::Inst { inst: v7.clone() };
                let v9 = constructor_emit_side_effect(ctx, &v8);
                // Rule at src/isa/riscv64/inst.isle line 1867.
                return Some(v9);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term normalize_cmp_value.
pub fn constructor_normalize_cmp_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
) -> ValueRegs {
    match arg0 {
        I8 => {
            let v3 = constructor_convert_valueregs_reg(ctx, arg1);
            let v5 = C::imm12_const(ctx, 0xFF);
            let v6 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, v5);
            let v7 = C::value_reg(ctx, v6);
            // Rule at src/isa/riscv64/inst.isle line 1887.
            return v7;
        }
        I16 => {
            let v3 = constructor_convert_valueregs_reg(ctx, arg1);
            let v11 = C::imm(ctx, I16, 0xFFFF);
            let v12 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v11);
            let v13 = C::value_reg(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 1889.
            return v13;
        }
        I32 => {
            let v3 = constructor_convert_valueregs_reg(ctx, arg1);
            let v16 = C::imm12_const(ctx, 0x0);
            let v17 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, v16);
            let v18 = C::value_reg(ctx, v17);
            // Rule at src/isa/riscv64/inst.isle line 1891.
            return v18;
        }
        I64 => {
            // Rule at src/isa/riscv64/inst.isle line 1894.
            return arg1;
        }
        I128 => {
            // Rule at src/isa/riscv64/inst.isle line 1895.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "normalize_cmp_value", "src/isa/riscv64/inst.isle line 1885"
    )
}

// Generated as internal constructor for term truthy_to_reg.
pub fn constructor_truthy_to_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        // Rule at src/isa/riscv64/inst.isle line 1901.
        return v5;
    }
    if arg0 == I128 {
        let v5 = C::value_regs_get(ctx, arg1, 0x0);
        let v7 = C::value_regs_get(ctx, arg1, 0x1);
        let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v5, v7);
        // Rule at src/isa/riscv64/inst.isle line 1903.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "truthy_to_reg", "src/isa/riscv64/inst.isle line 1900"
    )
}

// Generated as internal constructor for term gen_andn.
pub fn constructor_gen_andn<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v2 = C::has_b(ctx);
    match v2 {
        true => {
            let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, arg0, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1953.
            return v4;
        }
        false => {
            let v5 = constructor_gen_bit_not(ctx, arg1);
            let v6 = constructor_alu_and(ctx, arg0, v5);
            // Rule at src/isa/riscv64/inst.isle line 1959.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_andn", "src/isa/riscv64/inst.isle line 1952"
    )
}

// Generated as internal constructor for term gen_orn.
pub fn constructor_gen_orn<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v2 = C::has_b(ctx);
    match v2 {
        true => {
            let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, arg0, arg1);
            // Rule at src/isa/riscv64/inst.isle line 1967.
            return v4;
        }
        false => {
            let v5 = constructor_gen_bit_not(ctx, arg1);
            let v7 = constructor_alu_rrr(ctx, &AluOPRRR::Or, arg0, v5);
            // Rule at src/isa/riscv64/inst.isle line 1973.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_orn", "src/isa/riscv64/inst.isle line 1966"
    )
}

// Generated as internal constructor for term gen_rev8.
pub fn constructor_gen_rev8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::has_b(ctx);
    match v1 {
        true => {
            let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, arg0);
            // Rule at src/isa/riscv64/inst.isle line 1980.
            return v3;
        }
        false => {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v6 = C::temp_writable_reg(ctx, I64);
            let v7 = C::temp_writable_reg(ctx, I64);
            let v8 = MInst::Rev8 {
                rs: arg0,
                step: v7,
                tmp: v6,
                rd: v5,
            };
            let v9 = C::emit(ctx, &v8);
            let v10 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/riscv64/inst.isle line 1986.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_rev8", "src/isa/riscv64/inst.isle line 1979"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v4 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, arg0);
            // Rule at src/isa/riscv64/inst.isle line 2002.
            return v4;
        }
        false => {
            let v6 = C::temp_writable_reg(ctx, I64);
            let v7 = C::temp_writable_reg(ctx, I64);
            let v8 = C::temp_writable_reg(ctx, I64);
            let v9 = C::temp_writable_reg(ctx, I64);
            let v10 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v8,
                tmp: v6,
                tmp2: v7,
                rd: v9,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/riscv64/inst.isle line 2007.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src/isa/riscv64/inst.isle line 2001"
    )
}

// Generated as internal constructor for term gen_xor_not.
pub fn constructor_gen_xor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v2 = constructor_gen_bit_not(ctx, arg1);
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, arg0, v2);
    // Rule at src/isa/riscv64/inst.isle line 2020.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src/isa/riscv64/inst.isle line 2032.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::zero_reg(ctx);
            let v9 = C::value_regs_get(ctx, arg1, 0x0);
            let v10 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v7, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2028.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src/isa/riscv64/inst.isle line 2027"
    )
}

// Generated as internal constructor for term max.
pub fn constructor_max<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::has_zbb(ctx);
            match v7 {
                true => {
                    let v9 = constructor_alu_rrr(ctx, &AluOPRRR::Max, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2038.
                    return v9;
                }
                false => {
                    let v11 =
                        C::gen_select_reg(ctx, &IntCC::SignedGreaterThan, arg1, arg2, arg1, arg2);
                    // Rule at src/isa/riscv64/inst.isle line 2042.
                    return v11;
                }
                _ => {}
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max", "src/isa/riscv64/inst.isle line 2037"
    )
}

// Generated as internal constructor for term lower_iabs.
pub fn constructor_lower_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::value_reg(ctx, arg1);
        let v6 = constructor_ext_int_if_need(ctx, true, v5, v2);
        let v7 = constructor_convert_valueregs_reg(ctx, v6);
        let v9 = C::value_reg(ctx, v7);
        let v10 = constructor_neg(ctx, I64, v9);
        let v11 = constructor_convert_valueregs_reg(ctx, v10);
        let v12 = constructor_max(ctx, I64, v7, v11);
        // Rule at src/isa/riscv64/inst.isle line 2054.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_iabs", "src/isa/riscv64/inst.isle line 2047"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(ctx: &mut C, arg0: Reg, arg1: &TrapCode) -> InstOutput {
    let v2 = MInst::TrapIf {
        test: arg0,
        trap_code: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    let v4 = constructor_side_effect(ctx, &v3);
    // Rule at src/isa/riscv64/inst.isle line 2061.
    return v4;
}

// Generated as internal constructor for term gen_trapifc.
pub fn constructor_gen_trapifc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: Reg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = MInst::TrapIfC {
        rs1: arg1,
        rs2: arg2,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src/isa/riscv64/inst.isle line 2066.
    return v6;
}

// Generated as internal constructor for term gen_div_overflow.
pub fn constructor_gen_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
) -> InstOutput {
    let v4 = constructor_load_imm12(ctx, -0x1);
    let v6 = constructor_load_imm12(ctx, 0x1);
    let v8 = constructor_alu_slli(ctx, v6, 0x3F);
    let v9 = C::shift_int_to_most_significant(ctx, arg0, arg2);
    let v11 = C::value_reg(ctx, v4);
    let v12 = C::value_reg(ctx, arg1);
    let v13 = constructor_gen_icmp(ctx, &IntCC::Equal, v11, v12, arg2);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v9);
    let v16 = constructor_gen_icmp(ctx, &IntCC::Equal, v14, v15, arg2);
    let v17 = constructor_alu_and(ctx, v13, v16);
    let v19 = constructor_gen_trapif(ctx, v17, &TrapCode::IntegerOverflow);
    // Rule at src/isa/riscv64/inst.isle line 2075.
    return v19;
}

// Generated as internal constructor for term gen_div_by_zero.
pub fn constructor_gen_div_by_zero<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapifc(
        ctx,
        &IntCC::Equal,
        v2,
        arg0,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src/isa/riscv64/inst.isle line 2087.
    return v4;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, arg0, arg1);
    let v5 = constructor_alu_add(ctx, v4, arg2);
    // Rule at src/isa/riscv64/inst.isle line 2101.
    return v5;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2107.
    return v3;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        if arg1 == I128 {
            let v29 = constructor_lower_bmask(ctx, I64, I128, arg2);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            let v31 = C::value_regs_get(ctx, v29, 0x0);
            let v32 = C::value_regs(ctx, v30, v31);
            // Rule at src/isa/riscv64/inst.isle line 2147.
            return v32;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v24 = constructor_lower_bmask(ctx, I64, v5, arg2);
            let v25 = C::value_regs_get(ctx, v24, 0x0);
            let v26 = C::value_regs_get(ctx, v24, 0x0);
            let v27 = C::value_regs(ctx, v25, v26);
            // Rule at src/isa/riscv64/inst.isle line 2138.
            return v27;
        }
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v16 = C::value_regs_get(ctx, arg2, 0x0);
            let v18 = C::value_regs_get(ctx, arg2, 0x1);
            let v20 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v16, v18);
            let v22 = C::value_reg(ctx, v20);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/riscv64/inst.isle line 2128.
            return v23;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_normalize_cmp_value(ctx, v5, arg2);
            let v8 = constructor_convert_valueregs_reg(ctx, v7);
            let v9 = C::zero_reg(ctx);
            let v11 = constructor_load_imm12(ctx, -0x1);
            let v13 = C::gen_select_reg(ctx, &IntCC::Equal, v9, v8, v9, v11);
            let v14 = C::value_reg(ctx, v13);
            // Rule at src/isa/riscv64/inst.isle line 2118.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/riscv64/inst.isle line 2112"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/riscv64/inst.isle line 2158.
    return v5;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = C::imm_from_bits(ctx, 0x1);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, arg0, v3);
    // Rule at src/isa/riscv64/inst.isle line 2173.
    return v4;
}

// Generated as internal constructor for term emit_or.
pub fn constructor_emit_or<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::Or, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2176.
    return v3;
}

// Generated as internal constructor for term emit_and.
pub fn constructor_emit_and<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = constructor_alu_rrr(ctx, &AluOPRRR::And, arg0, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2179.
    return v3;
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_feq(ctx, arg0, arg1, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2182.
    return v2;
}

// Generated as internal constructor for term feq.
pub fn constructor_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2185.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2186.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "feq", "src/isa/riscv64/inst.isle line 2184"
    )
}

// Generated as internal constructor for term flt.
pub fn constructor_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2189.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2190.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flt", "src/isa/riscv64/inst.isle line 2188"
    )
}

// Generated as internal constructor for term fle.
pub fn constructor_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        F32 => {
            let v5 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2193.
            return v5;
        }
        F64 => {
            let v7 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, arg1, arg2);
            // Rule at src/isa/riscv64/inst.isle line 2194.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fle", "src/isa/riscv64/inst.isle line 2192"
    )
}

// Generated as internal constructor for term fgt.
pub fn constructor_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_flt(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2197.
    return v3;
}

// Generated as internal constructor for term fge.
pub fn constructor_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_fle(ctx, arg0, arg2, arg1);
    // Rule at src/isa/riscv64/inst.isle line 2200.
    return v3;
}

// Generated as internal constructor for term ordered.
pub fn constructor_ordered<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_is_not_nan(ctx, arg0, arg1);
    let v4 = constructor_is_not_nan(ctx, arg0, arg2);
    let v5 = constructor_emit_and(ctx, v3, v4);
    // Rule at src/isa/riscv64/inst.isle line 2203.
    return v5;
}

// Generated as internal constructor for term cmp_result.
pub fn constructor_cmp_result<C: Context>(ctx: &mut C, arg0: Reg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: false,
    };
    // Rule at src/isa/riscv64/inst.isle line 2213.
    return v2;
}

// Generated as internal constructor for term cmp_result_invert.
pub fn constructor_cmp_result_invert<C: Context>(ctx: &mut C, arg0: Reg) -> CmpResult {
    let v2 = CmpResult::Result {
        result: arg0,
        invert: true,
    };
    // Rule at src/isa/riscv64/inst.isle line 2218.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
    arg1: BranchTarget,
    arg2: BranchTarget,
) -> SideEffectNoResult {
    let v3 = constructor_cmp_integer_compare(ctx, arg0);
    let v4 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: v3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/riscv64/inst.isle line 2222.
    return v5;
}

// Generated as internal constructor for term cmp_integer_compare.
pub fn constructor_cmp_integer_compare<C: Context>(
    ctx: &mut C,
    arg0: &CmpResult,
) -> IntegerCompare {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v4 = C::zero_reg(ctx);
                let v7 = C::int_compare(ctx, &IntCC::Equal, v1, v4);
                // Rule at src/isa/riscv64/inst.isle line 2238.
                return v7;
            }
            false => {
                let v4 = C::zero_reg(ctx);
                let v5 = C::int_compare(ctx, &IntCC::NotEqual, v1, v4);
                // Rule at src/isa/riscv64/inst.isle line 2234.
                return v5;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_integer_compare", "src/isa/riscv64/inst.isle line 2231"
    )
}

// Generated as internal constructor for term cmp_value.
pub fn constructor_cmp_value<C: Context>(ctx: &mut C, arg0: &CmpResult) -> Reg {
    if let &CmpResult::Result {
        result: v1,
        invert: v2,
    } = arg0
    {
        match v2 {
            true => {
                let v3 = constructor_not(ctx, v1);
                // Rule at src/isa/riscv64/inst.isle line 2244.
                return v3;
            }
            false => {
                // Rule at src/isa/riscv64/inst.isle line 2243.
                return v1;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_value", "src/isa/riscv64/inst.isle line 2242"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> CmpResult {
    match arg0 {
        &FloatCC::Equal => {
            let v7 = constructor_feq(ctx, arg1, arg2, arg3);
            let v8 = &constructor_cmp_result(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2262.
            return v8.clone();
        }
        &FloatCC::GreaterThan => {
            let v21 = constructor_fgt(ctx, arg1, arg2, arg3);
            let v22 = &constructor_cmp_result(ctx, v21);
            // Rule at src/isa/riscv64/inst.isle line 2293.
            return v22.clone();
        }
        &FloatCC::GreaterThanOrEqual => {
            let v23 = constructor_fge(ctx, arg1, arg2, arg3);
            let v24 = &constructor_cmp_result(ctx, v23);
            // Rule at src/isa/riscv64/inst.isle line 2298.
            return v24.clone();
        }
        &FloatCC::LessThan => {
            let v10 = constructor_flt(ctx, arg1, arg2, arg3);
            let v18 = &constructor_cmp_result(ctx, v10);
            // Rule at src/isa/riscv64/inst.isle line 2283.
            return v18.clone();
        }
        &FloatCC::LessThanOrEqual => {
            let v19 = constructor_fle(ctx, arg1, arg2, arg3);
            let v20 = &constructor_cmp_result(ctx, v19);
            // Rule at src/isa/riscv64/inst.isle line 2288.
            return v20.clone();
        }
        &FloatCC::NotEqual => {
            let v7 = constructor_feq(ctx, arg1, arg2, arg3);
            let v9 = &constructor_cmp_result_invert(ctx, v7);
            // Rule at src/isa/riscv64/inst.isle line 2268.
            return v9.clone();
        }
        &FloatCC::Ordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v5 = &constructor_cmp_result(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2251.
            return v5.clone();
        }
        &FloatCC::OrderedNotEqual => {
            let v10 = constructor_flt(ctx, arg1, arg2, arg3);
            let v11 = constructor_fgt(ctx, arg1, arg2, arg3);
            let v12 = constructor_emit_or(ctx, v10, v11);
            let v13 = &constructor_cmp_result(ctx, v12);
            // Rule at src/isa/riscv64/inst.isle line 2273.
            return v13.clone();
        }
        &FloatCC::Unordered => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v6 = &constructor_cmp_result_invert(ctx, v4);
            // Rule at src/isa/riscv64/inst.isle line 2257.
            return v6.clone();
        }
        &FloatCC::UnorderedOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v14 = constructor_not(ctx, v4);
            let v15 = constructor_feq(ctx, arg1, arg2, arg3);
            let v16 = constructor_emit_or(ctx, v14, v15);
            let v17 = &constructor_cmp_result(ctx, v16);
            // Rule at src/isa/riscv64/inst.isle line 2278.
            return v17.clone();
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v30 = constructor_fle(ctx, arg1, arg2, arg3);
            let v31 = constructor_emit_and(ctx, v4, v30);
            let v32 = &constructor_cmp_result_invert(ctx, v31);
            // Rule at src/isa/riscv64/inst.isle line 2316.
            return v32.clone();
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v33 = constructor_flt(ctx, arg1, arg2, arg3);
            let v34 = constructor_emit_and(ctx, v4, v33);
            let v35 = &constructor_cmp_result_invert(ctx, v34);
            // Rule at src/isa/riscv64/inst.isle line 2322.
            return v35.clone();
        }
        &FloatCC::UnorderedOrLessThan => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v25 = constructor_fge(ctx, arg1, arg2, arg3);
            let v26 = constructor_emit_and(ctx, v4, v25);
            let v27 = &constructor_cmp_result_invert(ctx, v26);
            // Rule at src/isa/riscv64/inst.isle line 2304.
            return v27.clone();
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v4 = constructor_ordered(ctx, arg1, arg2, arg3);
            let v11 = constructor_fgt(ctx, arg1, arg2, arg3);
            let v28 = constructor_emit_and(ctx, v4, v11);
            let v29 = &constructor_cmp_result_invert(ctx, v28);
            // Rule at src/isa/riscv64/inst.isle line 2310.
            return v29.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/riscv64/inst.isle line 2247"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v509,
            args: ref v510,
            flags: v511,
        } => {
            if let &Opcode::AtomicCas = v509 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v445 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v446) = v445 {
                        let v479 = C::temp_writable_reg(ctx, v446);
                        let v516 = C::temp_writable_reg(ctx, v446);
                        let v512 = C::unpack_value_array_3(ctx, v510);
                        let v517 = C::put_in_reg(ctx, v512.0);
                        let v518 = constructor_gen_atomic_offset(ctx, v517, v446);
                        let v519 = C::put_in_regs(ctx, v512.1);
                        let v520 = constructor_ext_int_if_need(ctx, false, v519, v446);
                        let v521 = constructor_convert_valueregs_reg(ctx, v520);
                        let v522 = C::put_in_reg(ctx, v512.0);
                        let v523 = constructor_gen_atomic_p(ctx, v522, v446);
                        let v524 = C::put_in_reg(ctx, v512.2);
                        let v525 = MInst::AtomicCas {
                            offset: v518,
                            t0: v479,
                            dst: v516,
                            e: v521,
                            addr: v523,
                            v: v524,
                            ty: v446,
                        };
                        let v526 = C::emit(ctx, &v525);
                        let v527 = C::writable_reg_to_reg(ctx, v516);
                        let v528 = constructor_output_reg(ctx, v527);
                        // Rule at src/isa/riscv64/lower.isle line 542.
                        return Some(v528);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v447,
            args: ref v448,
            flags: v449,
            op: ref v450,
        } => {
            if let &Opcode::AtomicRmw = v447 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v445 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v446) = v445 {
                        let v460 = C::fits_in_16(ctx, v446);
                        if let Some(v461) = v460 {
                            let v466 = C::is_atomic_rmw_max_etc(ctx, v450);
                            if let Some(v467) = v466 {
                                match v467.1 {
                                    true => {
                                        let v451 = C::unpack_value_array_2(ctx, v448);
                                        let v462 = C::put_in_reg(ctx, v451.0);
                                        let v470 = C::put_in_regs(ctx, v451.1);
                                        let v471 =
                                            constructor_ext_int_if_need(ctx, true, v470, v461);
                                        let v472 = constructor_convert_valueregs_reg(ctx, v471);
                                        let v473 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v467.0, v461, v462, v472,
                                        );
                                        let v474 = constructor_output_reg(ctx, v473);
                                        // Rule at src/isa/riscv64/lower.isle line 474.
                                        return Some(v474);
                                    }
                                    false => {
                                        let v451 = C::unpack_value_array_2(ctx, v448);
                                        let v462 = C::put_in_reg(ctx, v451.0);
                                        let v470 = C::put_in_regs(ctx, v451.1);
                                        let v475 =
                                            constructor_ext_int_if_need(ctx, false, v470, v461);
                                        let v476 = constructor_convert_valueregs_reg(ctx, v475);
                                        let v477 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v467.0, v461, v462, v476,
                                        );
                                        let v478 = constructor_output_reg(ctx, v477);
                                        // Rule at src/isa/riscv64/lower.isle line 480.
                                        return Some(v478);
                                    }
                                    _ => {}
                                }
                            }
                            let v451 = C::unpack_value_array_2(ctx, v448);
                            let v462 = C::put_in_reg(ctx, v451.0);
                            let v463 = C::put_in_reg(ctx, v451.1);
                            let v464 = constructor_gen_atomic_rmw_loop(ctx, v450, v461, v462, v463);
                            let v465 = constructor_output_reg(ctx, v464);
                            // Rule at src/isa/riscv64/lower.isle line 467.
                            return Some(v465);
                        }
                        match v450 {
                            &AtomicRmwOp::Nand => {
                                let v451 = C::unpack_value_array_2(ctx, v448);
                                let v462 = C::put_in_reg(ctx, v451.0);
                                let v463 = C::put_in_reg(ctx, v451.1);
                                let v489 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v446,
                                    v462,
                                    v463,
                                );
                                let v490 = constructor_output_reg(ctx, v489);
                                // Rule at src/isa/riscv64/lower.isle line 507.
                                return Some(v490);
                            }
                            &AtomicRmwOp::Sub => {
                                let v479 = C::temp_writable_reg(ctx, v446);
                                let v480 = C::zero_reg(ctx);
                                let v451 = C::unpack_value_array_2(ctx, v448);
                                let v456 = C::put_in_reg(ctx, v451.1);
                                let v481 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v480, v456);
                                let v483 =
                                    &constructor_get_atomic_rmw_op(ctx, v446, &AtomicRmwOp::Add);
                                let v484 = C::put_in_reg(ctx, v451.0);
                                let v485 = C::atomic_amo(ctx);
                                let v486 = constructor_gen_atomic(ctx, v483, v484, v481, v485);
                                let v487 = constructor_output_reg(ctx, v486);
                                // Rule at src/isa/riscv64/lower.isle line 489.
                                return Some(v487);
                            }
                            _ => {}
                        }
                        let v454 = &constructor_get_atomic_rmw_op(ctx, v446, v450);
                        let v451 = C::unpack_value_array_2(ctx, v448);
                        let v455 = C::put_in_reg(ctx, v451.0);
                        let v456 = C::put_in_reg(ctx, v451.1);
                        let v457 = C::atomic_amo(ctx);
                        let v458 = constructor_gen_atomic(ctx, v454, v455, v456, v457);
                        let v459 = constructor_output_reg(ctx, v458);
                        // Rule at src/isa/riscv64/lower.isle line 460.
                        return Some(v459);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v28,
            args: ref v29,
        } => {
            match v28 {
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v64 = C::put_in_regs(ctx, v30.0);
                        let v3 = C::value_type(ctx, v2);
                        let v616 = constructor_ext_int_if_need(ctx, true, v64, v3);
                        let v67 = C::put_in_regs(ctx, v30.1);
                        let v617 = constructor_ext_int_if_need(ctx, true, v67, v3);
                        let v621 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Smin, v616, v617);
                        let v622 = C::output(ctx, v621);
                        // Rule at src/isa/riscv64/lower.isle line 649.
                        return Some(v622);
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v64 = C::put_in_regs(ctx, v30.0);
                        let v3 = C::value_type(ctx, v2);
                        let v624 = constructor_ext_int_if_need(ctx, false, v64, v3);
                        let v67 = C::put_in_regs(ctx, v30.1);
                        let v625 = constructor_ext_int_if_need(ctx, false, v67, v3);
                        let v629 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Umin, v624, v625);
                        let v630 = C::output(ctx, v629);
                        // Rule at src/isa/riscv64/lower.isle line 658.
                        return Some(v630);
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v64 = C::put_in_regs(ctx, v30.0);
                        let v3 = C::value_type(ctx, v2);
                        let v616 = constructor_ext_int_if_need(ctx, true, v64, v3);
                        let v67 = C::put_in_regs(ctx, v30.1);
                        let v617 = constructor_ext_int_if_need(ctx, true, v67, v3);
                        let v618 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Smax, v616, v617);
                        let v619 = C::output(ctx, v618);
                        // Rule at src/isa/riscv64/lower.isle line 644.
                        return Some(v619);
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v64 = C::put_in_regs(ctx, v30.0);
                        let v3 = C::value_type(ctx, v2);
                        let v624 = constructor_ext_int_if_need(ctx, false, v64, v3);
                        let v67 = C::put_in_regs(ctx, v30.1);
                        let v625 = constructor_ext_int_if_need(ctx, false, v67, v3);
                        let v626 =
                            constructor_gen_int_select(ctx, v3, &IntSelectOP::Umax, v624, v625);
                        let v627 = C::output(ctx, v626);
                        // Rule at src/isa/riscv64/lower.isle line 653.
                        return Some(v627);
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v54 = C::def_inst(ctx, v30.0);
                            if let Some(v55) = v54 {
                                let v56 = &C::inst_data(ctx, v55);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v57,
                                    imm: v58,
                                } = v56
                                {
                                    if let &Opcode::Iconst = v57 {
                                        let v59 = C::u64_from_imm64(ctx, v58);
                                        let v60 = C::imm12_from_u64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v50 = &constructor_select_addi(ctx, v39);
                                            let v35 = C::put_in_reg(ctx, v30.1);
                                            let v62 = constructor_alu_rr_imm12(ctx, v50, v35, v61);
                                            let v63 = constructor_output_reg(ctx, v62);
                                            // Rule at src/isa/riscv64/lower.isle line 40.
                                            return Some(v63);
                                        }
                                    }
                                }
                            }
                            let v42 = C::def_inst(ctx, v30.1);
                            if let Some(v43) = v42 {
                                let v44 = &C::inst_data(ctx, v43);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v45,
                                    imm: v46,
                                } = v44
                                {
                                    if let &Opcode::Iconst = v45 {
                                        let v47 = C::u64_from_imm64(ctx, v46);
                                        let v48 = C::imm12_from_u64(ctx, v47);
                                        if let Some(v49) = v48 {
                                            let v50 = &constructor_select_addi(ctx, v39);
                                            let v51 = C::put_in_reg(ctx, v30.0);
                                            let v52 = constructor_alu_rr_imm12(ctx, v50, v51, v49);
                                            let v53 = constructor_output_reg(ctx, v52);
                                            // Rule at src/isa/riscv64/lower.isle line 37.
                                            return Some(v53);
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v66 = C::value_regs_get(ctx, v64, 0x0);
                            let v67 = C::put_in_regs(ctx, v30.1);
                            let v68 = C::value_regs_get(ctx, v67, 0x0);
                            let v69 = constructor_alu_add(ctx, v66, v68);
                            let v71 = C::put_in_regs(ctx, v30.1);
                            let v72 = C::value_regs_get(ctx, v71, 0x0);
                            let v73 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v69, v72);
                            let v74 = C::put_in_regs(ctx, v30.0);
                            let v76 = C::value_regs_get(ctx, v74, 0x1);
                            let v77 = C::put_in_regs(ctx, v30.1);
                            let v78 = C::value_regs_get(ctx, v77, 0x1);
                            let v79 = constructor_alu_add(ctx, v76, v78);
                            let v80 = constructor_alu_add(ctx, v79, v73);
                            let v81 = C::value_regs(ctx, v69, v80);
                            let v82 = C::output(ctx, v81);
                            // Rule at src/isa/riscv64/lower.isle line 44.
                            return Some(v82);
                        }
                        let v26 = C::fits_in_32(ctx, v3);
                        if let Some(v27) = v26 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v36 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/riscv64/lower.isle line 29.
                            return Some(v37);
                        }
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v40 = constructor_alu_add(ctx, v34, v35);
                            let v41 = constructor_output_reg(ctx, v40);
                            // Rule at src/isa/riscv64/lower.isle line 33.
                            return Some(v41);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v102 = C::put_in_regs(ctx, v30.1);
                            let v103 = constructor_i128_sub(ctx, v64, v102);
                            let v104 = C::output(ctx, v103);
                            // Rule at src/isa/riscv64/lower.isle line 73.
                            return Some(v104);
                        }
                        let v26 = C::fits_in_32(ctx, v3);
                        if let Some(v27) = v26 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v100 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v34, v35);
                            let v101 = constructor_output_reg(ctx, v100);
                            // Rule at src/isa/riscv64/lower.isle line 70.
                            return Some(v101);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v97 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v34, v35);
                            let v98 = constructor_output_reg(ctx, v97);
                            // Rule at src/isa/riscv64/lower.isle line 67.
                            return Some(v98);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v66 = C::value_regs_get(ctx, v64, 0x0);
                            let v131 = C::value_regs_get(ctx, v64, 0x1);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v132 = C::value_regs_get(ctx, v119, 0x0);
                            let v133 = C::value_regs_get(ctx, v119, 0x1);
                            let v134 = constructor_umulh(ctx, v66, v132);
                            let v135 = constructor_madd(ctx, v66, v133, v134);
                            let v136 = constructor_madd(ctx, v131, v132, v135);
                            let v137 = C::zero_reg(ctx);
                            let v138 = constructor_madd(ctx, v66, v132, v137);
                            let v139 = C::value_regs(ctx, v138, v136);
                            let v140 = C::output(ctx, v139);
                            // Rule at src/isa/riscv64/lower.isle line 98.
                            return Some(v140);
                        }
                        let v26 = C::fits_in_32(ctx, v3);
                        if let Some(v27) = v26 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v114 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v34, v35);
                            let v115 = constructor_output_reg(ctx, v114);
                            // Rule at src/isa/riscv64/lower.isle line 86.
                            return Some(v115);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v111 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v34, v35);
                            let v112 = constructor_output_reg(ctx, v111);
                            // Rule at src/isa/riscv64/lower.isle line 84.
                            return Some(v112);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v125 = constructor_ext_int_if_need(ctx, false, v64, v39);
                            let v126 = constructor_convert_valueregs_reg(ctx, v125);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v127 = constructor_ext_int_if_need(ctx, false, v119, v39);
                            let v128 = constructor_convert_valueregs_reg(ctx, v127);
                            let v129 = constructor_lower_umlhi(ctx, v39, v126, v128);
                            let v130 = constructor_output_reg(ctx, v129);
                            // Rule at src/isa/riscv64/lower.isle line 94.
                            return Some(v130);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v117 = constructor_ext_int_if_need(ctx, true, v64, v39);
                            let v118 = constructor_convert_valueregs_reg(ctx, v117);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v120 = constructor_ext_int_if_need(ctx, true, v119, v39);
                            let v121 = constructor_convert_valueregs_reg(ctx, v120);
                            let v122 = constructor_lower_smlhi(ctx, v39, v118, v121);
                            let v123 = constructor_output_reg(ctx, v122);
                            // Rule at src/isa/riscv64/lower.isle line 90.
                            return Some(v123);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v169 = C::put_in_reg(ctx, v30.1);
                            let v170 = constructor_gen_div_by_zero(ctx, v169);
                            let v172 = C::put_in_reg(ctx, v30.0);
                            let v162 = C::put_in_reg(ctx, v30.1);
                            let v173 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v172, v162);
                            let v174 = constructor_output_reg(ctx, v173);
                            // Rule at src/isa/riscv64/lower.isle line 147.
                            return Some(v174);
                        }
                        let v26 = C::fits_in_32(ctx, v3);
                        if let Some(v27) = v26 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v141 = C::put_in_regs(ctx, v30.1);
                            let v142 = constructor_ext_int_if_need(ctx, false, v141, v27);
                            let v143 = constructor_convert_valueregs_reg(ctx, v142);
                            let v144 = constructor_gen_div_by_zero(ctx, v143);
                            let v146 = C::put_in_regs(ctx, v30.0);
                            let v147 = constructor_ext_int_if_need(ctx, false, v146, v27);
                            let v148 = constructor_convert_valueregs_reg(ctx, v147);
                            let v149 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v148, v143);
                            let v150 = constructor_output_reg(ctx, v149);
                            // Rule at src/isa/riscv64/lower.isle line 127.
                            return Some(v150);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v161 = constructor_gen_div_overflow(ctx, v34, v35, I64);
                            let v162 = C::put_in_reg(ctx, v30.1);
                            let v163 = constructor_gen_div_by_zero(ctx, v162);
                            let v165 = C::put_in_reg(ctx, v30.0);
                            let v166 = C::put_in_reg(ctx, v30.1);
                            let v167 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v165, v166);
                            let v168 = constructor_output_reg(ctx, v167);
                            // Rule at src/isa/riscv64/lower.isle line 141.
                            return Some(v168);
                        }
                        let v26 = C::fits_in_32(ctx, v3);
                        if let Some(v27) = v26 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v151 = constructor_ext_int_if_need(ctx, true, v64, v27);
                            let v152 = constructor_convert_valueregs_reg(ctx, v151);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v153 = constructor_ext_int_if_need(ctx, true, v119, v27);
                            let v154 = constructor_convert_valueregs_reg(ctx, v153);
                            let v155 = constructor_gen_div_overflow(ctx, v152, v154, v27);
                            let v156 = constructor_gen_div_by_zero(ctx, v154);
                            let v158 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v152, v154);
                            let v159 = constructor_output_reg(ctx, v158);
                            // Rule at src/isa/riscv64/lower.isle line 133.
                            return Some(v159);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v141 = C::put_in_regs(ctx, v30.1);
                                let v200 = constructor_ext_int_if_need(ctx, false, v141, I32);
                                let v201 = constructor_convert_valueregs_reg(ctx, v200);
                                let v202 = constructor_gen_div_by_zero(ctx, v201);
                                let v197 = C::put_in_reg(ctx, v30.0);
                                let v203 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v197, v201);
                                let v204 = constructor_output_reg(ctx, v203);
                                // Rule at src/isa/riscv64/lower.isle line 172.
                                return Some(v204);
                            }
                            I64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v169 = C::put_in_reg(ctx, v30.1);
                                let v170 = constructor_gen_div_by_zero(ctx, v169);
                                let v172 = C::put_in_reg(ctx, v30.0);
                                let v162 = C::put_in_reg(ctx, v30.1);
                                let v209 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v172, v162);
                                let v210 = constructor_output_reg(ctx, v209);
                                // Rule at src/isa/riscv64/lower.isle line 183.
                                return Some(v210);
                            }
                            _ => {}
                        }
                        let v175 = C::fits_in_16(ctx, v3);
                        if let Some(v176) = v175 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v141 = C::put_in_regs(ctx, v30.1);
                            let v177 = constructor_ext_int_if_need(ctx, false, v141, v176);
                            let v178 = constructor_convert_valueregs_reg(ctx, v177);
                            let v179 = constructor_gen_div_by_zero(ctx, v178);
                            let v146 = C::put_in_regs(ctx, v30.0);
                            let v181 = constructor_ext_int_if_need(ctx, false, v146, v176);
                            let v182 = constructor_convert_valueregs_reg(ctx, v181);
                            let v183 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v182, v178);
                            let v184 = constructor_output_reg(ctx, v183);
                            // Rule at src/isa/riscv64/lower.isle line 154.
                            return Some(v184);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v141 = C::put_in_regs(ctx, v30.1);
                                let v194 = constructor_ext_int_if_need(ctx, true, v141, I32);
                                let v195 = constructor_convert_valueregs_reg(ctx, v194);
                                let v196 = constructor_gen_div_by_zero(ctx, v195);
                                let v197 = C::put_in_reg(ctx, v30.0);
                                let v198 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v197, v195);
                                let v199 = constructor_output_reg(ctx, v198);
                                // Rule at src/isa/riscv64/lower.isle line 166.
                                return Some(v199);
                            }
                            I64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v169 = C::put_in_reg(ctx, v30.1);
                                let v170 = constructor_gen_div_by_zero(ctx, v169);
                                let v172 = C::put_in_reg(ctx, v30.0);
                                let v162 = C::put_in_reg(ctx, v30.1);
                                let v206 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v172, v162);
                                let v207 = constructor_output_reg(ctx, v206);
                                // Rule at src/isa/riscv64/lower.isle line 178.
                                return Some(v207);
                            }
                            _ => {}
                        }
                        let v175 = C::fits_in_16(ctx, v3);
                        if let Some(v176) = v175 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v141 = C::put_in_regs(ctx, v30.1);
                            let v185 = constructor_ext_int_if_need(ctx, true, v141, v176);
                            let v186 = constructor_convert_valueregs_reg(ctx, v185);
                            let v187 = constructor_gen_div_by_zero(ctx, v186);
                            let v146 = C::put_in_regs(ctx, v30.0);
                            let v189 = constructor_ext_int_if_need(ctx, true, v146, v176);
                            let v190 = constructor_convert_valueregs_reg(ctx, v189);
                            let v191 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v190, v186);
                            let v192 = constructor_output_reg(ctx, v191);
                            // Rule at src/isa/riscv64/lower.isle line 160.
                            return Some(v192);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v42 = C::def_inst(ctx, v30.1);
                            if let Some(v43) = v42 {
                                let v44 = &C::inst_data(ctx, v43);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v45,
                                    imm: v46,
                                } = v44
                                {
                                    if let &Opcode::Iconst = v45 {
                                        let v47 = C::u64_from_imm64(ctx, v46);
                                        let v48 = C::imm12_from_u64(ctx, v47);
                                        if let Some(v49) = v48 {
                                            let v34 = C::put_in_reg(ctx, v30.0);
                                            let v215 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Andi,
                                                v34,
                                                v49,
                                            );
                                            let v216 = constructor_output_reg(ctx, v215);
                                            // Rule at src/isa/riscv64/lower.isle line 193.
                                            return Some(v216);
                                        }
                                    }
                                }
                            }
                            let v54 = C::def_inst(ctx, v30.0);
                            if let Some(v55) = v54 {
                                let v56 = &C::inst_data(ctx, v55);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v57,
                                    imm: v58,
                                } = v56
                                {
                                    if let &Opcode::Iconst = v57 {
                                        let v59 = C::u64_from_imm64(ctx, v58);
                                        let v60 = C::imm12_from_u64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v169 = C::put_in_reg(ctx, v30.1);
                                            let v217 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Andi,
                                                v169,
                                                v61,
                                            );
                                            let v218 = constructor_output_reg(ctx, v217);
                                            // Rule at src/isa/riscv64/lower.isle line 196.
                                            return Some(v218);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v219 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::And, v64, v102);
                                let v220 = C::output(ctx, v219);
                                // Rule at src/isa/riscv64/lower.isle line 199.
                                return Some(v220);
                            }
                            F32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v221 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::And,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v222 = constructor_output_reg(ctx, v221);
                                // Rule at src/isa/riscv64/lower.isle line 202.
                                return Some(v222);
                            }
                            F64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v223 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::And,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v224 = constructor_output_reg(ctx, v223);
                                // Rule at src/isa/riscv64/lower.isle line 204.
                                return Some(v224);
                            }
                            _ => {}
                        }
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v212 = constructor_alu_rrr(ctx, &AluOPRRR::And, v34, v35);
                            let v213 = constructor_output_reg(ctx, v212);
                            // Rule at src/isa/riscv64/lower.isle line 189.
                            return Some(v213);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v42 = C::def_inst(ctx, v30.1);
                            if let Some(v43) = v42 {
                                let v44 = &C::inst_data(ctx, v43);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v45,
                                    imm: v46,
                                } = v44
                                {
                                    if let &Opcode::Iconst = v45 {
                                        let v47 = C::u64_from_imm64(ctx, v46);
                                        let v48 = C::imm12_from_u64(ctx, v47);
                                        if let Some(v49) = v48 {
                                            let v34 = C::put_in_reg(ctx, v30.0);
                                            let v229 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Ori,
                                                v34,
                                                v49,
                                            );
                                            let v230 = constructor_output_reg(ctx, v229);
                                            // Rule at src/isa/riscv64/lower.isle line 213.
                                            return Some(v230);
                                        }
                                    }
                                }
                            }
                            let v54 = C::def_inst(ctx, v30.0);
                            if let Some(v55) = v54 {
                                let v56 = &C::inst_data(ctx, v55);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v57,
                                    imm: v58,
                                } = v56
                                {
                                    if let &Opcode::Iconst = v57 {
                                        let v59 = C::u64_from_imm64(ctx, v58);
                                        let v60 = C::imm12_from_u64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v169 = C::put_in_reg(ctx, v30.1);
                                            let v231 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Ori,
                                                v169,
                                                v61,
                                            );
                                            let v232 = constructor_output_reg(ctx, v231);
                                            // Rule at src/isa/riscv64/lower.isle line 216.
                                            return Some(v232);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v233 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::Or, v64, v102);
                                let v234 = C::output(ctx, v233);
                                // Rule at src/isa/riscv64/lower.isle line 218.
                                return Some(v234);
                            }
                            F32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v235 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Or,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v236 = constructor_output_reg(ctx, v235);
                                // Rule at src/isa/riscv64/lower.isle line 220.
                                return Some(v236);
                            }
                            F64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v237 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Or,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v238 = constructor_output_reg(ctx, v237);
                                // Rule at src/isa/riscv64/lower.isle line 222.
                                return Some(v238);
                            }
                            _ => {}
                        }
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v226 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v34, v35);
                            let v227 = constructor_output_reg(ctx, v226);
                            // Rule at src/isa/riscv64/lower.isle line 209.
                            return Some(v227);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v42 = C::def_inst(ctx, v30.1);
                            if let Some(v43) = v42 {
                                let v44 = &C::inst_data(ctx, v43);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v45,
                                    imm: v46,
                                } = v44
                                {
                                    if let &Opcode::Iconst = v45 {
                                        let v47 = C::u64_from_imm64(ctx, v46);
                                        let v48 = C::imm12_from_u64(ctx, v47);
                                        if let Some(v49) = v48 {
                                            let v34 = C::put_in_reg(ctx, v30.0);
                                            let v243 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Xori,
                                                v34,
                                                v49,
                                            );
                                            let v244 = constructor_output_reg(ctx, v243);
                                            // Rule at src/isa/riscv64/lower.isle line 231.
                                            return Some(v244);
                                        }
                                    }
                                }
                            }
                            let v54 = C::def_inst(ctx, v30.0);
                            if let Some(v55) = v54 {
                                let v56 = &C::inst_data(ctx, v55);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v57,
                                    imm: v58,
                                } = v56
                                {
                                    if let &Opcode::Iconst = v57 {
                                        let v59 = C::u64_from_imm64(ctx, v58);
                                        let v60 = C::imm12_from_u64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v169 = C::put_in_reg(ctx, v30.1);
                                            let v245 = constructor_alu_rr_imm12(
                                                ctx,
                                                &AluOPRRI::Xori,
                                                v169,
                                                v61,
                                            );
                                            let v246 = constructor_output_reg(ctx, v245);
                                            // Rule at src/isa/riscv64/lower.isle line 234.
                                            return Some(v246);
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v247 =
                                    constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v64, v102);
                                let v248 = C::output(ctx, v247);
                                // Rule at src/isa/riscv64/lower.isle line 236.
                                return Some(v248);
                            }
                            F32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v249 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Xor,
                                    v34,
                                    v35,
                                    F32,
                                );
                                let v250 = constructor_output_reg(ctx, v249);
                                // Rule at src/isa/riscv64/lower.isle line 238.
                                return Some(v250);
                            }
                            F64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v35 = C::put_in_reg(ctx, v30.1);
                                let v251 = constructor_lower_float_binary(
                                    ctx,
                                    &AluOPRRR::Xor,
                                    v34,
                                    v35,
                                    F64,
                                );
                                let v252 = constructor_output_reg(ctx, v251);
                                // Rule at src/isa/riscv64/lower.isle line 240.
                                return Some(v252);
                            }
                            _ => {}
                        }
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v240 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v34, v35);
                            let v241 = constructor_output_reg(ctx, v240);
                            // Rule at src/isa/riscv64/lower.isle line 227.
                            return Some(v241);
                        }
                    }
                }
                &Opcode::BandNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v66 = C::value_regs_get(ctx, v64, 0x0);
                            let v67 = C::put_in_regs(ctx, v30.1);
                            let v68 = C::value_regs_get(ctx, v67, 0x0);
                            let v289 = constructor_gen_andn(ctx, v66, v68);
                            let v290 = C::put_in_regs(ctx, v30.0);
                            let v291 = C::value_regs_get(ctx, v290, 0x1);
                            let v292 = C::put_in_regs(ctx, v30.1);
                            let v293 = C::value_regs_get(ctx, v292, 0x1);
                            let v294 = constructor_gen_andn(ctx, v291, v293);
                            let v295 = C::value_regs(ctx, v289, v294);
                            let v296 = C::output(ctx, v295);
                            // Rule at src/isa/riscv64/lower.isle line 295.
                            return Some(v296);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v287 = constructor_gen_andn(ctx, v34, v35);
                            let v288 = constructor_output_reg(ctx, v287);
                            // Rule at src/isa/riscv64/lower.isle line 293.
                            return Some(v288);
                        }
                    }
                }
                &Opcode::BorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v66 = C::value_regs_get(ctx, v64, 0x0);
                            let v67 = C::put_in_regs(ctx, v30.1);
                            let v68 = C::value_regs_get(ctx, v67, 0x0);
                            let v405 = constructor_gen_orn(ctx, v66, v68);
                            let v290 = C::put_in_regs(ctx, v30.0);
                            let v291 = C::value_regs_get(ctx, v290, 0x1);
                            let v292 = C::put_in_regs(ctx, v30.1);
                            let v293 = C::value_regs_get(ctx, v292, 0x1);
                            let v406 = constructor_gen_orn(ctx, v291, v293);
                            let v407 = C::value_regs(ctx, v405, v406);
                            let v408 = C::output(ctx, v407);
                            // Rule at src/isa/riscv64/lower.isle line 416.
                            return Some(v408);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v403 = constructor_gen_orn(ctx, v34, v35);
                            let v404 = constructor_output_reg(ctx, v403);
                            // Rule at src/isa/riscv64/lower.isle line 413.
                            return Some(v404);
                        }
                    }
                }
                &Opcode::BxorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v66 = C::value_regs_get(ctx, v64, 0x0);
                            let v67 = C::put_in_regs(ctx, v30.1);
                            let v68 = C::value_regs_get(ctx, v67, 0x0);
                            let v399 = constructor_gen_xor_not(ctx, v66, v68);
                            let v290 = C::put_in_regs(ctx, v30.0);
                            let v291 = C::value_regs_get(ctx, v290, 0x1);
                            let v292 = C::put_in_regs(ctx, v30.1);
                            let v293 = C::value_regs_get(ctx, v292, 0x1);
                            let v400 = constructor_gen_xor_not(ctx, v291, v293);
                            let v401 = C::value_regs(ctx, v399, v400);
                            let v402 = C::output(ctx, v401);
                            // Rule at src/isa/riscv64/lower.isle line 404.
                            return Some(v402);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v35 = C::put_in_reg(ctx, v30.1);
                            let v397 = constructor_gen_xor_not(ctx, v34, v35);
                            let v398 = constructor_output_reg(ctx, v397);
                            // Rule at src/isa/riscv64/lower.isle line 402.
                            return Some(v398);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v102 = C::put_in_regs(ctx, v30.1);
                            let v391 = constructor_lower_i128_rotl(ctx, v64, v102);
                            let v392 = C::output(ctx, v391);
                            // Rule at src/isa/riscv64/lower.isle line 389.
                            return Some(v392);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v125 = constructor_ext_int_if_need(ctx, false, v64, v39);
                            let v126 = constructor_convert_valueregs_reg(ctx, v125);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v132 = C::value_regs_get(ctx, v119, 0x0);
                            let v389 = constructor_lower_rotl(ctx, v39, v126, v132);
                            let v390 = constructor_output_reg(ctx, v389);
                            // Rule at src/isa/riscv64/lower.isle line 386.
                            return Some(v390);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v102 = C::put_in_regs(ctx, v30.1);
                            let v395 = constructor_lower_i128_rotr(ctx, v64, v102);
                            let v396 = C::output(ctx, v395);
                            // Rule at src/isa/riscv64/lower.isle line 396.
                            return Some(v396);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v64 = C::put_in_regs(ctx, v30.0);
                            let v125 = constructor_ext_int_if_need(ctx, false, v64, v39);
                            let v126 = constructor_convert_valueregs_reg(ctx, v125);
                            let v119 = C::put_in_regs(ctx, v30.1);
                            let v132 = C::value_regs_get(ctx, v119, 0x0);
                            let v393 = constructor_lower_rotr(ctx, v39, v126, v132);
                            let v394 = constructor_output_reg(ctx, v393);
                            // Rule at src/isa/riscv64/lower.isle line 393.
                            return Some(v394);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v308 = C::imm12_and(ctx, v49, 0x7);
                                                let v309 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Slliw,
                                                    v34,
                                                    v308,
                                                );
                                                let v310 = constructor_output_reg(ctx, v309);
                                                // Rule at src/isa/riscv64/lower.isle line 311.
                                                return Some(v310);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v304 = constructor_alu_andi(ctx, v302, 0x7);
                                let v305 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v34, v304);
                                let v306 = constructor_output_reg(ctx, v305);
                                // Rule at src/isa/riscv64/lower.isle line 308.
                                return Some(v306);
                            }
                            I16 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v315 = C::imm12_and(ctx, v49, 0xF);
                                                let v316 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Slliw,
                                                    v34,
                                                    v315,
                                                );
                                                let v317 = constructor_output_reg(ctx, v316);
                                                // Rule at src/isa/riscv64/lower.isle line 317.
                                                return Some(v317);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v312 = constructor_alu_andi(ctx, v302, 0xF);
                                let v313 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v34, v312);
                                let v314 = constructor_output_reg(ctx, v313);
                                // Rule at src/isa/riscv64/lower.isle line 314.
                                return Some(v314);
                            }
                            I32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v320 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Slliw,
                                                    v34,
                                                    v49,
                                                );
                                                let v321 = constructor_output_reg(ctx, v320);
                                                // Rule at src/isa/riscv64/lower.isle line 322.
                                                return Some(v321);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v318 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v34, v302);
                                let v319 = constructor_output_reg(ctx, v318);
                                // Rule at src/isa/riscv64/lower.isle line 320.
                                return Some(v319);
                            }
                            I64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v323 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Slli,
                                                    v34,
                                                    v49,
                                                );
                                                let v324 = constructor_output_reg(ctx, v323);
                                                // Rule at src/isa/riscv64/lower.isle line 325.
                                                return Some(v324);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v326 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v34, v302);
                                let v327 = constructor_output_reg(ctx, v326);
                                // Rule at src/isa/riscv64/lower.isle line 327.
                                return Some(v327);
                            }
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v328 = constructor_lower_i128_ishl(ctx, v64, v102);
                                let v329 = C::output(ctx, v328);
                                // Rule at src/isa/riscv64/lower.isle line 330.
                                return Some(v329);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v64 = C::put_in_regs(ctx, v30.0);
                                                let v332 = constructor_ext_int_if_need(
                                                    ctx, false, v64, I8,
                                                );
                                                let v333 =
                                                    constructor_convert_valueregs_reg(ctx, v332);
                                                let v338 = C::imm12_and(ctx, v49, 0x7);
                                                let v339 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::SrliW,
                                                    v333,
                                                    v338,
                                                );
                                                let v340 = constructor_output_reg(ctx, v339);
                                                // Rule at src/isa/riscv64/lower.isle line 337.
                                                return Some(v340);
                                            }
                                        }
                                    }
                                }
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v332 = constructor_ext_int_if_need(ctx, false, v64, I8);
                                let v333 = constructor_convert_valueregs_reg(ctx, v332);
                                let v119 = C::put_in_regs(ctx, v30.1);
                                let v132 = C::value_regs_get(ctx, v119, 0x0);
                                let v334 = constructor_alu_andi(ctx, v132, 0x7);
                                let v335 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v333, v334);
                                let v336 = constructor_output_reg(ctx, v335);
                                // Rule at src/isa/riscv64/lower.isle line 334.
                                return Some(v336);
                            }
                            I16 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v64 = C::put_in_regs(ctx, v30.0);
                                                let v342 = constructor_ext_int_if_need(
                                                    ctx, false, v64, I16,
                                                );
                                                let v343 =
                                                    constructor_convert_valueregs_reg(ctx, v342);
                                                let v347 = C::imm12_and(ctx, v49, 0xF);
                                                let v348 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::SrliW,
                                                    v343,
                                                    v347,
                                                );
                                                let v349 = constructor_output_reg(ctx, v348);
                                                // Rule at src/isa/riscv64/lower.isle line 343.
                                                return Some(v349);
                                            }
                                        }
                                    }
                                }
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v342 = constructor_ext_int_if_need(ctx, false, v64, I16);
                                let v343 = constructor_convert_valueregs_reg(ctx, v342);
                                let v119 = C::put_in_regs(ctx, v30.1);
                                let v132 = C::value_regs_get(ctx, v119, 0x0);
                                let v344 = constructor_alu_andi(ctx, v132, 0xF);
                                let v345 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v343, v344);
                                let v346 = constructor_output_reg(ctx, v345);
                                // Rule at src/isa/riscv64/lower.isle line 340.
                                return Some(v346);
                            }
                            I32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v352 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::SrliW,
                                                    v34,
                                                    v49,
                                                );
                                                let v353 = constructor_output_reg(ctx, v352);
                                                // Rule at src/isa/riscv64/lower.isle line 348.
                                                return Some(v353);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v350 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v34, v302);
                                let v351 = constructor_output_reg(ctx, v350);
                                // Rule at src/isa/riscv64/lower.isle line 346.
                                return Some(v351);
                            }
                            I64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v355 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Srli,
                                                    v34,
                                                    v49,
                                                );
                                                let v356 = constructor_output_reg(ctx, v355);
                                                // Rule at src/isa/riscv64/lower.isle line 351.
                                                return Some(v356);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v358 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v34, v302);
                                let v359 = constructor_output_reg(ctx, v358);
                                // Rule at src/isa/riscv64/lower.isle line 353.
                                return Some(v359);
                            }
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v360 = constructor_lower_i128_ushr(ctx, v64, v102);
                                let v361 = C::output(ctx, v360);
                                // Rule at src/isa/riscv64/lower.isle line 356.
                                return Some(v361);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v64 = C::put_in_regs(ctx, v30.0);
                                                let v363 =
                                                    constructor_ext_int_if_need(ctx, true, v64, I8);
                                                let v364 =
                                                    constructor_convert_valueregs_reg(ctx, v363);
                                                let v338 = C::imm12_and(ctx, v49, 0x7);
                                                let v368 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Srai,
                                                    v364,
                                                    v338,
                                                );
                                                let v369 = constructor_output_reg(ctx, v368);
                                                // Rule at src/isa/riscv64/lower.isle line 364.
                                                return Some(v369);
                                            }
                                        }
                                    }
                                }
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v363 = constructor_ext_int_if_need(ctx, true, v64, I8);
                                let v364 = constructor_convert_valueregs_reg(ctx, v363);
                                let v119 = C::put_in_regs(ctx, v30.1);
                                let v132 = C::value_regs_get(ctx, v119, 0x0);
                                let v334 = constructor_alu_andi(ctx, v132, 0x7);
                                let v365 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v364, v334);
                                let v366 = constructor_output_reg(ctx, v365);
                                // Rule at src/isa/riscv64/lower.isle line 361.
                                return Some(v366);
                            }
                            I16 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v64 = C::put_in_regs(ctx, v30.0);
                                                let v370 = constructor_ext_int_if_need(
                                                    ctx, true, v64, I16,
                                                );
                                                let v371 =
                                                    constructor_convert_valueregs_reg(ctx, v370);
                                                let v347 = C::imm12_and(ctx, v49, 0xF);
                                                let v374 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Srai,
                                                    v371,
                                                    v347,
                                                );
                                                let v375 = constructor_output_reg(ctx, v374);
                                                // Rule at src/isa/riscv64/lower.isle line 370.
                                                return Some(v375);
                                            }
                                        }
                                    }
                                }
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v370 = constructor_ext_int_if_need(ctx, true, v64, I16);
                                let v371 = constructor_convert_valueregs_reg(ctx, v370);
                                let v119 = C::put_in_regs(ctx, v30.1);
                                let v132 = C::value_regs_get(ctx, v119, 0x0);
                                let v344 = constructor_alu_andi(ctx, v132, 0xF);
                                let v372 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v371, v344);
                                let v373 = constructor_output_reg(ctx, v372);
                                // Rule at src/isa/riscv64/lower.isle line 367.
                                return Some(v373);
                            }
                            I32 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v380 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Sraiw,
                                                    v34,
                                                    v49,
                                                );
                                                let v381 = constructor_output_reg(ctx, v380);
                                                // Rule at src/isa/riscv64/lower.isle line 375.
                                                return Some(v381);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v377 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v34, v302);
                                let v378 = constructor_output_reg(ctx, v377);
                                // Rule at src/isa/riscv64/lower.isle line 373.
                                return Some(v378);
                            }
                            I64 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v42 = C::def_inst(ctx, v30.1);
                                if let Some(v43) = v42 {
                                    let v44 = &C::inst_data(ctx, v43);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v45,
                                        imm: v46,
                                    } = v44
                                    {
                                        if let &Opcode::Iconst = v45 {
                                            let v47 = C::u64_from_imm64(ctx, v46);
                                            let v48 = C::imm12_from_u64(ctx, v47);
                                            if let Some(v49) = v48 {
                                                let v34 = C::put_in_reg(ctx, v30.0);
                                                let v384 = constructor_alu_rr_imm12(
                                                    ctx,
                                                    &AluOPRRI::Srai,
                                                    v34,
                                                    v49,
                                                );
                                                let v385 = constructor_output_reg(ctx, v384);
                                                // Rule at src/isa/riscv64/lower.isle line 379.
                                                return Some(v385);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v382 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v34, v302);
                                let v383 = constructor_output_reg(ctx, v382);
                                // Rule at src/isa/riscv64/lower.isle line 377.
                                return Some(v383);
                            }
                            I128 => {
                                let v30 = C::unpack_value_array_2(ctx, v29);
                                let v64 = C::put_in_regs(ctx, v30.0);
                                let v102 = C::put_in_regs(ctx, v30.1);
                                let v302 = C::value_regs_get(ctx, v102, 0x0);
                                let v386 = C::value_reg(ctx, v302);
                                let v387 = constructor_lower_i128_sshr(ctx, v64, v386);
                                let v388 = C::output(ctx, v387);
                                // Rule at src/isa/riscv64/lower.isle line 381.
                                return Some(v388);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v538 = &constructor_f_arithmatic_op(ctx, v3, &Opcode::Fadd);
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v51 = C::put_in_reg(ctx, v30.0);
                        let v421 = C::put_in_reg(ctx, v30.1);
                        let v539 = constructor_fpu_rrr(ctx, v538, v3, v51, v421);
                        let v540 = constructor_output_reg(ctx, v539);
                        // Rule at src/isa/riscv64/lower.isle line 566.
                        return Some(v540);
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v542 = &constructor_f_arithmatic_op(ctx, v3, &Opcode::Fsub);
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v51 = C::put_in_reg(ctx, v30.0);
                        let v421 = C::put_in_reg(ctx, v30.1);
                        let v543 = constructor_fpu_rrr(ctx, v542, v3, v51, v421);
                        let v544 = constructor_output_reg(ctx, v543);
                        // Rule at src/isa/riscv64/lower.isle line 569.
                        return Some(v544);
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v546 = &constructor_f_arithmatic_op(ctx, v3, &Opcode::Fmul);
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v51 = C::put_in_reg(ctx, v30.0);
                        let v421 = C::put_in_reg(ctx, v30.1);
                        let v547 = constructor_fpu_rrr(ctx, v546, v3, v51, v421);
                        let v548 = constructor_output_reg(ctx, v547);
                        // Rule at src/isa/riscv64/lower.isle line 572.
                        return Some(v548);
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v550 = &constructor_f_arithmatic_op(ctx, v3, &Opcode::Fdiv);
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v51 = C::put_in_reg(ctx, v30.0);
                        let v421 = C::put_in_reg(ctx, v30.1);
                        let v551 = constructor_fpu_rrr(ctx, v550, v3, v51, v421);
                        let v552 = constructor_output_reg(ctx, v551);
                        // Rule at src/isa/riscv64/lower.isle line 575.
                        return Some(v552);
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v420 = &constructor_f_copysign_op(ctx, v3);
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v51 = C::put_in_reg(ctx, v30.0);
                        let v421 = C::put_in_reg(ctx, v30.1);
                        let v422 = constructor_fpu_rrr(ctx, v420, v3, v51, v421);
                        let v423 = constructor_output_reg(ctx, v422);
                        // Rule at src/isa/riscv64/lower.isle line 441.
                        return Some(v423);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v34 = C::put_in_reg(ctx, v30.0);
                        let v35 = C::put_in_reg(ctx, v30.1);
                        let v3 = C::value_type(ctx, v2);
                        let v554 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Min, v34, v35, v3);
                        let v555 = constructor_output_reg(ctx, v554);
                        // Rule at src/isa/riscv64/lower.isle line 579.
                        return Some(v555);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v34 = C::put_in_reg(ctx, v30.0);
                        let v35 = C::put_in_reg(ctx, v30.1);
                        let v3 = C::value_type(ctx, v2);
                        let v556 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Min,
                            v34,
                            v35,
                            v3,
                        );
                        let v557 = constructor_output_reg(ctx, v556);
                        // Rule at src/isa/riscv64/lower.isle line 583.
                        return Some(v557);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v34 = C::put_in_reg(ctx, v30.0);
                        let v35 = C::put_in_reg(ctx, v30.1);
                        let v3 = C::value_type(ctx, v2);
                        let v559 =
                            constructor_gen_float_select(ctx, &FloatSelectOP::Max, v34, v35, v3);
                        let v560 = constructor_output_reg(ctx, v559);
                        // Rule at src/isa/riscv64/lower.isle line 587.
                        return Some(v560);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v30 = C::unpack_value_array_2(ctx, v29);
                        let v34 = C::put_in_reg(ctx, v30.0);
                        let v35 = C::put_in_reg(ctx, v30.1);
                        let v3 = C::value_type(ctx, v2);
                        let v561 = constructor_gen_float_select_pseudo(
                            ctx,
                            &FloatSelectOP::Max,
                            v34,
                            v35,
                            v3,
                        );
                        let v562 = constructor_output_reg(ctx, v561);
                        // Rule at src/isa/riscv64/lower.isle line 591.
                        return Some(v562);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v30 = C::unpack_value_array_2(ctx, v29);
                            let v34 = C::put_in_reg(ctx, v30.0);
                            let v611 = C::gen_move2(ctx, v34, I64, I64);
                            let v421 = C::put_in_reg(ctx, v30.1);
                            let v612 = C::gen_move2(ctx, v421, I64, I64);
                            let v613 = C::value_regs(ctx, v611, v612);
                            let v614 = C::output(ctx, v613);
                            // Rule at src/isa/riscv64/lower.isle line 636.
                            return Some(v614);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v794,
            args: v795,
            func_ref: v796,
        } => {
            if let &Opcode::Call = v794 {
                let v798 = C::func_ref_data(ctx, v796);
                let v797 = C::value_list_slice(ctx, v795);
                let v802 = C::gen_call(ctx, v798.0, v798.1, v798.2, v797);
                // Rule at src/isa/riscv64/lower.isle line 867.
                return Some(v802);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v803,
            args: v804,
            sig_ref: v805,
        } => {
            if let &Opcode::CallIndirect = v803 {
                let v806 = C::value_list_slice(ctx, v804);
                let v807 = C::value_slice_unwrap(ctx, v806);
                if let Some(v808) = v807 {
                    let v811 = C::gen_call_indirect(ctx, v805, v808.0, v808.1);
                    // Rule at src/isa/riscv64/lower.isle line 870.
                    return Some(v811);
                }
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v704,
            args: ref v705,
            cond: ref v706,
        } => {
            if let &Opcode::Fcmp = v704 {
                let v707 = C::unpack_value_array_2(ctx, v705);
                let v711 = C::put_in_reg(ctx, v707.0);
                let v712 = C::put_in_reg(ctx, v707.1);
                let v710 = C::value_type(ctx, v707.0);
                let v713 = &constructor_emit_fcmp(ctx, v706, v710, v711, v712);
                let v714 = constructor_cmp_value(ctx, v713);
                let v715 = constructor_output_reg(ctx, v714);
                // Rule at src/isa/riscv64/lower.isle line 757.
                return Some(v715);
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v716,
            func_ref: v717,
        } => {
            if let &Opcode::FuncAddr = v716 {
                let v718 = C::func_ref_data(ctx, v717);
                let v723 = C::load_ext_name(ctx, v718.1, 0x0);
                let v724 = constructor_output_reg(ctx, v723);
                // Rule at src/isa/riscv64/lower.isle line 762.
                return Some(v724);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v83,
            args: ref v84,
            code: ref v85,
        } => {
            if let &Opcode::UaddOverflowTrap = v83 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v38 = C::fits_in_64(ctx, v3);
                    if let Some(v39) = v38 {
                        let v86 = C::unpack_value_array_2(ctx, v84);
                        let v89 = C::put_in_reg(ctx, v86.0);
                        let v90 = C::put_in_reg(ctx, v86.1);
                        let v91 = constructor_lower_uadd_overflow(ctx, v89, v90, v39);
                        let v92 = C::value_regs_get(ctx, v91, 0x1);
                        let v93 = constructor_gen_trapif(ctx, v92, v85);
                        let v94 = C::value_regs_get(ctx, v91, 0x0);
                        let v95 = constructor_output_reg(ctx, v94);
                        // Rule at src/isa/riscv64/lower.isle line 58.
                        return Some(v95);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v693,
            args: ref v694,
            cond: ref v695,
        } => {
            if let &Opcode::Icmp = v693 {
                let v696 = C::unpack_value_array_2(ctx, v694);
                let v700 = C::put_in_regs(ctx, v696.0);
                let v701 = C::put_in_regs(ctx, v696.1);
                let v699 = C::value_type(ctx, v696.0);
                let v702 = constructor_lower_icmp(ctx, v695, v700, v701, v699);
                let v703 = constructor_output_reg(ctx, v702);
                // Rule at src/isa/riscv64/lower.isle line 752.
                return Some(v703);
            }
        }
        &InstructionData::Load {
            opcode: ref v641,
            arg: v642,
            flags: v643,
            offset: v644,
        } => {
            match v641 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v645 = C::put_in_reg(ctx, v642);
                            let v670 = constructor_gen_load_128(ctx, v645, v644, v643);
                            let v671 = C::output(ctx, v670);
                            // Rule at src/isa/riscv64/lower.isle line 714.
                            return Some(v671);
                        }
                        let v645 = C::put_in_reg(ctx, v642);
                        let v667 = &C::load_op(ctx, v3);
                        let v668 = constructor_gen_load(ctx, v645, v644, v667, v643, v3);
                        let v669 = constructor_output_reg(ctx, v668);
                        // Rule at src/isa/riscv64/lower.isle line 710.
                        return Some(v669);
                    }
                }
                &Opcode::Uload8 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v647 = &constructor_int_load_op(ctx, false, 0x8);
                    let v648 = constructor_gen_load(ctx, v645, v644, v647, v643, I64);
                    let v649 = constructor_output_reg(ctx, v648);
                    // Rule at src/isa/riscv64/lower.isle line 683.
                    return Some(v649);
                }
                &Opcode::Sload8 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v650 = &constructor_int_load_op(ctx, true, 0x8);
                    let v651 = constructor_gen_load(ctx, v645, v644, v650, v643, I64);
                    let v652 = constructor_output_reg(ctx, v651);
                    // Rule at src/isa/riscv64/lower.isle line 687.
                    return Some(v652);
                }
                &Opcode::Uload16 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v654 = &constructor_int_load_op(ctx, false, 0x10);
                    let v655 = constructor_gen_load(ctx, v645, v644, v654, v643, I64);
                    let v656 = constructor_output_reg(ctx, v655);
                    // Rule at src/isa/riscv64/lower.isle line 691.
                    return Some(v656);
                }
                &Opcode::Sload16 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v657 = &constructor_int_load_op(ctx, true, 0x10);
                    let v658 = constructor_gen_load(ctx, v645, v644, v657, v643, I64);
                    let v659 = constructor_output_reg(ctx, v658);
                    // Rule at src/isa/riscv64/lower.isle line 696.
                    return Some(v659);
                }
                &Opcode::Uload32 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v661 = &constructor_int_load_op(ctx, false, 0x20);
                    let v662 = constructor_gen_load(ctx, v645, v644, v661, v643, I64);
                    let v663 = constructor_output_reg(ctx, v662);
                    // Rule at src/isa/riscv64/lower.isle line 701.
                    return Some(v663);
                }
                &Opcode::Sload32 => {
                    let v645 = C::put_in_reg(ctx, v642);
                    let v664 = &constructor_int_load_op(ctx, true, 0x20);
                    let v665 = constructor_gen_load(ctx, v645, v644, v664, v643, I64);
                    let v666 = constructor_output_reg(ctx, v665);
                    // Rule at src/isa/riscv64/lower.isle line 706.
                    return Some(v666);
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v491,
            arg: v492,
            flags: v493,
        } => {
            match v491 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v749 = C::put_in_regs(ctx, v492);
                        let v748 = C::value_type(ctx, v492);
                        let v3 = C::value_type(ctx, v2);
                        let v750 = C::gen_moves(ctx, v749, v748, v3);
                        let v751 = C::output(ctx, v750);
                        // Rule at src/isa/riscv64/lower.isle line 802.
                        return Some(v751);
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v445 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v446) = v445 {
                            let v494 = C::put_in_reg(ctx, v492);
                            let v495 = constructor_gen_atomic_load(ctx, v494, v446);
                            let v496 = constructor_output_reg(ctx, v495);
                            // Rule at src/isa/riscv64/lower.isle line 516.
                            return Some(v496);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v778,
            args: v779,
        } => {
            if let &Opcode::Return = v778 {
                let v780 = C::value_list_slice(ctx, v779);
                let v781 = C::value_slice_len(ctx, v780);
                let v782 = C::range(ctx, 0x0, v781);
                let v783 = constructor_lower_return(ctx, v782, v780);
                // Rule at src/isa/riscv64/lower.isle line 845.
                return Some(v783);
            }
        }
        &InstructionData::NullAry { opcode: ref v22 } => {
            match v22 {
                &Opcode::Debugtrap => {
                    let v632 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v633 = constructor_side_effect(ctx, &v632);
                    // Rule at src/isa/riscv64/lower.isle line 663.
                    return Some(v633);
                }
                &Opcode::GetFramePointer => {
                    let v784 = C::fp_reg(ctx);
                    let v785 = constructor_gen_mov_from_preg(ctx, v784);
                    let v786 = constructor_output_reg(ctx, v785);
                    // Rule at src/isa/riscv64/lower.isle line 851.
                    return Some(v786);
                }
                &Opcode::GetStackPointer => {
                    let v787 = C::sp_reg(ctx);
                    let v788 = constructor_gen_mov_from_preg(ctx, v787);
                    let v789 = constructor_output_reg(ctx, v788);
                    // Rule at src/isa/riscv64/lower.isle line 854.
                    return Some(v789);
                }
                &Opcode::GetReturnAddress => {
                    let v790 = C::load_ra(ctx);
                    let v791 = constructor_output_reg(ctx, v790);
                    // Rule at src/isa/riscv64/lower.isle line 857.
                    return Some(v791);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v24 = C::imm(ctx, v3, 0x0);
                        let v25 = constructor_output_reg(ctx, v24);
                        // Rule at src/isa/riscv64/lower.isle line 24.
                        return Some(v25);
                    }
                }
                &Opcode::Fence => {
                    let v635 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v636 = SideEffectNoResult::Inst { inst: v635 };
                    let v637 = constructor_side_effect(ctx, &v636);
                    // Rule at src/isa/riscv64/lower.isle line 668.
                    return Some(v637);
                }
                _ => {}
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v563,
            stack_slot: v564,
            offset: v565,
        } => {
            if let &Opcode::StackAddr = v563 {
                let v566 = C::gen_stack_addr(ctx, v564, v565);
                let v567 = constructor_output_reg(ctx, v566);
                // Rule at src/isa/riscv64/lower.isle line 596.
                return Some(v567);
            }
        }
        &InstructionData::Store {
            opcode: ref v672,
            args: ref v673,
            flags: v674,
            offset: v675,
        } => {
            match v672 {
                &Opcode::Store => {
                    let v676 = C::unpack_value_array_2(ctx, v673);
                    let v687 = C::value_type(ctx, v676.0);
                    if v687 == I128 {
                        let v679 = C::put_in_reg(ctx, v676.1);
                        let v691 = C::put_in_regs(ctx, v676.0);
                        let v692 = constructor_gen_store_128(ctx, v679, v675, v674, v691);
                        // Rule at src/isa/riscv64/lower.isle line 738.
                        return Some(v692);
                    }
                    let v679 = C::put_in_reg(ctx, v676.1);
                    let v688 = &C::store_op(ctx, v687);
                    let v689 = C::put_in_reg(ctx, v676.0);
                    let v690 = constructor_gen_store(ctx, v679, v675, v688, v674, v689);
                    // Rule at src/isa/riscv64/lower.isle line 734.
                    return Some(v690);
                }
                &Opcode::Istore8 => {
                    let v676 = C::unpack_value_array_2(ctx, v673);
                    let v679 = C::put_in_reg(ctx, v676.1);
                    let v681 = C::put_in_reg(ctx, v676.0);
                    let v682 = constructor_gen_store(ctx, v679, v675, &StoreOP::Sb, v674, v681);
                    // Rule at src/isa/riscv64/lower.isle line 720.
                    return Some(v682);
                }
                &Opcode::Istore16 => {
                    let v676 = C::unpack_value_array_2(ctx, v673);
                    let v679 = C::put_in_reg(ctx, v676.1);
                    let v681 = C::put_in_reg(ctx, v676.0);
                    let v684 = constructor_gen_store(ctx, v679, v675, &StoreOP::Sh, v674, v681);
                    // Rule at src/isa/riscv64/lower.isle line 724.
                    return Some(v684);
                }
                &Opcode::Istore32 => {
                    let v676 = C::unpack_value_array_2(ctx, v673);
                    let v679 = C::put_in_reg(ctx, v676.1);
                    let v681 = C::put_in_reg(ctx, v676.0);
                    let v686 = constructor_gen_store(ctx, v679, v675, &StoreOP::Sw, v674, v681);
                    // Rule at src/isa/riscv64/lower.isle line 729.
                    return Some(v686);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v497,
            args: ref v498,
            flags: v499,
        } => {
            if let &Opcode::AtomicStore = v497 {
                let v500 = C::unpack_value_array_2(ctx, v498);
                let v503 = C::value_type(ctx, v500.0);
                let v504 = C::valid_atomic_transaction(ctx, v503);
                if let Some(v505) = v504 {
                    let v506 = C::put_in_reg(ctx, v500.1);
                    let v507 = C::put_in_reg(ctx, v500.0);
                    let v508 = constructor_gen_atomic_store(ctx, v506, v505, v507);
                    // Rule at src/isa/riscv64/lower.isle line 522.
                    return Some(v508);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v424,
            args: ref v425,
        } => {
            match v424 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v426 = C::unpack_value_array_3(ctx, v425);
                            let v582 = C::def_inst(ctx, v426.0);
                            if let Some(v583) = v582 {
                                let v584 = &C::inst_data(ctx, v583);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v585,
                                    args: ref v586,
                                    cond: ref v587,
                                } = v584
                                {
                                    if let &Opcode::Icmp = v585 {
                                        let v588 = C::unpack_value_array_2(ctx, v586);
                                        let v592 = C::put_in_regs(ctx, v588.0);
                                        let v591 = C::value_type(ctx, v588.1);
                                        let v593 = constructor_normalize_cmp_value(ctx, v591, v592);
                                        let v594 = constructor_convert_valueregs_reg(ctx, v593);
                                        let v595 = C::put_in_regs(ctx, v588.1);
                                        let v596 = constructor_normalize_cmp_value(ctx, v591, v595);
                                        let v597 = constructor_convert_valueregs_reg(ctx, v596);
                                        let v598 = C::put_in_reg(ctx, v426.1);
                                        let v599 = C::put_in_reg(ctx, v426.2);
                                        let v600 =
                                            C::gen_select_reg(ctx, v587, v594, v597, v598, v599);
                                        let v601 = constructor_output_reg(ctx, v600);
                                        // Rule at src/isa/riscv64/lower.isle line 614.
                                        return Some(v601);
                                    }
                                }
                            }
                        }
                        let v426 = C::unpack_value_array_3(ctx, v425);
                        let v575 = C::put_in_regs(ctx, v426.0);
                        let v574 = C::value_type(ctx, v426.0);
                        let v576 = constructor_normalize_cmp_value(ctx, v574, v575);
                        let v577 = constructor_truthy_to_reg(ctx, v574, v576);
                        let v578 = C::put_in_regs(ctx, v426.1);
                        let v579 = C::put_in_regs(ctx, v426.2);
                        let v580 = constructor_gen_select(ctx, v3, v577, v578, v579);
                        let v581 = C::output(ctx, v580);
                        // Rule at src/isa/riscv64/lower.isle line 611.
                        return Some(v581);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v426 = C::unpack_value_array_3(ctx, v425);
                        let v582 = C::def_inst(ctx, v426.0);
                        if let Some(v583) = v582 {
                            let v584 = &C::inst_data(ctx, v583);
                            if let &InstructionData::IntCompare {
                                opcode: ref v585,
                                args: ref v586,
                                cond: ref v587,
                            } = v584
                            {
                                if let &Opcode::Icmp = v585 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v765 = &C::alloc_vec_writable(ctx, v3);
                                    let v588 = C::unpack_value_array_2(ctx, v586);
                                    let v766 = C::put_in_regs(ctx, v588.0);
                                    let v767 = C::put_in_regs(ctx, v588.1);
                                    let v764 = C::value_type(ctx, v588.0);
                                    let v768 = constructor_lower_icmp(ctx, v587, v766, v767, v764);
                                    let v769 = &C::vec_writable_clone(ctx, v765);
                                    let v770 = C::put_in_regs(ctx, v426.1);
                                    let v771 = C::put_in_regs(ctx, v426.2);
                                    let v772 = MInst::SelectIf {
                                        if_spectre_guard: true,
                                        rd: v769.clone(),
                                        test: v768,
                                        x: v770,
                                        y: v771,
                                    };
                                    let v773 = C::emit(ctx, &v772);
                                    let v774 = C::vec_writable_to_regs(ctx, v765);
                                    let v775 = C::output(ctx, v774);
                                    // Rule at src/isa/riscv64/lower.isle line 828.
                                    return Some(v775);
                                }
                            }
                        }
                        let v575 = C::put_in_regs(ctx, v426.0);
                        let v574 = C::value_type(ctx, v426.0);
                        let v576 = constructor_normalize_cmp_value(ctx, v574, v575);
                        let v577 = constructor_truthy_to_reg(ctx, v574, v576);
                        let v578 = C::put_in_regs(ctx, v426.1);
                        let v579 = C::put_in_regs(ctx, v426.2);
                        let v3 = C::value_type(ctx, v2);
                        let v580 = constructor_gen_select(ctx, v3, v577, v578, v579);
                        let v581 = C::output(ctx, v580);
                        // Rule at src/isa/riscv64/lower.isle line 835.
                        return Some(v581);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v426 = C::unpack_value_array_3(ctx, v425);
                        let v431 = C::put_in_reg(ctx, v426.0);
                        let v432 = C::put_in_reg(ctx, v426.1);
                        let v433 = C::put_in_reg(ctx, v426.2);
                        let v3 = C::value_type(ctx, v2);
                        let v602 = constructor_gen_bitselect(ctx, v3, v431, v432, v433);
                        let v603 = constructor_output_reg(ctx, v602);
                        // Rule at src/isa/riscv64/lower.isle line 623.
                        return Some(v603);
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v426 = C::unpack_value_array_3(ctx, v425);
                                let v431 = C::put_in_reg(ctx, v426.0);
                                let v432 = C::put_in_reg(ctx, v426.1);
                                let v433 = C::put_in_reg(ctx, v426.2);
                                let v434 = constructor_fpu_rrrr(
                                    ctx,
                                    &FpuOPRRRR::FmaddS,
                                    F64,
                                    v431,
                                    v432,
                                    v433,
                                );
                                let v435 = constructor_output_reg(ctx, v434);
                                // Rule at src/isa/riscv64/lower.isle line 445.
                                return Some(v435);
                            }
                            F64 => {
                                let v426 = C::unpack_value_array_3(ctx, v425);
                                let v431 = C::put_in_reg(ctx, v426.0);
                                let v432 = C::put_in_reg(ctx, v426.1);
                                let v433 = C::put_in_reg(ctx, v426.2);
                                let v437 = constructor_fpu_rrrr(
                                    ctx,
                                    &FpuOPRRRR::FmaddD,
                                    F64,
                                    v431,
                                    v432,
                                    v433,
                                );
                                let v438 = constructor_output_reg(ctx, v437);
                                // Rule at src/isa/riscv64/lower.isle line 447.
                                return Some(v438);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Trap {
            opcode: ref v638,
            code: ref v639,
        } => {
            match v638 {
                &Opcode::Trap => {
                    let v640 = constructor_udf(ctx, v639);
                    // Rule at src/isa/riscv64/lower.isle line 673.
                    return Some(v640);
                }
                &Opcode::ResumableTrap => {
                    let v640 = constructor_udf(ctx, v639);
                    // Rule at src/isa/riscv64/lower.isle line 678.
                    return Some(v640);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v105,
            arg: v106,
        } => {
            match v105 {
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v107 = C::put_in_regs(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v108 = constructor_neg(ctx, v3, v107);
                        let v109 = C::output(ctx, v108);
                        // Rule at src/isa/riscv64/lower.isle line 79.
                        return Some(v109);
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v253 = C::put_in_reg(ctx, v106);
                            let v792 = constructor_lower_iabs(ctx, v39, v253);
                            let v793 = constructor_output_reg(ctx, v792);
                            // Rule at src/isa/riscv64/lower.isle line 862.
                            return Some(v793);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v107 = C::put_in_regs(ctx, v106);
                                let v258 = constructor_bnot_128(ctx, v107);
                                let v259 = C::output(ctx, v258);
                                // Rule at src/isa/riscv64/lower.isle line 248.
                                return Some(v259);
                            }
                            F32 => {
                                let v253 = C::put_in_reg(ctx, v106);
                                let v260 = constructor_lower_float_bnot(ctx, v253, F32);
                                let v261 = constructor_output_reg(ctx, v260);
                                // Rule at src/isa/riscv64/lower.isle line 251.
                                return Some(v261);
                            }
                            F64 => {
                                let v253 = C::put_in_reg(ctx, v106);
                                let v262 = constructor_lower_float_bnot(ctx, v253, F64);
                                let v263 = constructor_output_reg(ctx, v262);
                                // Rule at src/isa/riscv64/lower.isle line 255.
                                return Some(v263);
                            }
                            _ => {}
                        }
                        let v253 = C::put_in_reg(ctx, v106);
                        let v255 = C::imm_from_neg_bits(ctx, -0x1);
                        let v256 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v253, v255);
                        let v257 = constructor_output_reg(ctx, v256);
                        // Rule at src/isa/riscv64/lower.isle line 245.
                        return Some(v257);
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v106);
                            let v266 = C::value_regs_get(ctx, v107, 0x0);
                            let v267 = constructor_lower_bit_reverse(ctx, v266, I64);
                            let v268 = C::value_regs_get(ctx, v107, 0x1);
                            let v269 = constructor_lower_bit_reverse(ctx, v268, I64);
                            let v270 = C::value_regs(ctx, v269, v267);
                            let v271 = C::output(ctx, v270);
                            // Rule at src/isa/riscv64/lower.isle line 263.
                            return Some(v271);
                        }
                        let v253 = C::put_in_reg(ctx, v106);
                        let v264 = constructor_lower_bit_reverse(ctx, v253, v3);
                        let v265 = constructor_output_reg(ctx, v264);
                        // Rule at src/isa/riscv64/lower.isle line 260.
                        return Some(v265);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v106);
                            let v278 = constructor_lower_clz_i128(ctx, v107);
                            let v279 = C::output(ctx, v278);
                            // Rule at src/isa/riscv64/lower.isle line 280.
                            return Some(v279);
                        }
                        let v253 = C::put_in_reg(ctx, v106);
                        let v276 = constructor_lower_clz(ctx, v3, v253);
                        let v277 = constructor_output_reg(ctx, v276);
                        // Rule at src/isa/riscv64/lower.isle line 278.
                        return Some(v277);
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v106);
                            let v411 = constructor_lower_cls_i128(ctx, v107);
                            let v412 = C::output(ctx, v411);
                            // Rule at src/isa/riscv64/lower.isle line 426.
                            return Some(v412);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v253 = C::put_in_reg(ctx, v106);
                            let v409 = constructor_lower_cls(ctx, v253, v39);
                            let v410 = constructor_output_reg(ctx, v409);
                            // Rule at src/isa/riscv64/lower.isle line 424.
                            return Some(v410);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v106);
                            let v274 = constructor_lower_ctz_128(ctx, v107);
                            let v275 = C::output(ctx, v274);
                            // Rule at src/isa/riscv64/lower.isle line 274.
                            return Some(v275);
                        }
                        let v253 = C::put_in_reg(ctx, v106);
                        let v272 = constructor_lower_ctz(ctx, v3, v253);
                        let v273 = constructor_output_reg(ctx, v272);
                        // Rule at src/isa/riscv64/lower.isle line 271.
                        return Some(v273);
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v106);
                            let v299 = constructor_lower_popcnt_i128(ctx, v107);
                            let v300 = C::output(ctx, v299);
                            // Rule at src/isa/riscv64/lower.isle line 304.
                            return Some(v300);
                        }
                        let v38 = C::fits_in_64(ctx, v3);
                        if let Some(v39) = v38 {
                            let v253 = C::put_in_reg(ctx, v106);
                            let v297 = constructor_lower_popcnt(ctx, v253, v39);
                            let v298 = constructor_output_reg(ctx, v297);
                            // Rule at src/isa/riscv64/lower.isle line 302.
                            return Some(v298);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v253 = C::put_in_reg(ctx, v106);
                                let v440 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F64, v253);
                                let v441 = constructor_output_reg(ctx, v440);
                                // Rule at src/isa/riscv64/lower.isle line 452.
                                return Some(v441);
                            }
                            F64 => {
                                let v253 = C::put_in_reg(ctx, v106);
                                let v443 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, v253);
                                let v444 = constructor_output_reg(ctx, v443);
                                // Rule at src/isa/riscv64/lower.isle line 455.
                                return Some(v444);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v415 = &constructor_f_copy_neg_sign_op(ctx, v3);
                        let v416 = C::put_in_reg(ctx, v106);
                        let v417 = C::put_in_reg(ctx, v106);
                        let v418 = constructor_fpu_rrr(ctx, v415, v3, v416, v417);
                        let v419 = constructor_output_reg(ctx, v418);
                        // Rule at src/isa/riscv64/lower.isle line 437.
                        return Some(v419);
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v413 = constructor_gen_fabs(ctx, v253, v3);
                        let v414 = constructor_output_reg(ctx, v413);
                        // Rule at src/isa/riscv64/lower.isle line 432.
                        return Some(v414);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v753 = constructor_gen_float_round(ctx, &FloatRoundOP::Ceil, v253, v3);
                        let v754 = constructor_output_reg(ctx, v753);
                        // Rule at src/isa/riscv64/lower.isle line 807.
                        return Some(v754);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v756 = constructor_gen_float_round(ctx, &FloatRoundOP::Floor, v253, v3);
                        let v757 = constructor_output_reg(ctx, v756);
                        // Rule at src/isa/riscv64/lower.isle line 813.
                        return Some(v757);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v759 = constructor_gen_float_round(ctx, &FloatRoundOP::Trunc, v253, v3);
                        let v760 = constructor_output_reg(ctx, v759);
                        // Rule at src/isa/riscv64/lower.isle line 817.
                        return Some(v760);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v762 =
                            constructor_gen_float_round(ctx, &FloatRoundOP::Nearest, v253, v3);
                        let v763 = constructor_output_reg(ctx, v762);
                        // Rule at src/isa/riscv64/lower.isle line 822.
                        return Some(v763);
                    }
                }
                &Opcode::IsNull => {
                    let v253 = C::put_in_reg(ctx, v106);
                    let v569 =
                        constructor_gen_reference_check(ctx, &ReferenceCheckOP::IsNull, v253);
                    let v570 = constructor_output_reg(ctx, v569);
                    // Rule at src/isa/riscv64/lower.isle line 601.
                    return Some(v570);
                }
                &Opcode::IsInvalid => {
                    let v253 = C::put_in_reg(ctx, v106);
                    let v572 =
                        constructor_gen_reference_check(ctx, &ReferenceCheckOP::IsInvalid, v253);
                    let v573 = constructor_output_reg(ctx, v572);
                    // Rule at src/isa/riscv64/lower.isle line 606.
                    return Some(v573);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v107 = C::put_in_regs(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v280 = C::value_type(ctx, v106);
                        let v776 = constructor_lower_bmask(ctx, v3, v280, v107);
                        let v777 = C::output(ctx, v776);
                        // Rule at src/isa/riscv64/lower.isle line 841.
                        return Some(v777);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v107 = C::put_in_regs(ctx, v106);
                        let v266 = C::value_regs_get(ctx, v107, 0x0);
                        let v3 = C::value_type(ctx, v2);
                        let v529 = C::gen_move2(ctx, v266, v3, v3);
                        let v530 = constructor_output_reg(ctx, v529);
                        // Rule at src/isa/riscv64/lower.isle line 551.
                        return Some(v530);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v281 = C::ty_bits(ctx, v280);
                        let v3 = C::value_type(ctx, v2);
                        let v282 = C::ty_bits(ctx, v3);
                        let v283 = constructor_lower_extend(ctx, v253, false, v281, v282);
                        let v284 = C::output(ctx, v283);
                        // Rule at src/isa/riscv64/lower.isle line 284.
                        return Some(v284);
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v281 = C::ty_bits(ctx, v280);
                        let v3 = C::value_type(ctx, v2);
                        let v282 = C::ty_bits(ctx, v3);
                        let v285 = constructor_lower_extend(ctx, v253, true, v281, v282);
                        let v286 = C::output(ctx, v285);
                        // Rule at src/isa/riscv64/lower.isle line 288.
                        return Some(v286);
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v532 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, v3, v253);
                        let v533 = constructor_output_reg(ctx, v532);
                        // Rule at src/isa/riscv64/lower.isle line 556.
                        return Some(v533);
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v535 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, v3, v253);
                        let v536 = constructor_output_reg(ctx, v535);
                        // Rule at src/isa/riscv64/lower.isle line 560.
                        return Some(v536);
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v725 = constructor_gen_fcvt_int(ctx, false, v253, false, v280, v3);
                        let v726 = constructor_output_reg(ctx, v725);
                        // Rule at src/isa/riscv64/lower.isle line 767.
                        return Some(v726);
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v727 = constructor_gen_fcvt_int(ctx, false, v253, true, v280, v3);
                        let v728 = constructor_output_reg(ctx, v727);
                        // Rule at src/isa/riscv64/lower.isle line 772.
                        return Some(v728);
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v731 = constructor_gen_fcvt_int(ctx, true, v253, false, v280, v3);
                        let v732 = constructor_output_reg(ctx, v731);
                        // Rule at src/isa/riscv64/lower.isle line 782.
                        return Some(v732);
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v253 = C::put_in_reg(ctx, v106);
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v729 = constructor_gen_fcvt_int(ctx, true, v253, true, v280, v3);
                        let v730 = constructor_output_reg(ctx, v729);
                        // Rule at src/isa/riscv64/lower.isle line 777.
                        return Some(v730);
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v736 = &C::int_convert_2_float_op(ctx, v280, false, v3);
                        let v416 = C::put_in_reg(ctx, v106);
                        let v737 = constructor_fpu_rr(ctx, v736, v3, v416);
                        let v738 = constructor_output_reg(ctx, v737);
                        // Rule at src/isa/riscv64/lower.isle line 792.
                        return Some(v738);
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v280 = C::value_type(ctx, v106);
                        let v3 = C::value_type(ctx, v2);
                        let v733 = &C::int_convert_2_float_op(ctx, v280, true, v3);
                        let v416 = C::put_in_reg(ctx, v106);
                        let v734 = constructor_fpu_rr(ctx, v733, v3, v416);
                        let v735 = constructor_output_reg(ctx, v734);
                        // Rule at src/isa/riscv64/lower.isle line 787.
                        return Some(v735);
                    }
                }
                &Opcode::Isplit => {
                    let v107 = C::put_in_regs(ctx, v106);
                    let v266 = C::value_regs_get(ctx, v107, 0x0);
                    let v604 = C::gen_move2(ctx, v266, I64, I64);
                    let v605 = C::put_in_regs(ctx, v106);
                    let v606 = C::value_regs_get(ctx, v605, 0x1);
                    let v607 = C::gen_move2(ctx, v606, I64, I64);
                    let v608 = C::value_reg(ctx, v604);
                    let v609 = C::value_reg(ctx, v607);
                    let v610 = C::output_pair(ctx, v608, v609);
                    // Rule at src/isa/riscv64/lower.isle line 628.
                    return Some(v610);
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v739,
            global_value: v740,
        } => {
            if let &Opcode::SymbolValue = v739 {
                let v741 = C::symbol_value_data(ctx, v740);
                if let Some(v742) = v741 {
                    let v746 = C::load_ext_name(ctx, v742.0, v742.2);
                    let v747 = constructor_output_reg(ctx, v746);
                    // Rule at src/isa/riscv64/lower.isle line 797.
                    return Some(v747);
                }
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v10,
            imm: v11,
        } => {
            if let &Opcode::F32const = v10 {
                let v12 = C::u64_from_ieee32(ctx, v11);
                let v14 = C::imm(ctx, F32, v12);
                let v15 = constructor_output_reg(ctx, v14);
                // Rule at src/isa/riscv64/lower.isle line 14.
                return Some(v15);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v16,
            imm: v17,
        } => {
            if let &Opcode::F64const = v16 {
                let v18 = C::u64_from_ieee64(ctx, v17);
                let v20 = C::imm(ctx, F64, v18);
                let v21 = constructor_output_reg(ctx, v20);
                // Rule at src/isa/riscv64/lower.isle line 19.
                return Some(v21);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = C::imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/riscv64/lower.isle line 9.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v8 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v9 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v5,
        ty: arg1,
        p: v8,
        x: arg3,
        t0: v6,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/lower.isle line 498.
    return v11;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_alu_andi(ctx, arg0, 0x3);
        let v6 = constructor_alu_slli(ctx, v5, 0x3);
        // Rule at src/isa/riscv64/lower.isle line 526.
        return v6;
    }
    let v7 = C::zero_reg(ctx);
    // Rule at src/isa/riscv64/lower.isle line 529.
    return v7;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_alu_andi(ctx, arg0, -0x4);
        // Rule at src/isa/riscv64/lower.isle line 533.
        return v5;
    }
    // Rule at src/isa/riscv64/lower.isle line 536.
    return arg0;
}

// Generated as internal constructor for term gen_icmp.
pub fn constructor_gen_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Icmp {
        cc: arg0.clone(),
        rd: v5,
        a: arg1,
        b: arg2,
        ty: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/riscv64/lower.isle line 744.
    return v8;
}
