// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/s390x/inst.isle
// - src/isa/s390x/lower.isle
// - /Users/rajeeb/Work/personal/fluence-fil-bangalore/target/debug/build/cranelift-codegen-d602c9be4ae391d2/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn allow_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_as_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn vec_length_minus1(&mut self, arg0: &VecMachLabel) -> u32;
    fn vec_element(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_stack_off(&mut self, arg0: i64, arg1: i64) -> MemArg;
    fn memarg_initial_sp_offset(&mut self, arg0: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallIndInfo;
    fn abi_accumulate_outgoing_args_size(&mut self, arg0: Sig) -> Unit;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> LibCallInfo;
    fn lib_call_info_tls_get_offset(
        &mut self,
        arg0: WritableReg,
        arg1: Reg,
        arg2: Reg,
        arg3: &SymbolReloc,
    ) -> LibCallInfo;
    fn lib_call_info(&mut self, arg0: &LibCallInfo) -> BoxCallInfo;
    fn lib_accumulate_outgoing_args_size(&mut self, arg0: &LibCallInfo) -> Unit;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/s390x/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        link: Reg,
        rets: VecRetPair,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: VecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
}

/// Internal type SymbolReloc: defined at src/isa/s390x/inst.isle line 1017.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src/isa/s390x/inst.isle line 1034.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src/isa/s390x/inst.isle line 1081.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src/isa/s390x/inst.isle line 1096.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src/isa/s390x/inst.isle line 1109.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src/isa/s390x/inst.isle line 1118.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src/isa/s390x/inst.isle line 1133.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src/isa/s390x/inst.isle line 1235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src/isa/s390x/inst.isle line 1276.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src/isa/s390x/inst.isle line 1297.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src/isa/s390x/inst.isle line 1314.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src/isa/s390x/inst.isle line 1325.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src/isa/s390x/inst.isle line 1348.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src/isa/s390x/inst.isle line 1385.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src/isa/s390x/inst.isle line 1398.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src/isa/s390x/inst.isle line 1425.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src/isa/s390x/inst.isle line 1470.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src/isa/s390x/inst.isle line 3350.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1484.
                    return true;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1485.
                    return false;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1486.
                    return false;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1487.
                    return true;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_equal", "src/isa/s390x/inst.isle line 1483"
    )
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(ctx: &mut C, arg0: MemFlags) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 1492.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1491.
        return LaneOrder::LittleEndian;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_from_memflags", "src/isa/s390x/inst.isle line 1490"
    )
}

// Generated as internal constructor for term i64_nonzero.
pub fn constructor_i64_nonzero<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, 0x0);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1544.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -0x1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 1549.
        return Some(arg0);
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src/isa/s390x/inst.isle line 1588.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src/isa/s390x/inst.isle line 1700.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -0x1);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src/isa/s390x/inst.isle line 1697.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mask_amt_reg", "src/isa/s390x/inst.isle line 1696"
    )
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 1704.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1, v9);
        // Rule at src/isa/s390x/inst.isle line 1705.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_reg", "src/isa/s390x/inst.isle line 1703"
    )
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src/isa/s390x/inst.isle line 1715.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xF);
        // Rule at src/isa/s390x/inst.isle line 1713.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0);
        // Rule at src/isa/s390x/inst.isle line 1710.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_vr", "src/isa/s390x/inst.isle line 1709"
    )
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0x0);
    let v3 = v2?;
    // Rule at src/isa/s390x/inst.isle line 1807.
    return Some(v3);
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v7 = C::def_inst(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v10,
                args: ref v11,
            } => {
                if let &Opcode::Iadd = v10 {
                    let v3 = C::i64_from_offset(ctx, arg2);
                    if v3 == 0x0 {
                        let v12 = C::unpack_value_array_2(ctx, v11);
                        let v15 = C::put_in_reg(ctx, v12.0);
                        let v16 = C::put_in_reg(ctx, v12.1);
                        let v17 = &C::memarg_reg_plus_reg(ctx, v15, v16, 0x0, arg0);
                        // Rule at src/isa/s390x/inst.isle line 1817.
                        return v17.clone();
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v18,
                global_value: v19,
            } => {
                if let &Opcode::SymbolValue = v18 {
                    let v20 = C::symbol_value_data(ctx, v19);
                    if let Some(v21) = v20 {
                        let v25 = C::reloc_distance_near(ctx, v21.1);
                        if let Some(v26) = v25 {
                            let v3 = C::i64_from_offset(ctx, arg2);
                            let v27 = C::memarg_symbol_offset_sum(ctx, v3, v21.2);
                            if let Some(v28) = v27 {
                                let v29 = &C::memarg_symbol(ctx, v21.0, v28, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1820.
                                return v29.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::i64_from_offset(ctx, arg2);
    let v6 = &C::memarg_reg_plus_off(ctx, v4, v3, 0x0, arg0);
    // Rule at src/isa/s390x/inst.isle line 1814.
    return v6.clone();
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v3 = C::i64_from_offset(ctx, arg2);
    if v3 == 0x0 {
        let v7 = C::def_inst(ctx, arg1);
        if let Some(v8) = v7 {
            let v9 = &C::inst_data(ctx, v8);
            if let &InstructionData::Binary {
                opcode: ref v10,
                args: ref v11,
            } = v9
            {
                if let &Opcode::Iadd = v10 {
                    let v12 = C::unpack_value_array_2(ctx, v11);
                    let v15 = C::put_in_reg(ctx, v12.0);
                    let v16 = C::put_in_reg(ctx, v12.1);
                    let v17 = &C::memarg_reg_plus_reg(ctx, v15, v16, arg3, arg0);
                    // Rule at src/isa/s390x/inst.isle line 1834.
                    return v17.clone();
                }
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = &C::memarg_reg_plus_off(ctx, v5, v3, arg3, arg0);
    // Rule at src/isa/s390x/inst.isle line 1831.
    return v6.clone();
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1841.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    // Rule at src/isa/s390x/inst.isle line 1849.
                                    return Some(arg0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> MemArgPair {
    let v1 = &C::memarg_pair_from_memarg(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1863.
        return v2.clone();
    }
    let v3 = constructor_load_addr(ctx, arg0);
    let v4 = C::memarg_flags(ctx, arg0);
    let v5 = &C::memarg_pair_from_reg(ctx, v3, v4);
    // Rule at src/isa/s390x/inst.isle line 1864.
    return v5.clone();
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 1879.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1945.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load", "src/isa/s390x/inst.isle line 1944"
    )
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1952.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload16", "src/isa/s390x/inst.isle line 1951"
    )
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1959.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload32", "src/isa/s390x/inst.isle line 1958"
    )
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1966.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload16", "src/isa/s390x/inst.isle line 1965"
    )
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1973.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload32", "src/isa/s390x/inst.isle line 1972"
    )
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 1989.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src/isa/s390x/inst.isle line 2005.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2025.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2032.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2039.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2046.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2053.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2060.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2067.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2074.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2081.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2088.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2095.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2102.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2109.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2116.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2123.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2130.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2137.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2144.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2151.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2158.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/s390x/inst.isle line 2165.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &UnaryOp, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2171.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2178.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2183.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2188.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2193.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2198.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2203.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2210.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2217.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/s390x/inst.isle line 2224.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2229.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2236.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2243.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2250.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2257.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(ctx: &mut C, arg0: Reg, arg1: &MemArg) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2264.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2269.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2274.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2279.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2284.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2289.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2294.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2299.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2304.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2309.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2314.
    return v3;
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = MInst::Mvc {
        dst: arg0.clone(),
        src: arg1.clone(),
        len_minus_one: arg2,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2319.
    return v4;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR { rd: v2, ar: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2324.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2331.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &FPUOp1, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2338.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2345.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2352.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2359.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2364.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2369.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2376.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2383.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2390.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2397.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2404.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2411.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2418.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2425.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2431.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2438.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2444.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2451.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2458.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2465.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2472.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2479.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2486.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2493.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2500.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2507.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2514.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2519.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2524.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2529.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2534.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2539.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2544.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2549.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2554.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate", "src/isa/s390x/inst.isle line 2553"
    )
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2561.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_rev", "src/isa/s390x/inst.isle line 2560"
    )
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2568.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2575.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const", "src/isa/s390x/inst.isle line 2574"
    )
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2582.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const_replicate", "src/isa/s390x/inst.isle line 2581"
    )
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: u16) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask { rd: v4, mask: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2589.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_byte_mask", "src/isa/s390x/inst.isle line 2588"
    )
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/s390x/inst.isle line 2596.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_bit_mask", "src/isa/s390x/inst.isle line 2595"
    )
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: i16) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2603.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_replicate", "src/isa/s390x/inst.isle line 2602"
    )
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2610.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane", "src/isa/s390x/inst.isle line 2609"
    )
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2617.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_undef", "src/isa/s390x/inst.isle line 2616"
    )
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2624.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev", "src/isa/s390x/inst.isle line 2623"
    )
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2631.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev_undef", "src/isa/s390x/inst.isle line 2630"
    )
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2638.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane", "src/isa/s390x/inst.isle line 2637"
    )
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2643.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_rev", "src/isa/s390x/inst.isle line 2642"
    )
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2648.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/s390x/inst.isle line 2647"
    )
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2655.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_undef", "src/isa/s390x/inst.isle line 2654"
    )
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2662.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_extract_lane", "src/isa/s390x/inst.isle line 2661"
    )
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2669.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_imm", "src/isa/s390x/inst.isle line 2668"
    )
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2676.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_replicate_lane", "src/isa/s390x/inst.isle line 2675"
    )
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2683.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2690.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2697.
    return v3;
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> SideEffectNoResult {
    let v2 = MInst::CallInd {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2702.
    return v3;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2707.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2712.
    return v4;
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> ConsumesFlags {
    let v2 = MInst::OneWayCondBr {
        target: arg0,
        cond: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2717.
    return v3;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VecMachLabel,
) -> SideEffectNoResult {
    let v2 = MInst::JTSequence {
        ridx: arg0,
        targets: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2722.
    return v3;
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2760.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_reg", "src/isa/s390x/inst.isle line 2759"
    )
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2766.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_uimm32shifted", "src/isa/s390x/inst.isle line 2765"
    )
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2772.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_shift", "src/isa/s390x/inst.isle line 2771"
    )
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src/isa/s390x/inst.isle line 2779.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_rxsbg", "src/isa/s390x/inst.isle line 2778"
    )
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2787.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_unary", "src/isa/s390x/inst.isle line 2786"
    )
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 2793.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas32", "src/isa/s390x/inst.isle line 2792"
    )
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 2799.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas64", "src/isa/s390x/inst.isle line 2798"
    )
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v2 } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak { cond: arg2.clone() };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src/isa/s390x/inst.isle line 2805.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_break_if", "src/isa/s390x/inst.isle line 2804"
    )
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(ctx: &mut C, arg0: &VecMInstBuilder, arg1: &Cond) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/s390x/inst.isle line 2812.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 { rd: v10, rm: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/s390x/inst.isle line 2824.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 { rd: v4, rm: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2820.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src/isa/s390x/inst.isle line 2819"
    )
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src/isa/s390x/inst.isle line 2831.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src/isa/s390x/inst.isle line 2833.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_load", "src/isa/s390x/inst.isle line 2830"
    )
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2838.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src/isa/s390x/inst.isle line 2851.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2857.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2858.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2859.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2860.
            return v6.clone();
        }
        R64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2861.
            return v6.clone();
        }
        F32 => {
            let v9 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2862.
            return v9.clone();
        }
        F64 => {
            let v11 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2863.
            return v11.clone();
        }
        _ => {}
    }
    let v12 = C::vr128_ty(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 2864.
        return v14.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_store", "src/isa/s390x/inst.isle line 2856"
    )
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_zext32_mem(ctx, I8, arg1);
            // Rule at src/isa/s390x/inst.isle line 2867.
            return v3;
        }
        I16 => {
            let v5 = constructor_zext32_mem(ctx, I16, arg1);
            // Rule at src/isa/s390x/inst.isle line 2868.
            return v5;
        }
        I32 => {
            let v6 = constructor_load32(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2869.
            return v6;
        }
        I64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2870.
            return v7;
        }
        R64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2871.
            return v7;
        }
        F32 => {
            let v10 = constructor_vec_load_lane_undef(ctx, F32X4, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2872.
            return v10;
        }
        F64 => {
            let v12 = constructor_vec_load_lane_undef(ctx, F64X2, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2873.
            return v12;
        }
        _ => {}
    }
    let v13 = C::vr128_ty(ctx, arg0);
    if let Some(v14) = v13 {
        let v15 = constructor_vec_load(ctx, v14, arg1);
        // Rule at src/isa/s390x/inst.isle line 2874.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_load", "src/isa/s390x/inst.isle line 2866"
    )
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8);
                    // Rule at src/isa/s390x/inst.isle line 2886.
                    return v17;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    // Rule at src/isa/s390x/inst.isle line 2883.
                    return v14;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    // Rule at src/isa/s390x/inst.isle line 2880.
                    return v11;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    // Rule at src/isa/s390x/inst.isle line 2878.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_elt_rev", "src/isa/s390x/inst.isle line 2877"
    )
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 2894.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src/isa/s390x/inst.isle line 2895.
        return arg2;
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/inst.isle line 2896.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        true => {
            // Rule at src/isa/s390x/inst.isle line 2897.
            return arg2;
        }
        false => {
            let v11 = C::vr128_ty(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src/isa/s390x/inst.isle line 2900.
                return v13;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "abi_vec_elt_rev", "src/isa/s390x/inst.isle line 2893"
    )
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> SideEffectNoResult {
    let v3 = C::len_minus_one(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = &constructor_memarg_pair(ctx, arg0);
        let v6 = &constructor_memarg_pair(ctx, arg1);
        let v7 = &constructor_mvc(ctx, v5, v6, v4);
        // Rule at src/isa/s390x/inst.isle line 2906.
        return v7.clone();
    }
    let v8 = constructor_load_addr(ctx, arg0);
    let v9 = constructor_load_addr(ctx, arg1);
    let v11 = constructor_imm(ctx, I64, arg2);
    let v12 = &C::lib_call_info_memcpy(ctx, v8, v9, v11);
    let v13 = C::lib_accumulate_outgoing_args_size(ctx, v12);
    let v14 = &constructor_lib_call(ctx, v12);
    // Rule at src/isa/s390x/inst.isle line 2908.
    return v14.clone();
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: i64,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/inst.isle line 2915.
        return v5;
    }
    let v6 = C::abi_arg_struct_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = &C::memarg_stack_off(ctx, arg0, v7.1);
        let v12 = C::put_in_reg(ctx, arg2);
        let v15 = C::memflags_trusted(ctx);
        let v16 = &C::memarg_reg_plus_off(ctx, v12, 0x0, 0x0, v15);
        let v17 = &constructor_memcpy(ctx, v11, v16, v7.2);
        let v18 = constructor_side_effect(ctx, v17);
        // Rule at src/isa/s390x/inst.isle line 2916.
        return v18;
    }
    let v19 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v20) = v19 {
        let v24 = C::value_type(ctx, arg2);
        if v20.2 == v24 {
            let v25 = C::put_in_reg(ctx, arg2);
            let v26 = &C::memarg_stack_off(ctx, arg0, v20.1);
            let v27 = &constructor_arg_store(ctx, v20.2, v25, v26);
            let v28 = constructor_side_effect(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 2920.
            return v28;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_buffer", "src/isa/s390x/inst.isle line 2914"
    )
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src/isa/s390x/inst.isle line 2927.
        return v8;
    }
    let v9 = C::abi_arg_struct_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_stack_off(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src/isa/s390x/inst.isle line 2929.
        return v16;
    }
    let v17 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v18) = v17 {
        let v22 = &C::memarg_stack_off(ctx, arg2, v18.1);
        let v23 = constructor_load_addr(ctx, v22);
        let v24 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v18.0, v23);
        // Rule at src/isa/s390x/inst.isle line 2932.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_arg", "src/isa/s390x/inst.isle line 2926"
    )
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
) -> ValueRegs {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = constructor_copy_reg_from_arg_slot(ctx, arg0, arg1, arg2, v5);
        let v7 = C::value_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2938.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_from_arg", "src/isa/s390x/inst.isle line 2937"
    )
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(ctx: &mut C, arg0: &ABIArgSlot, arg1: Value) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    if v2 == R64 {
                        let v6 = C::put_in_reg(ctx, arg1);
                        let v7 = constructor_copy_reg(ctx, I64, v6);
                        // Rule at src/isa/s390x/inst.isle line 2945.
                        return v7;
                    }
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2947.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2949.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2951.
                    return v9;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v10,
            ty: v11,
            extension: ref v12,
        } => {
            match v12 {
                &ArgumentExtension::None => {
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2953.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2955.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2957.
                    return v9;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "prepare_arg_val", "src/isa/s390x/inst.isle line 2944"
    )
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src/isa/s390x/inst.isle line 2963.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = &C::memarg_stack_off(ctx, arg2, v11);
            let v16 = &constructor_arg_store(ctx, v14, arg4, v15);
            let v17 = constructor_side_effect(ctx, v16);
            // Rule at src/isa/s390x/inst.isle line 2966.
            return v17;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_to_arg_slot", "src/isa/s390x/inst.isle line 2962"
    )
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
) -> Reg {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v7 = C::defs_lookup(ctx, arg0, v4);
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, v7);
            // Rule at src/isa/s390x/inst.isle line 2971.
            return v8;
        }
        &ABIArgSlot::Stack {
            offset: v9,
            ty: v10,
            extension: ref v11,
        } => {
            let v12 = constructor_abi_ext_ty(ctx, v11, v10);
            let v13 = &C::memarg_stack_off(ctx, arg2, v9);
            let v14 = constructor_arg_load(ctx, v12, v13);
            // Rule at src/isa/s390x/inst.isle line 2973.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_from_arg_slot", "src/isa/s390x/inst.isle line 2970"
    )
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2979.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2980.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src/isa/s390x/inst.isle line 2978.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            let v46 = C::temp_writable_reg(ctx, F32);
            let v17 = C::u64_as_u32(ctx, arg1);
            let v47 = MInst::LoadFpuConst32 {
                rd: v46,
                const_data: v17,
            };
            let v48 = C::emit(ctx, &v47);
            let v49 = C::writable_reg_to_reg(ctx, v46);
            // Rule at src/isa/s390x/inst.isle line 3052.
            return v49;
        }
        F64 => {
            let v51 = C::temp_writable_reg(ctx, F64);
            let v52 = MInst::LoadFpuConst64 {
                rd: v51,
                const_data: arg1,
            };
            let v53 = C::emit(ctx, &v52);
            let v54 = C::writable_reg_to_reg(ctx, v51);
            // Rule at src/isa/s390x/inst.isle line 3059.
            return v54;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = C::u64_as_i16(ctx, arg1);
        let v6 = MInst::Mov32SImm16 { rd: v4, imm: v5 };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2989.
        return v8;
    }
    let v9 = C::gpr32_ty(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v13 = C::temp_writable_reg(ctx, v10);
            let v14 = MInst::Mov32SImm16 { rd: v13, imm: v12 };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src/isa/s390x/inst.isle line 2995.
            return v16;
        }
        let v13 = C::temp_writable_reg(ctx, v10);
        let v17 = C::u64_as_u32(ctx, arg1);
        let v18 = MInst::Mov32Imm { rd: v13, imm: v17 };
        let v19 = C::emit(ctx, &v18);
        let v20 = C::writable_reg_to_reg(ctx, v13);
        // Rule at src/isa/s390x/inst.isle line 3001.
        return v20;
    }
    let v21 = C::gpr64_ty(ctx, arg0);
    if let Some(v22) = v21 {
        let v11 = C::i16_from_u64(ctx, arg1);
        if let Some(v12) = v11 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v24 = MInst::Mov64SImm16 { rd: v23, imm: v12 };
            let v25 = C::emit(ctx, &v24);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3007.
            return v26;
        }
        let v27 = C::i32_from_u64(ctx, arg1);
        if let Some(v28) = v27 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v29 = MInst::Mov64SImm32 { rd: v23, imm: v28 };
            let v30 = C::emit(ctx, &v29);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3013.
            return v26;
        }
        let v31 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v32) = v31 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v33 = MInst::Mov64UImm16Shifted { rd: v23, imm: v32 };
            let v34 = C::emit(ctx, &v33);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3019.
            return v26;
        }
        let v35 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v36) = v35 {
            let v23 = C::temp_writable_reg(ctx, v22);
            let v37 = MInst::Mov64UImm32Shifted { rd: v23, imm: v36 };
            let v38 = C::emit(ctx, &v37);
            let v26 = C::writable_reg_to_reg(ctx, v23);
            // Rule at src/isa/s390x/inst.isle line 3025.
            return v26;
        }
        let v39 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v40) = v39 {
            let v41 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v42) = v41 {
                let v43 = constructor_imm(ctx, v22, v40);
                let v44 = constructor_insert_imm(ctx, v22, v43, v42);
                // Rule at src/isa/s390x/inst.isle line 3031.
                return v44;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/s390x/inst.isle line 2986"
    )
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u64) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3039.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3045.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_imm", "src/isa/s390x/inst.isle line 3036"
    )
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 { rd: v3, imm: arg1 };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 3066.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm32", "src/isa/s390x/inst.isle line 3065"
    )
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3073.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src/isa/s390x/inst.isle line 3075.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3077.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm", "src/isa/s390x/inst.isle line 3072"
    )
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3084.
                return v11;
            }
            0x10 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src/isa/s390x/inst.isle line 3092.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3086.
                return v11;
            }
            0x20 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src/isa/s390x/inst.isle line 3094.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src/isa/s390x/inst.isle line 3088.
                    return v17;
                }
            }
            0x40 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src/isa/s390x/inst.isle line 3096.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src/isa/s390x/inst.isle line 3090.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3082.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3098.
        return v36;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_splat", "src/isa/s390x/inst.isle line 3081"
    )
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3106.
            return I32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3107.
            return I32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3108.
            return I32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3109.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext32", "src/isa/s390x/inst.isle line 3105"
    )
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3113.
            return I64;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3114.
            return I64;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3115.
            return I64;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3116.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext64", "src/isa/s390x/inst.isle line 3112"
    )
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3121.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3128.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3135.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3142.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3150.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3154.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext32_mem", "src/isa/s390x/inst.isle line 3149"
    )
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3161.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3165.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext32_mem", "src/isa/s390x/inst.isle line 3160"
    )
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3172.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3176.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3180.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext64_mem", "src/isa/s390x/inst.isle line 3171"
    )
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3187.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3191.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3195.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext64_mem", "src/isa/s390x/inst.isle line 3186"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3203.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3209.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3205.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3207.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/s390x/inst.isle line 3202"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3214.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3220.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3216.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3218.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/s390x/inst.isle line 3213"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3225.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3231.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3227.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3229.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/s390x/inst.isle line 3224"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3236.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3242.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3238.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3240.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/s390x/inst.isle line 3235"
    )
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3254.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3250.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm", "src/isa/s390x/inst.isle line 3249"
    )
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 { rd: v16, imm: arg3 };
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src/isa/s390x/inst.isle line 3268.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 { rd: v6, imm: arg3 };
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src/isa/s390x/inst.isle line 3261.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm_imm", "src/isa/s390x/inst.isle line 3260"
    )
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v17 = C::temp_writable_reg(ctx, F32);
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src/isa/s390x/inst.isle line 3286.
            return v20;
        }
        F64 => {
            let v22 = C::temp_writable_reg(ctx, F64);
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v23 = MInst::FpuCMov64 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src/isa/s390x/inst.isle line 3290.
            return v25;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3282.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3278.
        return v9;
    }
    let v26 = C::vr128_ty(ctx, arg0);
    if let Some(v27) = v26 {
        let v22 = C::temp_writable_reg(ctx, F64);
        let v24 = C::writable_reg_to_reg(ctx, v22);
        let v28 = MInst::VecCMov {
            rd: v22,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v29 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v28,
            result: v24,
        };
        // Rule at src/isa/s390x/inst.isle line 3294.
        return v29;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_reg_reg", "src/isa/s390x/inst.isle line 3277"
    )
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3303.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3309.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3315.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3321.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3327.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 3333.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 3337.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src/isa/s390x/inst.isle line 3341.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src/isa/s390x/inst.isle line 3352.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(ctx: &mut C, arg0: &ProducesBool) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src/isa/s390x/inst.isle line 3356.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_bool", "src/isa/s390x/inst.isle line 3355"
    )
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3361.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_reg", "src/isa/s390x/inst.isle line 3360"
    )
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3366.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_imm", "src/isa/s390x/inst.isle line 3365"
    )
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(ctx: &mut C, arg0: Type, arg1: &ProducesBool) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3372.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool", "src/isa/s390x/inst.isle line 3371"
    )
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src/isa/s390x/inst.isle line 3379.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3376.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool_to_mask", "src/isa/s390x/inst.isle line 3375"
    )
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/s390x/inst.isle line 3385.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cond_br_bool", "src/isa/s390x/inst.isle line 3384"
    )
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_oneway_cond_br(ctx, arg1, v2);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3390.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "oneway_cond_br_bool", "src/isa/s390x/inst.isle line 3389"
    )
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3395.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_bool", "src/isa/s390x/inst.isle line 3394"
    )
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0);
    // Rule at src/isa/s390x/inst.isle line 3408.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1);
    // Rule at src/isa/s390x/inst.isle line 3412.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0x0, 0x0, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src/isa/s390x/inst.isle line 3421.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src/isa/s390x/inst.isle line 3443.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src/isa/s390x/inst.isle line 3445.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_result", "src/isa/s390x/inst.isle line 3442"
    )
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src/isa/s390x/inst.isle line 3450.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3);
    // Rule at src/isa/s390x/inst.isle line 3465.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xFFFC, 0x0);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src/isa/s390x/inst.isle line 3470.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
            // Rule at src/isa/s390x/inst.isle line 3480.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3482.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3484.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_in", "src/isa/s390x/inst.isle line 3479"
    )
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 3493.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3495.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3497.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_out", "src/isa/s390x/inst.isle line 3492"
    )
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8, arg2);
            // Rule at src/isa/s390x/inst.isle line 3508.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10, arg2);
                // Rule at src/isa/s390x/inst.isle line 3510.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src/isa/s390x/inst.isle line 3512.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_result", "src/isa/s390x/inst.isle line 3507"
    )
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src/isa/s390x/inst.isle line 3517.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xE);
    // Rule at src/isa/s390x/inst.isle line 3566.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3569.
    return v7.clone();
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> SideEffectNoResult {
    let v5 = constructor_writable_link_reg(ctx);
    let v6 = C::abi_call_ind_info(ctx, arg0, arg1, arg2, arg3, arg4);
    let v7 = &constructor_call_ind_impl(ctx, v5, v6);
    // Rule at src/isa/s390x/inst.isle line 3573.
    return v7.clone();
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(ctx: &mut C, arg0: &LibCallInfo) -> SideEffectNoResult {
    let v1 = constructor_writable_link_reg(ctx);
    let v2 = C::lib_call_info(ctx, arg0);
    let v3 = &constructor_call_impl(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 3597.
    return v3.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3607.
            return I16X8;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3608.
            return I32X4;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3609.
            return I64X2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_widen_type", "src/isa/s390x/inst.isle line 3606"
    )
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3612.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3613.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3614.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack", "src/isa/s390x/inst.isle line 3611"
    )
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3617.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3620.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3621.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3622.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_ssat", "src/isa/s390x/inst.isle line 3619"
    )
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3625.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3628.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3629.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3630.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_usat", "src/isa/s390x/inst.isle line 3627"
    )
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3633.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3636.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3637.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3638.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_low", "src/isa/s390x/inst.isle line 3635"
    )
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3641.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3644.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3645.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3646.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_high", "src/isa/s390x/inst.isle line 3643"
    )
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3649.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3652.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3653.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3654.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_low", "src/isa/s390x/inst.isle line 3651"
    )
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3657.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3660.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3661.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3662.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_high", "src/isa/s390x/inst.isle line 3659"
    )
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3665.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3676.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3673.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_lane_order", "src/isa/s390x/inst.isle line 3672"
    )
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3684.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3681.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_ssat_lane_order", "src/isa/s390x/inst.isle line 3680"
    )
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3692.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3689.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_usat_lane_order", "src/isa/s390x/inst.isle line 3688"
    )
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3705.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3702.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_low_lane_order", "src/isa/s390x/inst.isle line 3701"
    )
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3713.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3710.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_high_lane_order", "src/isa/s390x/inst.isle line 3709"
    )
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3721.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3718.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_low_lane_order", "src/isa/s390x/inst.isle line 3717"
    )
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3729.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3726.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_high_lane_order", "src/isa/s390x/inst.isle line 3725"
    )
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3737.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3738.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3739.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3740.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_low", "src/isa/s390x/inst.isle line 3736"
    )
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3743.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3746.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3747.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3748.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3749.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_high", "src/isa/s390x/inst.isle line 3745"
    )
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3752.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3766.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3763.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_low_lane_order", "src/isa/s390x/inst.isle line 3762"
    )
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3774.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3771.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_high_lane_order", "src/isa/s390x/inst.isle line 3770"
    )
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Reg {
    if arg0 == 0x40 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr { rd: v2, rn: arg1 };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3785.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr { rd: v2, rn: arg1 };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src/isa/s390x/inst.isle line 3791.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3799.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3800.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3801.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3802.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_clz", "src/isa/s390x/inst.isle line 3798"
    )
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3805.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3809.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3810.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3811.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3812.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_ctz", "src/isa/s390x/inst.isle line 3808"
    )
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3815.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3821.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 0xFF, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src/isa/s390x/inst.isle line 3822.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xFFFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -0x1, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src/isa/s390x/inst.isle line 3825.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xFFFFFFFF);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src/isa/s390x/inst.isle line 3828.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uint_sat_reg", "src/isa/s390x/inst.isle line 3820"
    )
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3836.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7F);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 0x7F, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -0x80);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -0x80, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src/isa/s390x/inst.isle line 3837.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7FFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 0x7FFF, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -0x8000);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -0x8000, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src/isa/s390x/inst.isle line 3843.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 0x7FFFFFFF);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -0x80000000);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src/isa/s390x/inst.isle line 3849.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sint_sat_reg", "src/isa/s390x/inst.isle line 3835"
    )
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3865.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3866.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3867.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3868.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add", "src/isa/s390x/inst.isle line 3864"
    )
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3871.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3872.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3873.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext16", "src/isa/s390x/inst.isle line 3870"
    )
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3876.
        return ALUOp::Add64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext32", "src/isa/s390x/inst.isle line 3875"
    )
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3879.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3882.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3885.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3888.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3891.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3894.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3897.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3904.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3900.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3901.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3902.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3903.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_add", "src/isa/s390x/inst.isle line 3899"
    )
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3907.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3913.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3914.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical", "src/isa/s390x/inst.isle line 3912"
    )
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3917.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical_zext32", "src/isa/s390x/inst.isle line 3916"
    )
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3920.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3923.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3927.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3930.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3934.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3937.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3941.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3944.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3948.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3951.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3958.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3959.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3960.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3961.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub", "src/isa/s390x/inst.isle line 3957"
    )
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3964.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3965.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3966.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext16", "src/isa/s390x/inst.isle line 3963"
    )
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3969.
        return ALUOp::Sub64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext32", "src/isa/s390x/inst.isle line 3968"
    )
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3972.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3975.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3978.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3981.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3984.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3991.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3987.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3988.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3989.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3990.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_sub", "src/isa/s390x/inst.isle line 3986"
    )
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3994.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4000.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4001.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical", "src/isa/s390x/inst.isle line 3999"
    )
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4004.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical_zext32", "src/isa/s390x/inst.isle line 4003"
    )
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4007.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4010.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4013.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4016.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4019.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4025.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4026.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4027.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4028.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul", "src/isa/s390x/inst.isle line 4024"
    )
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4031.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4032.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4033.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext16", "src/isa/s390x/inst.isle line 4030"
    )
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4036.
        return ALUOp::Mul64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext32", "src/isa/s390x/inst.isle line 4035"
    )
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4042.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4045.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4048.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4051.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4054.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4057.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4060.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4061.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4062.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_mul", "src/isa/s390x/inst.isle line 4059"
    )
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4066.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4069.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4070.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4071.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umulhi", "src/isa/s390x/inst.isle line 4068"
    )
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4075.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4078.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4079.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4080.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smulhi", "src/isa/s390x/inst.isle line 4077"
    )
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4084.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4087.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4088.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4089.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_even", "src/isa/s390x/inst.isle line 4086"
    )
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4093.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4096.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4097.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4098.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_even", "src/isa/s390x/inst.isle line 4095"
    )
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4102.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4105.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4106.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4107.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_odd", "src/isa/s390x/inst.isle line 4104"
    )
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4111.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4114.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4115.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4116.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_odd", "src/isa/s390x/inst.isle line 4113"
    )
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4120.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4126.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4127.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "udivmod", "src/isa/s390x/inst.isle line 4125"
    )
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4133.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4134.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sdivmod", "src/isa/s390x/inst.isle line 4132"
    )
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4140.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4141.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4142.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4143.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umax", "src/isa/s390x/inst.isle line 4139"
    )
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4146.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4152.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4153.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4154.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4155.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smax", "src/isa/s390x/inst.isle line 4151"
    )
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4158.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4164.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4165.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4166.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4167.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umin", "src/isa/s390x/inst.isle line 4163"
    )
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4170.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4176.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4177.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4178.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4179.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smin", "src/isa/s390x/inst.isle line 4175"
    )
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4182.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4188.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4189.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4190.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4191.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_uavg", "src/isa/s390x/inst.isle line 4187"
    )
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4194.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4201.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4200.
        return ALUOp::And32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and", "src/isa/s390x/inst.isle line 4199"
    )
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4204.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4207.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4210.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4213.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4216.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and", "src/isa/s390x/inst.isle line 4215"
    )
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4223.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4222.
        return ALUOp::Orr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or", "src/isa/s390x/inst.isle line 4221"
    )
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4226.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4229.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4232.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4235.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4238.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or", "src/isa/s390x/inst.isle line 4237"
    )
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4245.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4244.
        return ALUOp::Xor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_xor", "src/isa/s390x/inst.isle line 4243"
    )
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4248.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4251.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4254.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src/isa/s390x/inst.isle line 4257.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4261.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_xor", "src/isa/s390x/inst.isle line 4260"
    )
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src/isa/s390x/inst.isle line 4269.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src/isa/s390x/inst.isle line 4267.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "not_reg", "src/isa/s390x/inst.isle line 4266"
    )
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src/isa/s390x/inst.isle line 4277.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src/isa/s390x/inst.isle line 4275.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_not_reg", "src/isa/s390x/inst.isle line 4274"
    )
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src/isa/s390x/inst.isle line 4282.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4289.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4288.
        return ALUOp::NotAnd32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_and", "src/isa/s390x/inst.isle line 4287"
    )
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4292.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4295.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_and", "src/isa/s390x/inst.isle line 4294"
    )
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4302.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4301.
        return ALUOp::NotOrr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_or", "src/isa/s390x/inst.isle line 4300"
    )
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4305.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4308.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_or", "src/isa/s390x/inst.isle line 4307"
    )
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4315.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4314.
        return ALUOp::NotXor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_xor", "src/isa/s390x/inst.isle line 4313"
    )
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4318.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4321.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_xor", "src/isa/s390x/inst.isle line 4320"
    )
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4328.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4327.
        return ALUOp::AndNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and_not", "src/isa/s390x/inst.isle line 4326"
    )
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4331.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4334.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and_not", "src/isa/s390x/inst.isle line 4333"
    )
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4341.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4340.
        return ALUOp::OrrNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or_not", "src/isa/s390x/inst.isle line 4339"
    )
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4344.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4347.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or_not", "src/isa/s390x/inst.isle line 4346"
    )
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4353.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4359.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4360.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs", "src/isa/s390x/inst.isle line 4358"
    )
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4363.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs_sext32", "src/isa/s390x/inst.isle line 4362"
    )
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4366.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4369.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4372.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4373.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4374.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4375.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_abs", "src/isa/s390x/inst.isle line 4371"
    )
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4378.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4384.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4385.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4386.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4387.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg", "src/isa/s390x/inst.isle line 4383"
    )
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4390.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg_sext32", "src/isa/s390x/inst.isle line 4389"
    )
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4393.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4396.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4399.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4400.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4401.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4402.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_neg", "src/isa/s390x/inst.isle line 4398"
    )
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4405.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4411.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4412.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_bswap", "src/isa/s390x/inst.isle line 4410"
    )
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4415.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4418.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4424.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4425.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_rot", "src/isa/s390x/inst.isle line 4423"
    )
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4428.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4432.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4436.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src/isa/s390x/inst.isle line 4440.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4444.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4445.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4446.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4447.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_rot", "src/isa/s390x/inst.isle line 4443"
    )
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4450.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4454.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4461.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4462.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4463.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4464.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshl", "src/isa/s390x/inst.isle line 4460"
    )
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4467.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4471.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4475.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4476.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4477.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4478.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshl", "src/isa/s390x/inst.isle line 4474"
    )
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4481.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4485.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4489.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4492.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4498.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4499.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshr", "src/isa/s390x/inst.isle line 4497"
    )
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4502.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4506.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4510.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4511.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4512.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4513.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshr", "src/isa/s390x/inst.isle line 4509"
    )
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4516.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4520.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4524.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4527.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4533.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4534.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_ashr", "src/isa/s390x/inst.isle line 4532"
    )
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4537.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4541.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4545.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4546.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4547.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4548.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_ashr", "src/isa/s390x/inst.isle line 4544"
    )
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4551.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4555.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4559.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4562.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src/isa/s390x/inst.isle line 4568.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src/isa/s390x/inst.isle line 4571.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4574.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4575.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4576.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4577.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_popcnt", "src/isa/s390x/inst.isle line 4573"
    )
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4580.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4586.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4587.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_and", "src/isa/s390x/inst.isle line 4585"
    )
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4590.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4591.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_or", "src/isa/s390x/inst.isle line 4589"
    )
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4594.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4595.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_xor", "src/isa/s390x/inst.isle line 4593"
    )
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4598.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4599.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_add", "src/isa/s390x/inst.isle line 4597"
    )
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4605.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4606.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_impl", "src/isa/s390x/inst.isle line 4604"
    )
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4609.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4610.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas", "src/isa/s390x/inst.isle line 4608"
    )
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4616.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4617.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4618.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4619.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_add", "src/isa/s390x/inst.isle line 4615"
    )
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4622.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4628.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4629.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4630.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4631.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_sub", "src/isa/s390x/inst.isle line 4627"
    )
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4634.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4640.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4641.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4642.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4643.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_mul", "src/isa/s390x/inst.isle line 4639"
    )
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4646.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4652.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4653.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4654.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4655.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_div", "src/isa/s390x/inst.isle line 4651"
    )
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4658.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4664.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4665.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4666.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4667.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min", "src/isa/s390x/inst.isle line 4663"
    )
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4670.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4676.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4677.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4678.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4679.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max", "src/isa/s390x/inst.isle line 4675"
    )
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4682.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4688.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4689.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4690.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4691.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min_pseudo", "src/isa/s390x/inst.isle line 4687"
    )
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4694.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4700.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4701.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4702.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4703.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max_pseudo", "src/isa/s390x/inst.isle line 4699"
    )
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4706.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4712.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4713.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4714.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4715.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop3_fma", "src/isa/s390x/inst.isle line 4711"
    )
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4718.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4724.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4725.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4726.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4727.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_sqrt", "src/isa/s390x/inst.isle line 4723"
    )
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4730.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4736.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4737.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4738.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4739.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_neg", "src/isa/s390x/inst.isle line 4735"
    )
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4742.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4748.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4749.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4750.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4751.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_abs", "src/isa/s390x/inst.isle line 4747"
    )
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4754.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4760.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4761.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4762.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4763.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuroundop_round", "src/isa/s390x/inst.isle line 4759"
    )
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4766.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4770.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src/isa/s390x/inst.isle line 4774.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src/isa/s390x/inst.isle line 4778.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4785.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src/isa/s390x/inst.isle line 4786.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src/isa/s390x/inst.isle line 4788.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpromote_reg", "src/isa/s390x/inst.isle line 4784"
    )
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4795.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4796.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4798.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fdemote_reg", "src/isa/s390x/inst.isle line 4794"
    )
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4805.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4807.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4809.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4811.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_uint_reg", "src/isa/s390x/inst.isle line 4804"
    )
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4818.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4820.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4822.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4824.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_sint_reg", "src/isa/s390x/inst.isle line 4817"
    )
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4831.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4832.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4833.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_flt_ty", "src/isa/s390x/inst.isle line 4830"
    )
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4836.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4837.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4838.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_int_ty", "src/isa/s390x/inst.isle line 4835"
    )
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4844.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4846.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4848.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4850.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_reg", "src/isa/s390x/inst.isle line 4843"
    )
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4854.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4856.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_ub", "src/isa/s390x/inst.isle line 4853"
    )
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src/isa/s390x/inst.isle line 4860.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src/isa/s390x/inst.isle line 4861.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_lb", "src/isa/s390x/inst.isle line 4859"
    )
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4876.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4878.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4880.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4882.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_reg", "src/isa/s390x/inst.isle line 4875"
    )
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4886.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4888.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_ub", "src/isa/s390x/inst.isle line 4885"
    )
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4892.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4894.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_lb", "src/isa/s390x/inst.isle line 4891"
    )
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4910.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4911.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps", "src/isa/s390x/inst.isle line 4909"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4914.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4915.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext16", "src/isa/s390x/inst.isle line 4913"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4918.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext32", "src/isa/s390x/inst.isle line 4917"
    )
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4921.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4924.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4927.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4930.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4933.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4936.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4939.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4945.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4946.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu", "src/isa/s390x/inst.isle line 4944"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4949.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4950.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext16", "src/isa/s390x/inst.isle line 4948"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4953.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext32", "src/isa/s390x/inst.isle line 4952"
    )
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4956.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4959.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4962.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4965.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4968.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4971.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4977.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4978.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4979.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4980.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmpeq", "src/isa/s390x/inst.isle line 4976"
    )
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4983.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeq", "src/isa/s390x/inst.isle line 4982"
    )
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4985.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeqs", "src/isa/s390x/inst.isle line 4984"
    )
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4988.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4989.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4990.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4991.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmph", "src/isa/s390x/inst.isle line 4987"
    )
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4994.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmph", "src/isa/s390x/inst.isle line 4993"
    )
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4996.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphs", "src/isa/s390x/inst.isle line 4995"
    )
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4999.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 5000.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5001.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5002.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmphl", "src/isa/s390x/inst.isle line 4998"
    )
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5005.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphl", "src/isa/s390x/inst.isle line 5004"
    )
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5007.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphls", "src/isa/s390x/inst.isle line 5006"
    )
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5013.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5014.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_reg", "src/isa/s390x/inst.isle line 5012"
    )
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5020.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5021.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmpeq", "src/isa/s390x/inst.isle line 5019"
    )
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5024.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeq", "src/isa/s390x/inst.isle line 5023"
    )
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5026.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeqs", "src/isa/s390x/inst.isle line 5025"
    )
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5029.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5030.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmph", "src/isa/s390x/inst.isle line 5028"
    )
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5033.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmph", "src/isa/s390x/inst.isle line 5032"
    )
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5035.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphs", "src/isa/s390x/inst.isle line 5034"
    )
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5038.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5039.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmphe", "src/isa/s390x/inst.isle line 5037"
    )
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5042.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphe", "src/isa/s390x/inst.isle line 5041"
    )
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5044.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphes", "src/isa/s390x/inst.isle line 5043"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1593,
            args: ref v1594,
            flags: v1595,
        } => {
            if let &Opcode::AtomicCas = v1593 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v446 = C::ty_32_or_64(ctx, v3);
                    if let Some(v447) = v446 {
                        let v1600 = C::bigendian(ctx, v1595);
                        if let Some(v1601) = v1600 {
                            let v1596 = C::unpack_value_array_3(ctx, v1594);
                            let v1602 = C::put_in_reg(ctx, v1596.1);
                            let v1603 = C::put_in_reg(ctx, v1596.2);
                            let v1554 = C::zero_offset(ctx);
                            let v1604 = &constructor_lower_address(ctx, v1595, v1596.0, v1554);
                            let v1605 = constructor_atomic_cas_impl(ctx, v447, v1602, v1603, v1604);
                            let v1606 = constructor_output_reg(ctx, v1605);
                            // Rule at src/isa/s390x/lower.isle line 3110.
                            return Some(v1606);
                        }
                        let v1607 = C::littleendian(ctx, v1595);
                        if let Some(v1608) = v1607 {
                            let v1596 = C::unpack_value_array_3(ctx, v1594);
                            let v1602 = C::put_in_reg(ctx, v1596.1);
                            let v1609 = constructor_bswap_reg(ctx, v447, v1602);
                            let v1610 = C::put_in_reg(ctx, v1596.2);
                            let v1611 = constructor_bswap_reg(ctx, v447, v1610);
                            let v1612 = C::zero_offset(ctx);
                            let v1613 = &constructor_lower_address(ctx, v1595, v1596.0, v1612);
                            let v1614 = constructor_atomic_cas_impl(ctx, v447, v1609, v1611, v1613);
                            let v1615 = constructor_bswap_reg(ctx, v447, v1614);
                            let v1616 = constructor_output_reg(ctx, v1615);
                            // Rule at src/isa/s390x/lower.isle line 3117.
                            return Some(v1616);
                        }
                    }
                    let v289 = C::ty_8_or_16(ctx, v3);
                    if let Some(v290) = v289 {
                        let v1596 = C::unpack_value_array_3(ctx, v1594);
                        let v1602 = C::put_in_reg(ctx, v1596.1);
                        let v1603 = C::put_in_reg(ctx, v1596.2);
                        let v1617 = C::put_in_reg(ctx, v1596.0);
                        let v1618 = constructor_casloop_bitshift(ctx, v1617);
                        let v1619 = constructor_casloop_aligned_addr(ctx, v1617);
                        let v1620 = &C::inst_builder_new(ctx);
                        let v1621 = constructor_casloop_val_reg(ctx);
                        let v1622 = C::writable_reg_to_reg(ctx, v1621);
                        let v1623 =
                            constructor_casloop_rotate_in(ctx, v1620, v290, v1595, v1618, v1622);
                        let v1624 = constructor_casloop_tmp_reg(ctx);
                        let v1625 = constructor_atomic_cas_body(
                            ctx, v1620, v290, v1595, v1624, v1623, v1602, v1603,
                        );
                        let v1626 =
                            constructor_casloop_rotate_out(ctx, v1620, v290, v1595, v1618, v1625);
                        let v1627 = constructor_casloop_subword(
                            ctx, v1620, v290, v1595, v1619, v1618, v1626,
                        );
                        let v1628 = constructor_output_reg(ctx, v1627);
                        // Rule at src/isa/s390x/lower.isle line 3124.
                        return Some(v1628);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1537,
            args: ref v1538,
            flags: v1539,
            op: ref v1540,
        } => {
            if let &Opcode::AtomicRmw = v1537 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v446 = C::ty_32_or_64(ctx, v3);
                    if let Some(v447) = v446 {
                        match v1540 {
                            &AtomicRmwOp::Add => {
                                let v1544 = C::bigendian(ctx, v1539);
                                if let Some(v1545) = v1544 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1547 = C::zero_offset(ctx);
                                    let v1548 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1547);
                                    let v1569 = constructor_atomic_rmw_add(ctx, v447, v1546, v1548);
                                    let v1570 = constructor_output_reg(ctx, v1569);
                                    // Rule at src/isa/s390x/lower.isle line 2890.
                                    return Some(v1570);
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v1544 = C::bigendian(ctx, v1539);
                                if let Some(v1545) = v1544 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1547 = C::zero_offset(ctx);
                                    let v1548 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1547);
                                    let v1549 = constructor_atomic_rmw_and(ctx, v447, v1546, v1548);
                                    let v1550 = constructor_output_reg(ctx, v1549);
                                    // Rule at src/isa/s390x/lower.isle line 2854.
                                    return Some(v1550);
                                }
                                let v1551 = C::littleendian(ctx, v1539);
                                if let Some(v1552) = v1551 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1553 = constructor_bswap_reg(ctx, v447, v1546);
                                    let v1554 = C::zero_offset(ctx);
                                    let v1555 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1554);
                                    let v1556 = constructor_atomic_rmw_and(ctx, v447, v1553, v1555);
                                    let v1557 = constructor_bswap_reg(ctx, v447, v1556);
                                    let v1558 = constructor_output_reg(ctx, v1557);
                                    // Rule at src/isa/s390x/lower.isle line 2860.
                                    return Some(v1558);
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v1544 = C::bigendian(ctx, v1539);
                                if let Some(v1545) = v1544 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1547 = C::zero_offset(ctx);
                                    let v1548 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1547);
                                    let v1559 = constructor_atomic_rmw_or(ctx, v447, v1546, v1548);
                                    let v1560 = constructor_output_reg(ctx, v1559);
                                    // Rule at src/isa/s390x/lower.isle line 2866.
                                    return Some(v1560);
                                }
                                let v1551 = C::littleendian(ctx, v1539);
                                if let Some(v1552) = v1551 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1553 = constructor_bswap_reg(ctx, v447, v1546);
                                    let v1554 = C::zero_offset(ctx);
                                    let v1555 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1554);
                                    let v1561 = constructor_atomic_rmw_or(ctx, v447, v1553, v1555);
                                    let v1562 = constructor_bswap_reg(ctx, v447, v1561);
                                    let v1563 = constructor_output_reg(ctx, v1562);
                                    // Rule at src/isa/s390x/lower.isle line 2872.
                                    return Some(v1563);
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v1544 = C::bigendian(ctx, v1539);
                                if let Some(v1545) = v1544 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1571 = constructor_neg_reg(ctx, v447, v1546);
                                    let v1554 = C::zero_offset(ctx);
                                    let v1555 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1554);
                                    let v1572 = constructor_atomic_rmw_add(ctx, v447, v1571, v1555);
                                    let v1573 = constructor_output_reg(ctx, v1572);
                                    // Rule at src/isa/s390x/lower.isle line 2896.
                                    return Some(v1573);
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v1544 = C::bigendian(ctx, v1539);
                                if let Some(v1545) = v1544 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1547 = C::zero_offset(ctx);
                                    let v1548 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1547);
                                    let v1564 = constructor_atomic_rmw_xor(ctx, v447, v1546, v1548);
                                    let v1565 = constructor_output_reg(ctx, v1564);
                                    // Rule at src/isa/s390x/lower.isle line 2878.
                                    return Some(v1565);
                                }
                                let v1551 = C::littleendian(ctx, v1539);
                                if let Some(v1552) = v1551 {
                                    let v1541 = C::unpack_value_array_2(ctx, v1538);
                                    let v1546 = C::put_in_reg(ctx, v1541.1);
                                    let v1553 = constructor_bswap_reg(ctx, v447, v1546);
                                    let v1554 = C::zero_offset(ctx);
                                    let v1555 =
                                        &constructor_lower_address(ctx, v1539, v1541.0, v1554);
                                    let v1566 = constructor_atomic_rmw_xor(ctx, v447, v1553, v1555);
                                    let v1567 = constructor_bswap_reg(ctx, v447, v1566);
                                    let v1568 = constructor_output_reg(ctx, v1567);
                                    // Rule at src/isa/s390x/lower.isle line 2884.
                                    return Some(v1568);
                                }
                            }
                            _ => {}
                        }
                        let v1541 = C::unpack_value_array_2(ctx, v1538);
                        let v1546 = C::put_in_reg(ctx, v1541.1);
                        let v1574 = C::put_in_reg(ctx, v1541.0);
                        let v1575 = &C::inst_builder_new(ctx);
                        let v1576 = constructor_casloop_val_reg(ctx);
                        let v1577 = C::writable_reg_to_reg(ctx, v1576);
                        let v1578 = constructor_casloop_tmp_reg(ctx);
                        let v1579 = constructor_atomic_rmw_body(
                            ctx, v1575, v447, v1539, v1540, v1578, v1577, v1546,
                        );
                        let v1580 = constructor_casloop(ctx, v1575, v447, v1539, v1574, v1579);
                        let v1581 = constructor_output_reg(ctx, v1580);
                        // Rule at src/isa/s390x/lower.isle line 2905.
                        return Some(v1581);
                    }
                    let v289 = C::ty_8_or_16(ctx, v3);
                    if let Some(v290) = v289 {
                        let v1541 = C::unpack_value_array_2(ctx, v1538);
                        let v1546 = C::put_in_reg(ctx, v1541.1);
                        let v1574 = C::put_in_reg(ctx, v1541.0);
                        let v1582 = constructor_casloop_bitshift(ctx, v1574);
                        let v1583 = constructor_casloop_aligned_addr(ctx, v1574);
                        let v1584 = &C::inst_builder_new(ctx);
                        let v1585 = constructor_casloop_val_reg(ctx);
                        let v1586 = C::writable_reg_to_reg(ctx, v1585);
                        let v1587 =
                            constructor_casloop_rotate_in(ctx, v1584, v290, v1539, v1582, v1586);
                        let v1588 = constructor_casloop_tmp_reg(ctx);
                        let v1589 = constructor_atomic_rmw_body(
                            ctx, v1584, v290, v1539, v1540, v1588, v1587, v1546,
                        );
                        let v1590 =
                            constructor_casloop_rotate_out(ctx, v1584, v290, v1539, v1582, v1589);
                        let v1591 = constructor_casloop_subword(
                            ctx, v1584, v290, v1539, v1583, v1582, v1590,
                        );
                        let v1592 = constructor_output_reg(ctx, v1591);
                        // Rule at src/isa/s390x/lower.isle line 2917.
                        return Some(v1592);
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v37,
            args: ref v38,
        } => {
            match v37 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v1362 = &C::lane_order(ctx);
                            match v1362 {
                                &LaneOrder::LittleEndian => {
                                    let v1369 = constructor_vec_imm(ctx, v149, 0x0);
                                    let v39 = C::unpack_value_array_2(ctx, v38);
                                    let v43 = C::put_in_reg(ctx, v39.0);
                                    let v1371 = constructor_vec_imm_splat(ctx, I8X16, 0xEF);
                                    let v318 = C::put_in_reg(ctx, v39.1);
                                    let v1372 = constructor_vec_not(ctx, I8X16, v318);
                                    let v1373 = constructor_vec_umax(ctx, I8X16, v1371, v1372);
                                    let v1374 =
                                        constructor_vec_permute(ctx, v149, v1369, v43, v1373);
                                    let v1375 = constructor_output_reg(ctx, v1374);
                                    // Rule at src/isa/s390x/lower.isle line 2207.
                                    return Some(v1375);
                                }
                                &LaneOrder::BigEndian => {
                                    let v39 = C::unpack_value_array_2(ctx, v38);
                                    let v62 = C::put_in_reg(ctx, v39.0);
                                    let v1363 = constructor_vec_imm(ctx, v149, 0x0);
                                    let v1365 = constructor_vec_imm_splat(ctx, I8X16, 0x10);
                                    let v318 = C::put_in_reg(ctx, v39.1);
                                    let v1366 = constructor_vec_umin(ctx, I8X16, v1365, v318);
                                    let v1367 =
                                        constructor_vec_permute(ctx, v149, v62, v1363, v1366);
                                    let v1368 = constructor_output_reg(ctx, v1367);
                                    // Rule at src/isa/s390x/lower.isle line 2188.
                                    return Some(v1368);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v253 = constructor_vec_smin(ctx, v149, v62, v63);
                            let v254 = constructor_output_reg(ctx, v253);
                            // Rule at src/isa/s390x/lower.isle line 263.
                            return Some(v254);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v249 = constructor_vec_umin(ctx, v149, v62, v63);
                            let v250 = constructor_output_reg(ctx, v249);
                            // Rule at src/isa/s390x/lower.isle line 249.
                            return Some(v250);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v251 = constructor_vec_smax(ctx, v149, v62, v63);
                            let v252 = constructor_output_reg(ctx, v251);
                            // Rule at src/isa/s390x/lower.isle line 256.
                            return Some(v252);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v247 = constructor_vec_umax(ctx, v149, v62, v63);
                            let v248 = constructor_output_reg(ctx, v247);
                            // Rule at src/isa/s390x/lower.isle line 242.
                            return Some(v248);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v255 = constructor_vec_uavg(ctx, v149, v62, v63);
                            let v256 = constructor_output_reg(ctx, v255);
                            // Rule at src/isa/s390x/lower.isle line 270.
                            return Some(v256);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v150 = constructor_vec_add(ctx, v149, v62, v63);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v152 = constructor_vec_cmphl(ctx, v149, v151, v150);
                            let v153 = constructor_vec_or(ctx, v149, v150, v152);
                            let v154 = constructor_output_reg(ctx, v153);
                            // Rule at src/isa/s390x/lower.isle line 116.
                            return Some(v154);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v161 = constructor_vec_add(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v167 = constructor_vec_add(ctx, v162, v164, v166);
                            let v168 = constructor_vec_pack_ssat(ctx, v155, v161, v167);
                            let v169 = constructor_output_reg(ctx, v168);
                            // Rule at src/isa/s390x/lower.isle line 124.
                            return Some(v169);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v208 = constructor_vec_sub(ctx, v149, v62, v63);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v209 = constructor_vec_cmphl(ctx, v149, v151, v159);
                            let v210 = constructor_vec_and(ctx, v149, v208, v209);
                            let v211 = constructor_output_reg(ctx, v210);
                            // Rule at src/isa/s390x/lower.isle line 180.
                            return Some(v211);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v212 = constructor_vec_sub(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v213 = constructor_vec_sub(ctx, v162, v164, v166);
                            let v214 = constructor_vec_pack_ssat(ctx, v155, v212, v213);
                            let v215 = constructor_output_reg(ctx, v214);
                            // Rule at src/isa/s390x/lower.isle line 187.
                            return Some(v215);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Sextend = v78 {
                                        let v80 = C::value_type(ctx, v79);
                                        if v80 == I32 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v82 =
                                                constructor_add_reg_sext32(ctx, v61, v42, v81);
                                            let v83 = constructor_output_reg(ctx, v82);
                                            // Rule at src/isa/s390x/lower.isle line 73.
                                            return Some(v83);
                                        }
                                    }
                                }
                            }
                            let v88 = C::i16_from_value(ctx, v39.0);
                            if let Some(v89) = v88 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v90 = constructor_add_simm16(ctx, v61, v42, v89);
                                let v91 = constructor_output_reg(ctx, v90);
                                // Rule at src/isa/s390x/lower.isle line 79.
                                return Some(v91);
                            }
                            let v96 = C::i32_from_value(ctx, v39.0);
                            if let Some(v97) = v96 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v98 = constructor_add_simm32(ctx, v61, v42, v97);
                                let v99 = constructor_output_reg(ctx, v98);
                                // Rule at src/isa/s390x/lower.isle line 83.
                                return Some(v99);
                            }
                            let v118 = C::sinkable_inst(ctx, v39.0);
                            if let Some(v119) = v118 {
                                let v120 = &C::inst_data(ctx, v119);
                                if let &InstructionData::Load {
                                    opcode: ref v121,
                                    arg: v122,
                                    flags: v123,
                                    offset: v124,
                                } = v120
                                {
                                    match v121 {
                                        &Opcode::Load => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v115 = C::value_type(ctx, v39.0);
                                                let v116 = C::ty_32_or_64(ctx, v115);
                                                if let Some(v117) = v116 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v128 =
                                                        constructor_add_mem(ctx, v61, v42, v127);
                                                    let v129 = constructor_output_reg(ctx, v128);
                                                    // Rule at src/isa/s390x/lower.isle line 89.
                                                    return Some(v129);
                                                }
                                                if v115 == I16 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v132 = constructor_add_mem_sext16(
                                                        ctx, v61, v42, v127,
                                                    );
                                                    let v133 = constructor_output_reg(ctx, v132);
                                                    // Rule at src/isa/s390x/lower.isle line 95.
                                                    return Some(v133);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v137 = &constructor_sink_sload16(ctx, v119);
                                                let v138 =
                                                    constructor_add_mem_sext16(ctx, v61, v42, v137);
                                                let v139 = constructor_output_reg(ctx, v138);
                                                // Rule at src/isa/s390x/lower.isle line 101.
                                                return Some(v139);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v143 = &constructor_sink_sload32(ctx, v119);
                                                let v144 =
                                                    constructor_add_mem_sext32(ctx, v61, v42, v143);
                                                let v145 = constructor_output_reg(ctx, v144);
                                                // Rule at src/isa/s390x/lower.isle line 105.
                                                return Some(v145);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v73 =
                                                constructor_add_reg_sext32(ctx, v61, v62, v72);
                                            let v74 = constructor_output_reg(ctx, v73);
                                            // Rule at src/isa/s390x/lower.isle line 71.
                                            return Some(v74);
                                        }
                                    }
                                }
                            }
                            let v84 = C::i16_from_value(ctx, v39.1);
                            if let Some(v85) = v84 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v86 = constructor_add_simm16(ctx, v61, v62, v85);
                                let v87 = constructor_output_reg(ctx, v86);
                                // Rule at src/isa/s390x/lower.isle line 77.
                                return Some(v87);
                            }
                            let v92 = C::i32_from_value(ctx, v39.1);
                            if let Some(v93) = v92 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v94 = constructor_add_simm32(ctx, v61, v62, v93);
                                let v95 = constructor_output_reg(ctx, v94);
                                // Rule at src/isa/s390x/lower.isle line 81.
                                return Some(v95);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v113 =
                                                        constructor_add_mem(ctx, v61, v62, v112);
                                                    let v114 = constructor_output_reg(ctx, v113);
                                                    // Rule at src/isa/s390x/lower.isle line 87.
                                                    return Some(v114);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v130 = constructor_add_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v131 = constructor_output_reg(ctx, v130);
                                                    // Rule at src/isa/s390x/lower.isle line 93.
                                                    return Some(v131);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v135 =
                                                    constructor_add_mem_sext16(ctx, v61, v62, v134);
                                                let v136 = constructor_output_reg(ctx, v135);
                                                // Rule at src/isa/s390x/lower.isle line 99.
                                                return Some(v136);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v141 =
                                                    constructor_add_mem_sext32(ctx, v61, v62, v140);
                                                let v142 = constructor_output_reg(ctx, v141);
                                                // Rule at src/isa/s390x/lower.isle line 103.
                                                return Some(v142);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v146 = constructor_vec_add(ctx, v36, v62, v63);
                            let v147 = constructor_output_reg(ctx, v146);
                            // Rule at src/isa/s390x/lower.isle line 109.
                            return Some(v147);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v64 = constructor_add_reg(ctx, v61, v62, v63);
                            let v65 = constructor_output_reg(ctx, v64);
                            // Rule at src/isa/s390x/lower.isle line 67.
                            return Some(v65);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v188 =
                                                constructor_sub_reg_sext32(ctx, v61, v62, v72);
                                            let v189 = constructor_output_reg(ctx, v188);
                                            // Rule at src/isa/s390x/lower.isle line 149.
                                            return Some(v189);
                                        }
                                    }
                                }
                            }
                            let v190 = C::i16_from_negated_value(ctx, v39.1);
                            if let Some(v191) = v190 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v192 = constructor_add_simm16(ctx, v61, v62, v191);
                                let v193 = constructor_output_reg(ctx, v192);
                                // Rule at src/isa/s390x/lower.isle line 153.
                                return Some(v193);
                            }
                            let v194 = C::i32_from_negated_value(ctx, v39.1);
                            if let Some(v195) = v194 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v196 = constructor_add_simm32(ctx, v61, v62, v195);
                                let v197 = constructor_output_reg(ctx, v196);
                                // Rule at src/isa/s390x/lower.isle line 155.
                                return Some(v197);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v198 =
                                                        constructor_sub_mem(ctx, v61, v62, v112);
                                                    let v199 = constructor_output_reg(ctx, v198);
                                                    // Rule at src/isa/s390x/lower.isle line 159.
                                                    return Some(v199);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v200 = constructor_sub_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v201 = constructor_output_reg(ctx, v200);
                                                    // Rule at src/isa/s390x/lower.isle line 163.
                                                    return Some(v201);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v202 =
                                                    constructor_sub_mem_sext16(ctx, v61, v62, v134);
                                                let v203 = constructor_output_reg(ctx, v202);
                                                // Rule at src/isa/s390x/lower.isle line 167.
                                                return Some(v203);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v204 =
                                                    constructor_sub_mem_sext32(ctx, v61, v62, v140);
                                                let v205 = constructor_output_reg(ctx, v204);
                                                // Rule at src/isa/s390x/lower.isle line 169.
                                                return Some(v205);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v206 = constructor_vec_sub(ctx, v36, v62, v63);
                            let v207 = constructor_output_reg(ctx, v206);
                            // Rule at src/isa/s390x/lower.isle line 173.
                            return Some(v207);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v186 = constructor_sub_reg(ctx, v61, v62, v63);
                            let v187 = constructor_output_reg(ctx, v186);
                            // Rule at src/isa/s390x/lower.isle line 145.
                            return Some(v187);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v75 = C::def_inst(ctx, v39.0);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Sextend = v78 {
                                        let v80 = C::value_type(ctx, v79);
                                        if v80 == I32 {
                                            let v42 = C::put_in_reg(ctx, v39.1);
                                            let v81 = C::put_in_reg(ctx, v79);
                                            let v261 =
                                                constructor_mul_reg_sext32(ctx, v61, v42, v81);
                                            let v262 = constructor_output_reg(ctx, v261);
                                            // Rule at src/isa/s390x/lower.isle line 283.
                                            return Some(v262);
                                        }
                                    }
                                }
                            }
                            let v88 = C::i16_from_value(ctx, v39.0);
                            if let Some(v89) = v88 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v265 = constructor_mul_simm16(ctx, v61, v42, v89);
                                let v266 = constructor_output_reg(ctx, v265);
                                // Rule at src/isa/s390x/lower.isle line 289.
                                return Some(v266);
                            }
                            let v96 = C::i32_from_value(ctx, v39.0);
                            if let Some(v97) = v96 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v269 = constructor_mul_simm32(ctx, v61, v42, v97);
                                let v270 = constructor_output_reg(ctx, v269);
                                // Rule at src/isa/s390x/lower.isle line 293.
                                return Some(v270);
                            }
                            let v118 = C::sinkable_inst(ctx, v39.0);
                            if let Some(v119) = v118 {
                                let v120 = &C::inst_data(ctx, v119);
                                if let &InstructionData::Load {
                                    opcode: ref v121,
                                    arg: v122,
                                    flags: v123,
                                    offset: v124,
                                } = v120
                                {
                                    match v121 {
                                        &Opcode::Load => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v115 = C::value_type(ctx, v39.0);
                                                let v116 = C::ty_32_or_64(ctx, v115);
                                                if let Some(v117) = v116 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v273 =
                                                        constructor_mul_mem(ctx, v61, v42, v127);
                                                    let v274 = constructor_output_reg(ctx, v273);
                                                    // Rule at src/isa/s390x/lower.isle line 299.
                                                    return Some(v274);
                                                }
                                                if v115 == I16 {
                                                    let v42 = C::put_in_reg(ctx, v39.1);
                                                    let v127 = &constructor_sink_load(ctx, v119);
                                                    let v277 = constructor_mul_mem_sext16(
                                                        ctx, v61, v42, v127,
                                                    );
                                                    let v278 = constructor_output_reg(ctx, v277);
                                                    // Rule at src/isa/s390x/lower.isle line 305.
                                                    return Some(v278);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v137 = &constructor_sink_sload16(ctx, v119);
                                                let v281 =
                                                    constructor_mul_mem_sext16(ctx, v61, v42, v137);
                                                let v282 = constructor_output_reg(ctx, v281);
                                                // Rule at src/isa/s390x/lower.isle line 311.
                                                return Some(v282);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v143 = &constructor_sink_sload32(ctx, v119);
                                                let v285 =
                                                    constructor_mul_mem_sext32(ctx, v61, v42, v143);
                                                let v286 = constructor_output_reg(ctx, v285);
                                                // Rule at src/isa/s390x/lower.isle line 315.
                                                return Some(v286);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v66 = C::def_inst(ctx, v39.1);
                            if let Some(v67) = v66 {
                                let v68 = &C::inst_data(ctx, v67);
                                if let &InstructionData::Unary {
                                    opcode: ref v69,
                                    arg: v70,
                                } = v68
                                {
                                    if let &Opcode::Sextend = v69 {
                                        let v71 = C::value_type(ctx, v70);
                                        if v71 == I32 {
                                            let v62 = C::put_in_reg(ctx, v39.0);
                                            let v72 = C::put_in_reg(ctx, v70);
                                            let v259 =
                                                constructor_mul_reg_sext32(ctx, v61, v62, v72);
                                            let v260 = constructor_output_reg(ctx, v259);
                                            // Rule at src/isa/s390x/lower.isle line 281.
                                            return Some(v260);
                                        }
                                    }
                                }
                            }
                            let v84 = C::i16_from_value(ctx, v39.1);
                            if let Some(v85) = v84 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v263 = constructor_mul_simm16(ctx, v61, v62, v85);
                                let v264 = constructor_output_reg(ctx, v263);
                                // Rule at src/isa/s390x/lower.isle line 287.
                                return Some(v264);
                            }
                            let v92 = C::i32_from_value(ctx, v39.1);
                            if let Some(v93) = v92 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v267 = constructor_mul_simm32(ctx, v61, v62, v93);
                                let v268 = constructor_output_reg(ctx, v267);
                                // Rule at src/isa/s390x/lower.isle line 291.
                                return Some(v268);
                            }
                            let v103 = C::sinkable_inst(ctx, v39.1);
                            if let Some(v104) = v103 {
                                let v105 = &C::inst_data(ctx, v104);
                                if let &InstructionData::Load {
                                    opcode: ref v106,
                                    arg: v107,
                                    flags: v108,
                                    offset: v109,
                                } = v105
                                {
                                    match v106 {
                                        &Opcode::Load => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v100 = C::value_type(ctx, v39.1);
                                                let v101 = C::ty_32_or_64(ctx, v100);
                                                if let Some(v102) = v101 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v271 =
                                                        constructor_mul_mem(ctx, v61, v62, v112);
                                                    let v272 = constructor_output_reg(ctx, v271);
                                                    // Rule at src/isa/s390x/lower.isle line 297.
                                                    return Some(v272);
                                                }
                                                if v100 == I16 {
                                                    let v62 = C::put_in_reg(ctx, v39.0);
                                                    let v112 = &constructor_sink_load(ctx, v104);
                                                    let v275 = constructor_mul_mem_sext16(
                                                        ctx, v61, v62, v112,
                                                    );
                                                    let v276 = constructor_output_reg(ctx, v275);
                                                    // Rule at src/isa/s390x/lower.isle line 303.
                                                    return Some(v276);
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v134 = &constructor_sink_sload16(ctx, v104);
                                                let v279 =
                                                    constructor_mul_mem_sext16(ctx, v61, v62, v134);
                                                let v280 = constructor_output_reg(ctx, v279);
                                                // Rule at src/isa/s390x/lower.isle line 309.
                                                return Some(v280);
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v140 = &constructor_sink_sload32(ctx, v104);
                                                let v283 =
                                                    constructor_mul_mem_sext32(ctx, v61, v62, v140);
                                                let v284 = constructor_output_reg(ctx, v283);
                                                // Rule at src/isa/s390x/lower.isle line 313.
                                                return Some(v284);
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v287 = constructor_vec_mul_impl(ctx, v36, v62, v63);
                            let v288 = constructor_output_reg(ctx, v287);
                            // Rule at src/isa/s390x/lower.isle line 320.
                            return Some(v288);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v257 = constructor_mul_reg(ctx, v61, v62, v63);
                            let v258 = constructor_output_reg(ctx, v257);
                            // Rule at src/isa/s390x/lower.isle line 277.
                            return Some(v258);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v298 = constructor_put_in_reg_zext64(ctx, v39.0);
                                let v299 = constructor_put_in_reg_zext64(ctx, v39.1);
                                let v301 = constructor_mul_reg(ctx, I64, v298, v299);
                                let v303 = constructor_lshr_imm(ctx, I64, v301, 0x20);
                                let v304 = constructor_output_reg(ctx, v303);
                                // Rule at src/isa/s390x/lower.isle line 361.
                                return Some(v304);
                            }
                            I64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v305 = constructor_umul_wide(ctx, v62, v63);
                                let v306 = C::regpair_hi(ctx, v305);
                                let v307 = constructor_copy_reg(ctx, I64, v306);
                                let v308 = constructor_output_reg(ctx, v307);
                                // Rule at src/isa/s390x/lower.isle line 368.
                                return Some(v308);
                            }
                            I8X16 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v309 = constructor_vec_umulhi(ctx, I8X16, v62, v63);
                                let v310 = constructor_output_reg(ctx, v309);
                                // Rule at src/isa/s390x/lower.isle line 373.
                                return Some(v310);
                            }
                            I16X8 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v312 = constructor_vec_umulhi(ctx, I16X8, v62, v63);
                                let v313 = constructor_output_reg(ctx, v312);
                                // Rule at src/isa/s390x/lower.isle line 374.
                                return Some(v313);
                            }
                            I32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v315 = constructor_vec_umulhi(ctx, I32X4, v62, v63);
                                let v316 = constructor_output_reg(ctx, v315);
                                // Rule at src/isa/s390x/lower.isle line 375.
                                return Some(v316);
                            }
                            I64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v52 = C::zero_reg(ctx);
                                let v317 = constructor_vec_extract_lane(ctx, I64X2, v62, 0x0, v52);
                                let v318 = C::put_in_reg(ctx, v39.1);
                                let v319 = C::zero_reg(ctx);
                                let v320 =
                                    constructor_vec_extract_lane(ctx, I64X2, v318, 0x0, v319);
                                let v321 = constructor_umul_wide(ctx, v317, v320);
                                let v322 = C::regpair_hi(ctx, v321);
                                let v323 = constructor_copy_reg(ctx, I64, v322);
                                let v324 = C::put_in_reg(ctx, v39.0);
                                let v325 = C::zero_reg(ctx);
                                let v326 =
                                    constructor_vec_extract_lane(ctx, I64X2, v324, 0x1, v325);
                                let v327 = C::put_in_reg(ctx, v39.1);
                                let v328 = C::zero_reg(ctx);
                                let v329 =
                                    constructor_vec_extract_lane(ctx, I64X2, v327, 0x1, v328);
                                let v330 = constructor_umul_wide(ctx, v326, v329);
                                let v331 = C::regpair_hi(ctx, v330);
                                let v332 = constructor_copy_reg(ctx, I64, v331);
                                let v333 = constructor_mov_to_vec128(ctx, I64X2, v323, v332);
                                let v334 = constructor_output_reg(ctx, v333);
                                // Rule at src/isa/s390x/lower.isle line 379.
                                return Some(v334);
                            }
                            _ => {}
                        }
                        let v289 = C::ty_8_or_16(ctx, v3);
                        if let Some(v290) = v289 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v292 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v294 = constructor_mul_reg(ctx, I32, v291, v292);
                            let v295 = C::ty_bits(ctx, v290);
                            let v296 = constructor_lshr_imm(ctx, I32, v294, v295);
                            let v297 = constructor_output_reg(ctx, v296);
                            // Rule at src/isa/s390x/lower.isle line 354.
                            return Some(v297);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v340 = constructor_put_in_reg_sext64(ctx, v39.0);
                                let v341 = constructor_put_in_reg_sext64(ctx, v39.1);
                                let v342 = constructor_mul_reg(ctx, I64, v340, v341);
                                let v343 = constructor_ashr_imm(ctx, I64, v342, 0x20);
                                let v344 = constructor_output_reg(ctx, v343);
                                // Rule at src/isa/s390x/lower.isle line 399.
                                return Some(v344);
                            }
                            I64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v345 = constructor_smul_wide(ctx, v62, v63);
                                let v346 = C::regpair_hi(ctx, v345);
                                let v347 = constructor_copy_reg(ctx, I64, v346);
                                let v348 = constructor_output_reg(ctx, v347);
                                // Rule at src/isa/s390x/lower.isle line 406.
                                return Some(v348);
                            }
                            I8X16 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v349 = constructor_vec_smulhi(ctx, I8X16, v62, v63);
                                let v350 = constructor_output_reg(ctx, v349);
                                // Rule at src/isa/s390x/lower.isle line 411.
                                return Some(v350);
                            }
                            I16X8 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v351 = constructor_vec_smulhi(ctx, I16X8, v62, v63);
                                let v352 = constructor_output_reg(ctx, v351);
                                // Rule at src/isa/s390x/lower.isle line 412.
                                return Some(v352);
                            }
                            I32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v353 = constructor_vec_smulhi(ctx, I32X4, v62, v63);
                                let v354 = constructor_output_reg(ctx, v353);
                                // Rule at src/isa/s390x/lower.isle line 413.
                                return Some(v354);
                            }
                            I64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v52 = C::zero_reg(ctx);
                                let v317 = constructor_vec_extract_lane(ctx, I64X2, v62, 0x0, v52);
                                let v318 = C::put_in_reg(ctx, v39.1);
                                let v319 = C::zero_reg(ctx);
                                let v320 =
                                    constructor_vec_extract_lane(ctx, I64X2, v318, 0x0, v319);
                                let v355 = constructor_smul_wide(ctx, v317, v320);
                                let v356 = C::regpair_hi(ctx, v355);
                                let v357 = constructor_copy_reg(ctx, I64, v356);
                                let v324 = C::put_in_reg(ctx, v39.0);
                                let v325 = C::zero_reg(ctx);
                                let v326 =
                                    constructor_vec_extract_lane(ctx, I64X2, v324, 0x1, v325);
                                let v327 = C::put_in_reg(ctx, v39.1);
                                let v328 = C::zero_reg(ctx);
                                let v329 =
                                    constructor_vec_extract_lane(ctx, I64X2, v327, 0x1, v328);
                                let v358 = constructor_smul_wide(ctx, v326, v329);
                                let v359 = C::regpair_hi(ctx, v358);
                                let v360 = constructor_copy_reg(ctx, I64, v359);
                                let v361 = constructor_mov_to_vec128(ctx, I64X2, v357, v360);
                                let v362 = constructor_output_reg(ctx, v361);
                                // Rule at src/isa/s390x/lower.isle line 417.
                                return Some(v362);
                            }
                            _ => {}
                        }
                        let v289 = C::ty_8_or_16(ctx, v3);
                        if let Some(v290) = v289 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v335 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v336 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v337 = constructor_mul_reg(ctx, I32, v335, v336);
                            let v295 = C::ty_bits(ctx, v290);
                            let v338 = constructor_ashr_imm(ctx, I32, v337, v295);
                            let v339 = constructor_output_reg(ctx, v338);
                            // Rule at src/isa/s390x/lower.isle line 392.
                            return Some(v339);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v155 = constructor_vec_widen_type(ctx, v149);
                            let v156 = constructor_vec_widen_type(ctx, v149);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v158 = constructor_vec_unpacks_high(ctx, v149, v157);
                            let v159 = C::put_in_reg(ctx, v39.1);
                            let v160 = constructor_vec_unpacks_high(ctx, v149, v159);
                            let v367 = constructor_sqmul_impl(ctx, v156, v158, v160);
                            let v162 = constructor_vec_widen_type(ctx, v149);
                            let v163 = C::put_in_reg(ctx, v39.0);
                            let v164 = constructor_vec_unpacks_low(ctx, v149, v163);
                            let v165 = C::put_in_reg(ctx, v39.1);
                            let v166 = constructor_vec_unpacks_low(ctx, v149, v165);
                            let v368 = constructor_sqmul_impl(ctx, v162, v164, v166);
                            let v369 = constructor_vec_pack_ssat(ctx, v155, v367, v368);
                            let v370 = constructor_output_reg(ctx, v369);
                            // Rule at src/isa/s390x/lower.isle line 439.
                            return Some(v370);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v371 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v372 = constructor_ty_ext32(ctx, v61);
                            let v373 = constructor_imm(ctx, v372, 0x0);
                            let v374 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v375 = C::regpair(ctx, v373, v374);
                            let v376 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v377 = constructor_ty_ext32(ctx, v61);
                            let v378 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v371, v377, v376);
                            let v379 = constructor_udivmod(ctx, v377, v375, v376);
                            let v380 = C::regpair_lo(ctx, v379);
                            let v381 = constructor_copy_reg(ctx, v61, v380);
                            let v382 = constructor_output_reg(ctx, v381);
                            // Rule at src/isa/s390x/lower.isle line 477.
                            return Some(v382);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v371 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v386 = constructor_div_overflow_check_needed(ctx, v39.1);
                            let v387 = constructor_put_in_reg_sext64(ctx, v39.0);
                            let v388 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v389 = constructor_ty_ext32(ctx, v61);
                            let v390 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v371, v389, v388);
                            let v391 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, v386, v389, v61, v387, v388,
                            );
                            let v392 = constructor_sdivmod(ctx, v389, v387, v388);
                            let v393 = C::regpair_lo(ctx, v392);
                            let v394 = constructor_copy_reg(ctx, v61, v393);
                            let v395 = constructor_output_reg(ctx, v394);
                            // Rule at src/isa/s390x/lower.isle line 551.
                            return Some(v395);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v371 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v372 = constructor_ty_ext32(ctx, v61);
                            let v373 = constructor_imm(ctx, v372, 0x0);
                            let v374 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v375 = C::regpair(ctx, v373, v374);
                            let v376 = constructor_put_in_reg_zext32(ctx, v39.1);
                            let v377 = constructor_ty_ext32(ctx, v61);
                            let v378 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v371, v377, v376);
                            let v379 = constructor_udivmod(ctx, v377, v375, v376);
                            let v383 = C::regpair_hi(ctx, v379);
                            let v384 = constructor_copy_reg(ctx, v61, v383);
                            let v385 = constructor_output_reg(ctx, v384);
                            // Rule at src/isa/s390x/lower.isle line 500.
                            return Some(v385);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v371 = constructor_zero_divisor_check_needed(ctx, v39.1);
                            let v386 = constructor_div_overflow_check_needed(ctx, v39.1);
                            let v387 = constructor_put_in_reg_sext64(ctx, v39.0);
                            let v388 = constructor_put_in_reg_sext32(ctx, v39.1);
                            let v389 = constructor_ty_ext32(ctx, v61);
                            let v390 =
                                constructor_maybe_trap_if_zero_divisor(ctx, v371, v389, v388);
                            let v396 =
                                constructor_maybe_avoid_srem_overflow(ctx, v386, v389, v387, v388);
                            let v397 = constructor_sdivmod(ctx, v389, v396, v388);
                            let v398 = C::regpair_hi(ctx, v397);
                            let v399 = constructor_copy_reg(ctx, v61, v398);
                            let v400 = constructor_output_reg(ctx, v399);
                            // Rule at src/isa/s390x/lower.isle line 573.
                            return Some(v400);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v580 = C::uimm16shifted_from_inverted_value(ctx, v39.0);
                            if let Some(v581) = v580 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v582 = constructor_and_uimm16shifted(ctx, v61, v42, v581);
                                let v583 = constructor_output_reg(ctx, v582);
                                // Rule at src/isa/s390x/lower.isle line 969.
                                return Some(v583);
                            }
                            let v576 = C::uimm16shifted_from_inverted_value(ctx, v39.1);
                            if let Some(v577) = v576 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v578 = constructor_and_uimm16shifted(ctx, v61, v62, v577);
                                let v579 = constructor_output_reg(ctx, v578);
                                // Rule at src/isa/s390x/lower.isle line 967.
                                return Some(v579);
                            }
                            let v588 = C::uimm32shifted_from_inverted_value(ctx, v39.0);
                            if let Some(v589) = v588 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v590 = constructor_and_uimm32shifted(ctx, v61, v42, v589);
                                let v591 = constructor_output_reg(ctx, v590);
                                // Rule at src/isa/s390x/lower.isle line 973.
                                return Some(v591);
                            }
                            let v584 = C::uimm32shifted_from_inverted_value(ctx, v39.1);
                            if let Some(v585) = v584 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v586 = constructor_and_uimm32shifted(ctx, v61, v62, v585);
                                let v587 = constructor_output_reg(ctx, v586);
                                // Rule at src/isa/s390x/lower.isle line 971.
                                return Some(v587);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v594 = constructor_and_mem(ctx, v61, v42, v127);
                                                let v595 = constructor_output_reg(ctx, v594);
                                                // Rule at src/isa/s390x/lower.isle line 979.
                                                return Some(v595);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v592 = constructor_and_mem(ctx, v61, v62, v112);
                                                let v593 = constructor_output_reg(ctx, v592);
                                                // Rule at src/isa/s390x/lower.isle line 977.
                                                return Some(v593);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v596 = constructor_vec_and(ctx, v36, v62, v63);
                            let v597 = constructor_output_reg(ctx, v596);
                            // Rule at src/isa/s390x/lower.isle line 983.
                            return Some(v597);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v574 = constructor_and_reg(ctx, v61, v62, v63);
                            let v575 = constructor_output_reg(ctx, v574);
                            // Rule at src/isa/s390x/lower.isle line 963.
                            return Some(v575);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v604 = C::uimm16shifted_from_value(ctx, v39.0);
                            if let Some(v605) = v604 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v606 = constructor_or_uimm16shifted(ctx, v61, v42, v605);
                                let v607 = constructor_output_reg(ctx, v606);
                                // Rule at src/isa/s390x/lower.isle line 995.
                                return Some(v607);
                            }
                            let v600 = C::uimm16shifted_from_value(ctx, v39.1);
                            if let Some(v601) = v600 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v602 = constructor_or_uimm16shifted(ctx, v61, v62, v601);
                                let v603 = constructor_output_reg(ctx, v602);
                                // Rule at src/isa/s390x/lower.isle line 993.
                                return Some(v603);
                            }
                            let v612 = C::uimm32shifted_from_value(ctx, v39.0);
                            if let Some(v613) = v612 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v614 = constructor_or_uimm32shifted(ctx, v61, v42, v613);
                                let v615 = constructor_output_reg(ctx, v614);
                                // Rule at src/isa/s390x/lower.isle line 999.
                                return Some(v615);
                            }
                            let v608 = C::uimm32shifted_from_value(ctx, v39.1);
                            if let Some(v609) = v608 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v610 = constructor_or_uimm32shifted(ctx, v61, v62, v609);
                                let v611 = constructor_output_reg(ctx, v610);
                                // Rule at src/isa/s390x/lower.isle line 997.
                                return Some(v611);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v618 = constructor_or_mem(ctx, v61, v42, v127);
                                                let v619 = constructor_output_reg(ctx, v618);
                                                // Rule at src/isa/s390x/lower.isle line 1005.
                                                return Some(v619);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v616 = constructor_or_mem(ctx, v61, v62, v112);
                                                let v617 = constructor_output_reg(ctx, v616);
                                                // Rule at src/isa/s390x/lower.isle line 1003.
                                                return Some(v617);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v620 = constructor_vec_or(ctx, v36, v62, v63);
                            let v621 = constructor_output_reg(ctx, v620);
                            // Rule at src/isa/s390x/lower.isle line 1009.
                            return Some(v621);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v598 = constructor_or_reg(ctx, v61, v62, v63);
                            let v599 = constructor_output_reg(ctx, v598);
                            // Rule at src/isa/s390x/lower.isle line 989.
                            return Some(v599);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v612 = C::uimm32shifted_from_value(ctx, v39.0);
                            if let Some(v613) = v612 {
                                let v42 = C::put_in_reg(ctx, v39.1);
                                let v626 = constructor_xor_uimm32shifted(ctx, v61, v42, v613);
                                let v627 = constructor_output_reg(ctx, v626);
                                // Rule at src/isa/s390x/lower.isle line 1022.
                                return Some(v627);
                            }
                            let v608 = C::uimm32shifted_from_value(ctx, v39.1);
                            if let Some(v609) = v608 {
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v624 = constructor_xor_uimm32shifted(ctx, v61, v62, v609);
                                let v625 = constructor_output_reg(ctx, v624);
                                // Rule at src/isa/s390x/lower.isle line 1020.
                                return Some(v625);
                            }
                            let v115 = C::value_type(ctx, v39.0);
                            let v116 = C::ty_32_or_64(ctx, v115);
                            if let Some(v117) = v116 {
                                let v118 = C::sinkable_inst(ctx, v39.0);
                                if let Some(v119) = v118 {
                                    let v120 = &C::inst_data(ctx, v119);
                                    if let &InstructionData::Load {
                                        opcode: ref v121,
                                        arg: v122,
                                        flags: v123,
                                        offset: v124,
                                    } = v120
                                    {
                                        if let &Opcode::Load = v121 {
                                            let v125 = C::bigendian(ctx, v123);
                                            if let Some(v126) = v125 {
                                                let v42 = C::put_in_reg(ctx, v39.1);
                                                let v127 = &constructor_sink_load(ctx, v119);
                                                let v630 = constructor_xor_mem(ctx, v61, v42, v127);
                                                let v631 = constructor_output_reg(ctx, v630);
                                                // Rule at src/isa/s390x/lower.isle line 1028.
                                                return Some(v631);
                                            }
                                        }
                                    }
                                }
                            }
                            let v100 = C::value_type(ctx, v39.1);
                            let v101 = C::ty_32_or_64(ctx, v100);
                            if let Some(v102) = v101 {
                                let v103 = C::sinkable_inst(ctx, v39.1);
                                if let Some(v104) = v103 {
                                    let v105 = &C::inst_data(ctx, v104);
                                    if let &InstructionData::Load {
                                        opcode: ref v106,
                                        arg: v107,
                                        flags: v108,
                                        offset: v109,
                                    } = v105
                                    {
                                        if let &Opcode::Load = v106 {
                                            let v110 = C::bigendian(ctx, v108);
                                            if let Some(v111) = v110 {
                                                let v62 = C::put_in_reg(ctx, v39.0);
                                                let v112 = &constructor_sink_load(ctx, v104);
                                                let v628 = constructor_xor_mem(ctx, v61, v62, v112);
                                                let v629 = constructor_output_reg(ctx, v628);
                                                // Rule at src/isa/s390x/lower.isle line 1026.
                                                return Some(v629);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v632 = constructor_vec_xor(ctx, v36, v62, v63);
                            let v633 = constructor_output_reg(ctx, v632);
                            // Rule at src/isa/s390x/lower.isle line 1032.
                            return Some(v633);
                        }
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v622 = constructor_xor_reg(ctx, v61, v62, v63);
                            let v623 = constructor_output_reg(ctx, v622);
                            // Rule at src/isa/s390x/lower.isle line 1016.
                            return Some(v623);
                        }
                    }
                }
                &Opcode::BandNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v634 = constructor_and_not_reg(ctx, v61, v62, v63);
                                let v635 = constructor_output_reg(ctx, v634);
                                // Rule at src/isa/s390x/lower.isle line 1039.
                                return Some(v635);
                            }
                            let v568 = C::mie2_disabled(ctx, v3);
                            if let Some(v569) = v568 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v636 = constructor_not_reg(ctx, v61, v63);
                                let v637 = constructor_and_reg(ctx, v61, v62, v636);
                                let v638 = constructor_output_reg(ctx, v637);
                                // Rule at src/isa/s390x/lower.isle line 1043.
                                return Some(v638);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v639 = constructor_vec_and_not(ctx, v36, v62, v63);
                            let v640 = constructor_output_reg(ctx, v639);
                            // Rule at src/isa/s390x/lower.isle line 1047.
                            return Some(v640);
                        }
                    }
                }
                &Opcode::BorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v641 = constructor_or_not_reg(ctx, v61, v62, v63);
                                let v642 = constructor_output_reg(ctx, v641);
                                // Rule at src/isa/s390x/lower.isle line 1054.
                                return Some(v642);
                            }
                            let v568 = C::mie2_disabled(ctx, v3);
                            if let Some(v569) = v568 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v636 = constructor_not_reg(ctx, v61, v63);
                                let v643 = constructor_or_reg(ctx, v61, v62, v636);
                                let v644 = constructor_output_reg(ctx, v643);
                                // Rule at src/isa/s390x/lower.isle line 1058.
                                return Some(v644);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v645 = constructor_vec_or_not(ctx, v36, v62, v63);
                            let v646 = constructor_output_reg(ctx, v645);
                            // Rule at src/isa/s390x/lower.isle line 1062.
                            return Some(v646);
                        }
                    }
                }
                &Opcode::BxorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v647 = constructor_not_xor_reg(ctx, v61, v62, v63);
                                let v648 = constructor_output_reg(ctx, v647);
                                // Rule at src/isa/s390x/lower.isle line 1069.
                                return Some(v648);
                            }
                            let v568 = C::mie2_disabled(ctx, v3);
                            if let Some(v569) = v568 {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v622 = constructor_xor_reg(ctx, v61, v62, v63);
                                let v649 = constructor_not_reg(ctx, v61, v622);
                                let v650 = constructor_output_reg(ctx, v649);
                                // Rule at src/isa/s390x/lower.isle line 1073.
                                return Some(v650);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v63 = C::put_in_reg(ctx, v39.1);
                            let v651 = constructor_vec_not_xor(ctx, v36, v62, v63);
                            let v652 = constructor_output_reg(ctx, v651);
                            // Rule at src/isa/s390x/lower.isle line 1077.
                            return Some(v652);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v474 = constructor_amt_vr(ctx, v39.1);
                            let v475 = constructor_vec_neg(ctx, I8X16, v474);
                            let v476 = constructor_vec_lshl_by_byte(ctx, v62, v474);
                            let v477 = constructor_vec_lshl_by_bit(ctx, v476, v474);
                            let v478 = constructor_vec_lshr_by_byte(ctx, v62, v475);
                            let v479 = constructor_vec_lshr_by_bit(ctx, v478, v475);
                            let v480 = constructor_vec_or(ctx, I128, v477, v479);
                            let v481 = constructor_output_reg(ctx, v480);
                            // Rule at src/isa/s390x/lower.isle line 784.
                            return Some(v481);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v413 = C::mask_amt_imm(ctx, v149, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v472 = constructor_vec_rot_imm(ctx, v149, v43, v413);
                                let v473 = constructor_output_reg(ctx, v472);
                                // Rule at src/isa/s390x/lower.isle line 778.
                                return Some(v473);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v470 = constructor_vec_rot_reg(ctx, v149, v62, v410);
                            let v471 = constructor_output_reg(ctx, v470);
                            // Rule at src/isa/s390x/lower.isle line 774.
                            return Some(v471);
                        }
                        let v289 = C::ty_8_or_16(ctx, v3);
                        if let Some(v290) = v289 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v462 = C::i64_from_negated_value(ctx, v39.1);
                                if let Some(v463) = v462 {
                                    let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                                    let v453 = constructor_ty_ext32(ctx, v290);
                                    let v464 = C::mask_amt_imm(ctx, v290, v406);
                                    let v465 = C::mask_amt_imm(ctx, v290, v463);
                                    let v466 = constructor_lshl_imm(ctx, v453, v291, v464);
                                    let v467 = constructor_lshr_imm(ctx, v453, v291, v465);
                                    let v468 = constructor_or_reg(ctx, v290, v466, v467);
                                    let v469 = constructor_output_reg(ctx, v468);
                                    // Rule at src/isa/s390x/lower.isle line 764.
                                    return Some(v469);
                                }
                            }
                            let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v453 = constructor_ty_ext32(ctx, v290);
                            let v454 = constructor_amt_reg(ctx, v39.1);
                            let v455 = constructor_neg_reg(ctx, I32, v454);
                            let v456 = constructor_mask_amt_reg(ctx, v290, v454);
                            let v457 = constructor_mask_amt_reg(ctx, v290, v455);
                            let v458 = constructor_lshl_reg(ctx, v453, v291, v456);
                            let v459 = constructor_lshr_reg(ctx, v453, v291, v457);
                            let v460 = constructor_or_reg(ctx, v290, v458, v459);
                            let v461 = constructor_output_reg(ctx, v460);
                            // Rule at src/isa/s390x/lower.isle line 752.
                            return Some(v461);
                        }
                        let v446 = C::ty_32_or_64(ctx, v3);
                        if let Some(v447) = v446 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v450 = C::mask_amt_imm(ctx, v447, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v451 = constructor_rot_imm(ctx, v447, v43, v450);
                                let v452 = constructor_output_reg(ctx, v451);
                                // Rule at src/isa/s390x/lower.isle line 746.
                                return Some(v452);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v448 = constructor_rot_reg(ctx, v447, v62, v410);
                            let v449 = constructor_output_reg(ctx, v448);
                            // Rule at src/isa/s390x/lower.isle line 742.
                            return Some(v449);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v474 = constructor_amt_vr(ctx, v39.1);
                            let v475 = constructor_vec_neg(ctx, I8X16, v474);
                            let v501 = constructor_vec_lshl_by_byte(ctx, v62, v475);
                            let v502 = constructor_vec_lshl_by_bit(ctx, v501, v475);
                            let v503 = constructor_vec_lshr_by_byte(ctx, v62, v474);
                            let v504 = constructor_vec_lshr_by_bit(ctx, v503, v474);
                            let v505 = constructor_vec_or(ctx, I128, v502, v504);
                            let v506 = constructor_output_reg(ctx, v505);
                            // Rule at src/isa/s390x/lower.isle line 844.
                            return Some(v506);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v462 = C::i64_from_negated_value(ctx, v39.1);
                            if let Some(v463) = v462 {
                                let v498 = C::mask_amt_imm(ctx, v149, v463);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v499 = constructor_vec_rot_imm(ctx, v149, v43, v498);
                                let v500 = constructor_output_reg(ctx, v499);
                                // Rule at src/isa/s390x/lower.isle line 838.
                                return Some(v500);
                            }
                            let v401 = constructor_amt_reg(ctx, v39.1);
                            let v482 = constructor_neg_reg(ctx, I32, v401);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v496 = constructor_vec_rot_reg(ctx, v149, v157, v482);
                            let v497 = constructor_output_reg(ctx, v496);
                            // Rule at src/isa/s390x/lower.isle line 832.
                            return Some(v497);
                        }
                        let v289 = C::ty_8_or_16(ctx, v3);
                        if let Some(v290) = v289 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v462 = C::i64_from_negated_value(ctx, v39.1);
                                if let Some(v463) = v462 {
                                    let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                                    let v453 = constructor_ty_ext32(ctx, v290);
                                    let v464 = C::mask_amt_imm(ctx, v290, v406);
                                    let v465 = C::mask_amt_imm(ctx, v290, v463);
                                    let v492 = constructor_lshl_imm(ctx, v453, v291, v465);
                                    let v493 = constructor_lshr_imm(ctx, v453, v291, v464);
                                    let v494 = constructor_or_reg(ctx, v290, v492, v493);
                                    let v495 = constructor_output_reg(ctx, v494);
                                    // Rule at src/isa/s390x/lower.isle line 821.
                                    return Some(v495);
                                }
                            }
                            let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v453 = constructor_ty_ext32(ctx, v290);
                            let v454 = constructor_amt_reg(ctx, v39.1);
                            let v455 = constructor_neg_reg(ctx, I32, v454);
                            let v456 = constructor_mask_amt_reg(ctx, v290, v454);
                            let v457 = constructor_mask_amt_reg(ctx, v290, v455);
                            let v488 = constructor_lshl_reg(ctx, v453, v291, v457);
                            let v489 = constructor_lshr_reg(ctx, v453, v291, v456);
                            let v490 = constructor_or_reg(ctx, v290, v488, v489);
                            let v491 = constructor_output_reg(ctx, v490);
                            // Rule at src/isa/s390x/lower.isle line 809.
                            return Some(v491);
                        }
                        let v446 = C::ty_32_or_64(ctx, v3);
                        if let Some(v447) = v446 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v462 = C::i64_from_negated_value(ctx, v39.1);
                            if let Some(v463) = v462 {
                                let v485 = C::mask_amt_imm(ctx, v447, v463);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v486 = constructor_rot_imm(ctx, v447, v43, v485);
                                let v487 = constructor_output_reg(ctx, v486);
                                // Rule at src/isa/s390x/lower.isle line 803.
                                return Some(v487);
                            }
                            let v401 = constructor_amt_reg(ctx, v39.1);
                            let v482 = constructor_neg_reg(ctx, I32, v401);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v483 = constructor_rot_reg(ctx, v447, v157, v482);
                            let v484 = constructor_output_reg(ctx, v483);
                            // Rule at src/isa/s390x/lower.isle line 797.
                            return Some(v484);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v416 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v417 = constructor_vec_lshl_by_byte(ctx, v43, v416);
                            let v418 = constructor_vec_lshl_by_bit(ctx, v417, v416);
                            let v419 = constructor_output_reg(ctx, v418);
                            // Rule at src/isa/s390x/lower.isle line 672.
                            return Some(v419);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v413 = C::mask_amt_imm(ctx, v149, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v414 = constructor_vec_lshl_imm(ctx, v149, v43, v413);
                                let v415 = constructor_output_reg(ctx, v414);
                                // Rule at src/isa/s390x/lower.isle line 667.
                                return Some(v415);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v411 = constructor_vec_lshl_reg(ctx, v149, v62, v410);
                            let v412 = constructor_output_reg(ctx, v411);
                            // Rule at src/isa/s390x/lower.isle line 663.
                            return Some(v412);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v407 = C::mask_amt_imm(ctx, v61, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v408 = constructor_lshl_imm(ctx, v61, v43, v407);
                                let v409 = constructor_output_reg(ctx, v408);
                                // Rule at src/isa/s390x/lower.isle line 658.
                                return Some(v409);
                            }
                            let v401 = constructor_amt_reg(ctx, v39.1);
                            let v402 = constructor_mask_amt_reg(ctx, v61, v401);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v403 = constructor_lshl_reg(ctx, v61, v157, v402);
                            let v404 = constructor_output_reg(ctx, v403);
                            // Rule at src/isa/s390x/lower.isle line 653.
                            return Some(v404);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v416 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v432 = constructor_vec_lshr_by_byte(ctx, v43, v416);
                            let v433 = constructor_vec_lshr_by_bit(ctx, v432, v416);
                            let v434 = constructor_output_reg(ctx, v433);
                            // Rule at src/isa/s390x/lower.isle line 703.
                            return Some(v434);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v413 = C::mask_amt_imm(ctx, v149, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v430 = constructor_vec_lshr_imm(ctx, v149, v43, v413);
                                let v431 = constructor_output_reg(ctx, v430);
                                // Rule at src/isa/s390x/lower.isle line 698.
                                return Some(v431);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v428 = constructor_vec_lshr_reg(ctx, v149, v62, v410);
                            let v429 = constructor_output_reg(ctx, v428);
                            // Rule at src/isa/s390x/lower.isle line 694.
                            return Some(v429);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                                let v424 = C::mask_amt_imm(ctx, v61, v406);
                                let v425 = constructor_ty_ext32(ctx, v61);
                                let v426 = constructor_lshr_imm(ctx, v425, v291, v424);
                                let v427 = constructor_output_reg(ctx, v426);
                                // Rule at src/isa/s390x/lower.isle line 688.
                                return Some(v427);
                            }
                            let v291 = constructor_put_in_reg_zext32(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v420 = constructor_mask_amt_reg(ctx, v61, v410);
                            let v421 = constructor_ty_ext32(ctx, v61);
                            let v422 = constructor_lshr_reg(ctx, v421, v291, v420);
                            let v423 = constructor_output_reg(ctx, v422);
                            // Rule at src/isa/s390x/lower.isle line 681.
                            return Some(v423);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v416 = constructor_amt_vr(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v443 = constructor_vec_ashr_by_byte(ctx, v43, v416);
                            let v444 = constructor_vec_ashr_by_bit(ctx, v443, v416);
                            let v445 = constructor_output_reg(ctx, v444);
                            // Rule at src/isa/s390x/lower.isle line 734.
                            return Some(v445);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v413 = C::mask_amt_imm(ctx, v149, v406);
                                let v43 = C::put_in_reg(ctx, v39.0);
                                let v441 = constructor_vec_ashr_imm(ctx, v149, v43, v413);
                                let v442 = constructor_output_reg(ctx, v441);
                                // Rule at src/isa/s390x/lower.isle line 729.
                                return Some(v442);
                            }
                            let v62 = C::put_in_reg(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v439 = constructor_vec_ashr_reg(ctx, v149, v62, v410);
                            let v440 = constructor_output_reg(ctx, v439);
                            // Rule at src/isa/s390x/lower.isle line 725.
                            return Some(v440);
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v405 = C::i64_from_value(ctx, v39.1);
                            if let Some(v406) = v405 {
                                let v335 = constructor_put_in_reg_sext32(ctx, v39.0);
                                let v424 = C::mask_amt_imm(ctx, v61, v406);
                                let v425 = constructor_ty_ext32(ctx, v61);
                                let v437 = constructor_ashr_imm(ctx, v425, v335, v424);
                                let v438 = constructor_output_reg(ctx, v437);
                                // Rule at src/isa/s390x/lower.isle line 719.
                                return Some(v438);
                            }
                            let v335 = constructor_put_in_reg_sext32(ctx, v39.0);
                            let v410 = constructor_amt_reg(ctx, v39.1);
                            let v420 = constructor_mask_amt_reg(ctx, v61, v410);
                            let v421 = constructor_ty_ext32(ctx, v61);
                            let v435 = constructor_ashr_reg(ctx, v421, v335, v420);
                            let v436 = constructor_output_reg(ctx, v435);
                            // Rule at src/isa/s390x/lower.isle line 712.
                            return Some(v436);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v783 = constructor_fadd_reg(ctx, v3, v62, v63);
                        let v784 = constructor_output_reg(ctx, v783);
                        // Rule at src/isa/s390x/lower.isle line 1324.
                        return Some(v784);
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v785 = constructor_fsub_reg(ctx, v3, v62, v63);
                        let v786 = constructor_output_reg(ctx, v785);
                        // Rule at src/isa/s390x/lower.isle line 1331.
                        return Some(v786);
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v787 = constructor_fmul_reg(ctx, v3, v62, v63);
                        let v788 = constructor_output_reg(ctx, v787);
                        // Rule at src/isa/s390x/lower.isle line 1338.
                        return Some(v788);
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v789 = constructor_fdiv_reg(ctx, v3, v62, v63);
                        let v790 = constructor_output_reg(ctx, v789);
                        // Rule at src/isa/s390x/lower.isle line 1345.
                        return Some(v790);
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v800 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v801 = constructor_vec_select(ctx, F32, v62, v63, v800);
                                let v802 = constructor_output_reg(ctx, v801);
                                // Rule at src/isa/s390x/lower.isle line 1380.
                                return Some(v802);
                            }
                            F64 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v804 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v805 = constructor_vec_select(ctx, F64, v62, v63, v804);
                                let v806 = constructor_output_reg(ctx, v805);
                                // Rule at src/isa/s390x/lower.isle line 1382.
                                return Some(v806);
                            }
                            F32X4 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v809 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1, 0x1F);
                                let v810 = constructor_vec_select(ctx, F32X4, v62, v63, v809);
                                let v811 = constructor_output_reg(ctx, v810);
                                // Rule at src/isa/s390x/lower.isle line 1384.
                                return Some(v811);
                            }
                            F64X2 => {
                                let v39 = C::unpack_value_array_2(ctx, v38);
                                let v62 = C::put_in_reg(ctx, v39.0);
                                let v63 = C::put_in_reg(ctx, v39.1);
                                let v813 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1, 0x3F);
                                let v814 = constructor_vec_select(ctx, F64X2, v62, v63, v813);
                                let v815 = constructor_output_reg(ctx, v814);
                                // Rule at src/isa/s390x/lower.isle line 1386.
                                return Some(v815);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v791 = constructor_fmin_reg(ctx, v3, v62, v63);
                        let v792 = constructor_output_reg(ctx, v791);
                        // Rule at src/isa/s390x/lower.isle line 1352.
                        return Some(v792);
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v795 = constructor_fmin_pseudo_reg(ctx, v3, v62, v63);
                        let v796 = constructor_output_reg(ctx, v795);
                        // Rule at src/isa/s390x/lower.isle line 1366.
                        return Some(v796);
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v793 = constructor_fmax_reg(ctx, v3, v62, v63);
                        let v794 = constructor_output_reg(ctx, v793);
                        // Rule at src/isa/s390x/lower.isle line 1359.
                        return Some(v794);
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v3 = C::value_type(ctx, v2);
                        let v797 = constructor_fmax_pseudo_reg(ctx, v3, v62, v63);
                        let v798 = constructor_output_reg(ctx, v797);
                        // Rule at src/isa/s390x/lower.isle line 1373.
                        return Some(v798);
                    }
                }
                &Opcode::Snarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v543 = C::ty_vec128(ctx, v115);
                    if let Some(v544) = v543 {
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v545 = constructor_vec_pack_ssat_lane_order(ctx, v544, v62, v63);
                        let v546 = constructor_output_reg(ctx, v545);
                        // Rule at src/isa/s390x/lower.isle line 903.
                        return Some(v546);
                    }
                }
                &Opcode::Unarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v543 = C::ty_vec128(ctx, v115);
                    if let Some(v544) = v543 {
                        let v549 = constructor_vec_imm(ctx, v544, 0x0);
                        let v43 = C::put_in_reg(ctx, v39.0);
                        let v550 = constructor_vec_smax(ctx, v544, v43, v549);
                        let v318 = C::put_in_reg(ctx, v39.1);
                        let v551 = constructor_vec_smax(ctx, v544, v318, v549);
                        let v552 = constructor_vec_pack_usat_lane_order(ctx, v544, v550, v551);
                        let v553 = constructor_output_reg(ctx, v552);
                        // Rule at src/isa/s390x/lower.isle line 915.
                        return Some(v553);
                    }
                }
                &Opcode::Uunarrow => {
                    let v39 = C::unpack_value_array_2(ctx, v38);
                    let v115 = C::value_type(ctx, v39.0);
                    let v543 = C::ty_vec128(ctx, v115);
                    if let Some(v544) = v543 {
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v547 = constructor_vec_pack_usat_lane_order(ctx, v544, v62, v63);
                        let v548 = constructor_output_reg(ctx, v547);
                        // Rule at src/isa/s390x/lower.isle line 909.
                        return Some(v548);
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v170 = C::multi_lane(ctx, v3);
                        if let Some(v171) = v170 {
                            let v175 = C::u32_as_u64(ctx, v171.0);
                            let v176 = constructor_vec_imm_splat(ctx, I8X16, v175);
                            let v177 = constructor_vec_widen_type(ctx, v3);
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v157 = C::put_in_reg(ctx, v39.0);
                            let v151 = C::put_in_reg(ctx, v39.0);
                            let v178 = constructor_vec_lshr_by_byte(ctx, v151, v176);
                            let v179 = constructor_vec_add(ctx, v3, v157, v178);
                            let v180 = C::put_in_reg(ctx, v39.1);
                            let v181 = C::put_in_reg(ctx, v39.1);
                            let v182 = constructor_vec_lshr_by_byte(ctx, v181, v176);
                            let v183 = constructor_vec_add(ctx, v3, v180, v182);
                            let v184 = constructor_vec_pack_lane_order(ctx, v177, v179, v183);
                            let v185 = constructor_output_reg(ctx, v184);
                            // Rule at src/isa/s390x/lower.isle line 135.
                            return Some(v185);
                        }
                    }
                }
                &Opcode::WideningPairwiseDotProductS => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v39 = C::unpack_value_array_2(ctx, v38);
                        let v62 = C::put_in_reg(ctx, v39.0);
                        let v63 = C::put_in_reg(ctx, v39.1);
                        let v115 = C::value_type(ctx, v39.0);
                        let v363 = constructor_vec_smul_even(ctx, v115, v62, v63);
                        let v151 = C::put_in_reg(ctx, v39.0);
                        let v159 = C::put_in_reg(ctx, v39.1);
                        let v364 = constructor_vec_smul_odd(ctx, v115, v151, v159);
                        let v3 = C::value_type(ctx, v2);
                        let v365 = constructor_vec_add(ctx, v3, v363, v364);
                        let v366 = constructor_output_reg(ctx, v365);
                        // Rule at src/isa/s390x/lower.isle line 430.
                        return Some(v366);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v39 = C::unpack_value_array_2(ctx, v38);
                            let v42 = C::put_in_reg(ctx, v39.1);
                            let v43 = C::put_in_reg(ctx, v39.0);
                            let v44 = constructor_mov_to_vec128(ctx, v36, v42, v43);
                            let v45 = constructor_output_reg(ctx, v44);
                            // Rule at src/isa/s390x/lower.isle line 51.
                            return Some(v45);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1070,
            arg: v1071,
            imm: v1072,
        } => {
            if let &Opcode::Extractlane = v1070 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1075 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1076) = v1075 {
                        let v1077 = C::put_in_reg(ctx, v1071);
                        let v1073 = C::value_type(ctx, v1071);
                        let v1074 = C::u8_from_uimm8(ctx, v1072);
                        let v1078 = C::be_lane_idx(ctx, v1073, v1074);
                        let v524 = C::zero_reg(ctx);
                        let v1079 = constructor_vec_extract_lane(ctx, v1073, v1077, v1078, v524);
                        let v1080 = constructor_output_reg(ctx, v1079);
                        // Rule at src/isa/s390x/lower.isle line 1862.
                        return Some(v1080);
                    }
                    let v1003 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1004) = v1003 {
                        let v1077 = C::put_in_reg(ctx, v1071);
                        let v1073 = C::value_type(ctx, v1071);
                        let v1074 = C::u8_from_uimm8(ctx, v1072);
                        let v1078 = C::be_lane_idx(ctx, v1073, v1074);
                        let v1081 = constructor_vec_replicate_lane(ctx, v1073, v1077, v1078);
                        let v1082 = constructor_output_reg(ctx, v1081);
                        // Rule at src/isa/s390x/lower.isle line 1868.
                        return Some(v1082);
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1928,
            args: v1929,
            func_ref: v1930,
        } => {
            if let &Opcode::Call = v1928 {
                let v1932 = C::func_ref_data(ctx, v1930);
                let v1936 = C::reloc_distance_near(ctx, v1932.2);
                if let Some(v1937) = v1936 {
                    let v1938 = C::abi_sig(ctx, v1932.0);
                    let v1939 = C::abi_accumulate_outgoing_args_size(ctx, v1938);
                    let v1940 = C::abi_num_args(ctx, v1938);
                    let v1941 = C::range(ctx, 0x0, v1940);
                    let v1931 = C::value_list_slice(ctx, v1929);
                    let v1942 = &constructor_lower_call_args(ctx, v1938, v1941, v1931);
                    let v1943 = &C::defs_init(ctx, v1938);
                    let v1945 =
                        &constructor_abi_call(ctx, v1938, v1932.1, v1942, v1943, &Opcode::Call);
                    let v1946 = constructor_side_effect(ctx, v1945);
                    let v1947 = C::abi_first_ret(ctx, v1932.0, v1938);
                    let v1948 = C::abi_num_rets(ctx, v1938);
                    let v1950 = &C::output_builder_new(ctx);
                    let v1949 = C::range(ctx, v1947, v1948);
                    let v1951 = constructor_lower_call_rets(ctx, v1938, v1943, v1949, v1950);
                    // Rule at src/isa/s390x/lower.isle line 3877.
                    return Some(v1951);
                }
                let v1938 = C::abi_sig(ctx, v1932.0);
                let v1939 = C::abi_accumulate_outgoing_args_size(ctx, v1938);
                let v1940 = C::abi_num_args(ctx, v1938);
                let v1941 = C::range(ctx, 0x0, v1940);
                let v1931 = C::value_list_slice(ctx, v1929);
                let v1942 = &constructor_lower_call_args(ctx, v1938, v1941, v1931);
                let v1943 = &C::defs_init(ctx, v1938);
                let v1952 = SymbolReloc::Absolute {
                    name: v1932.1,
                    offset: 0x0,
                };
                let v1953 = constructor_load_symbol_reloc(ctx, &v1952);
                let v1954 =
                    &constructor_abi_call_ind(ctx, v1938, v1953, v1942, v1943, &Opcode::Call);
                let v1955 = constructor_side_effect(ctx, v1954);
                let v1956 = C::abi_first_ret(ctx, v1932.0, v1938);
                let v1957 = C::abi_num_rets(ctx, v1938);
                let v1959 = &C::output_builder_new(ctx);
                let v1958 = C::range(ctx, v1956, v1957);
                let v1960 = constructor_lower_call_rets(ctx, v1938, v1943, v1958, v1959);
                // Rule at src/isa/s390x/lower.isle line 3887.
                return Some(v1960);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1961,
            args: v1962,
            sig_ref: v1963,
        } => {
            if let &Opcode::CallIndirect = v1961 {
                let v1964 = C::value_list_slice(ctx, v1962);
                let v1965 = C::value_slice_unwrap(ctx, v1964);
                if let Some(v1966) = v1965 {
                    let v1969 = C::abi_sig(ctx, v1963);
                    let v1970 = C::put_in_reg(ctx, v1966.0);
                    let v1971 = C::abi_accumulate_outgoing_args_size(ctx, v1969);
                    let v1972 = C::abi_num_args(ctx, v1969);
                    let v1973 = C::range(ctx, 0x0, v1972);
                    let v1974 = &constructor_lower_call_args(ctx, v1969, v1973, v1966.1);
                    let v1975 = &C::defs_init(ctx, v1969);
                    let v1977 = &constructor_abi_call_ind(
                        ctx,
                        v1969,
                        v1970,
                        v1974,
                        v1975,
                        &Opcode::CallIndirect,
                    );
                    let v1978 = constructor_side_effect(ctx, v1977);
                    let v1979 = C::abi_first_ret(ctx, v1963, v1969);
                    let v1980 = C::abi_num_rets(ctx, v1969);
                    let v1959 = &C::output_builder_new(ctx);
                    let v1981 = C::range(ctx, v1979, v1980);
                    let v1982 = constructor_lower_call_rets(ctx, v1969, v1975, v1981, v1959);
                    // Rule at src/isa/s390x/lower.isle line 3898.
                    return Some(v1982);
                }
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1824,
            arg: v1825,
            code: ref v1826,
        } => {
            match v1824 {
                &Opcode::Trapz => {
                    let v1827 = &constructor_value_nonzero(ctx, v1825);
                    let v1828 = &constructor_invert_bool(ctx, v1827);
                    let v1829 = &constructor_trap_if_bool(ctx, v1828, v1826);
                    let v1830 = constructor_side_effect(ctx, v1829);
                    // Rule at src/isa/s390x/lower.isle line 3778.
                    return Some(v1830);
                }
                &Opcode::Trapnz => {
                    let v1827 = &constructor_value_nonzero(ctx, v1825);
                    let v1831 = &constructor_trap_if_bool(ctx, v1827, v1826);
                    let v1832 = constructor_side_effect(ctx, v1831);
                    // Rule at src/isa/s390x/lower.isle line 3784.
                    return Some(v1832);
                }
                &Opcode::ResumableTrapnz => {
                    let v1827 = &constructor_value_nonzero(ctx, v1825);
                    let v1831 = &constructor_trap_if_bool(ctx, v1827, v1826);
                    let v1832 = constructor_side_effect(ctx, v1831);
                    // Rule at src/isa/s390x/lower.isle line 3790.
                    return Some(v1832);
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1700,
            args: ref v1701,
            cond: ref v1702,
        } => {
            if let &Opcode::Fcmp = v1700 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1702 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1711 = constructor_vec_fcmpeq(ctx, v149, v1709, v1710);
                                let v1712 = constructor_output_reg(ctx, v1711);
                                // Rule at src/isa/s390x/lower.isle line 3430.
                                return Some(v1712);
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1715 = constructor_vec_fcmph(ctx, v149, v1709, v1710);
                                let v1716 = constructor_output_reg(ctx, v1715);
                                // Rule at src/isa/s390x/lower.isle line 3434.
                                return Some(v1716);
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1719 = constructor_vec_fcmphe(ctx, v149, v1709, v1710);
                                let v1720 = constructor_output_reg(ctx, v1719);
                                // Rule at src/isa/s390x/lower.isle line 3438.
                                return Some(v1720);
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1723 = C::put_in_reg(ctx, v1703.1);
                                let v1724 = C::put_in_reg(ctx, v1703.0);
                                let v1725 = constructor_vec_fcmph(ctx, v149, v1723, v1724);
                                let v1726 = constructor_output_reg(ctx, v1725);
                                // Rule at src/isa/s390x/lower.isle line 3442.
                                return Some(v1726);
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1723 = C::put_in_reg(ctx, v1703.1);
                                let v1724 = C::put_in_reg(ctx, v1703.0);
                                let v1729 = constructor_vec_fcmphe(ctx, v149, v1723, v1724);
                                let v1730 = constructor_output_reg(ctx, v1729);
                                // Rule at src/isa/s390x/lower.isle line 3446.
                                return Some(v1730);
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1711 = constructor_vec_fcmpeq(ctx, v149, v1709, v1710);
                                let v1713 = constructor_vec_not(ctx, v149, v1711);
                                let v1714 = constructor_output_reg(ctx, v1713);
                                // Rule at src/isa/s390x/lower.isle line 3432.
                                return Some(v1714);
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1719 = constructor_vec_fcmphe(ctx, v149, v1709, v1710);
                                let v1733 = C::put_in_reg(ctx, v1703.1);
                                let v1734 = C::put_in_reg(ctx, v1703.0);
                                let v1735 = constructor_vec_fcmphe(ctx, v149, v1733, v1734);
                                let v1736 = constructor_vec_or(ctx, v149, v1719, v1735);
                                let v1737 = constructor_output_reg(ctx, v1736);
                                // Rule at src/isa/s390x/lower.isle line 3450.
                                return Some(v1737);
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1715 = constructor_vec_fcmph(ctx, v149, v1709, v1710);
                                let v1733 = C::put_in_reg(ctx, v1703.1);
                                let v1734 = C::put_in_reg(ctx, v1703.0);
                                let v1740 = constructor_vec_fcmph(ctx, v149, v1733, v1734);
                                let v1741 = constructor_vec_or(ctx, v149, v1715, v1740);
                                let v1742 = constructor_output_reg(ctx, v1741);
                                // Rule at src/isa/s390x/lower.isle line 3454.
                                return Some(v1742);
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1719 = constructor_vec_fcmphe(ctx, v149, v1709, v1710);
                                let v1733 = C::put_in_reg(ctx, v1703.1);
                                let v1734 = C::put_in_reg(ctx, v1703.0);
                                let v1735 = constructor_vec_fcmphe(ctx, v149, v1733, v1734);
                                let v1738 = constructor_vec_not_or(ctx, v149, v1719, v1735);
                                let v1739 = constructor_output_reg(ctx, v1738);
                                // Rule at src/isa/s390x/lower.isle line 3452.
                                return Some(v1739);
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1715 = constructor_vec_fcmph(ctx, v149, v1709, v1710);
                                let v1733 = C::put_in_reg(ctx, v1703.1);
                                let v1734 = C::put_in_reg(ctx, v1703.0);
                                let v1740 = constructor_vec_fcmph(ctx, v149, v1733, v1734);
                                let v1743 = constructor_vec_not_or(ctx, v149, v1715, v1740);
                                let v1744 = constructor_output_reg(ctx, v1743);
                                // Rule at src/isa/s390x/lower.isle line 3456.
                                return Some(v1744);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1723 = C::put_in_reg(ctx, v1703.1);
                                let v1724 = C::put_in_reg(ctx, v1703.0);
                                let v1729 = constructor_vec_fcmphe(ctx, v149, v1723, v1724);
                                let v1731 = constructor_vec_not(ctx, v149, v1729);
                                let v1732 = constructor_output_reg(ctx, v1731);
                                // Rule at src/isa/s390x/lower.isle line 3448.
                                return Some(v1732);
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1723 = C::put_in_reg(ctx, v1703.1);
                                let v1724 = C::put_in_reg(ctx, v1703.0);
                                let v1725 = constructor_vec_fcmph(ctx, v149, v1723, v1724);
                                let v1727 = constructor_vec_not(ctx, v149, v1725);
                                let v1728 = constructor_output_reg(ctx, v1727);
                                // Rule at src/isa/s390x/lower.isle line 3444.
                                return Some(v1728);
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1719 = constructor_vec_fcmphe(ctx, v149, v1709, v1710);
                                let v1721 = constructor_vec_not(ctx, v149, v1719);
                                let v1722 = constructor_output_reg(ctx, v1721);
                                // Rule at src/isa/s390x/lower.isle line 3440.
                                return Some(v1722);
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1703 = C::unpack_value_array_2(ctx, v1701);
                                let v1709 = C::put_in_reg(ctx, v1703.0);
                                let v1710 = C::put_in_reg(ctx, v1703.1);
                                let v1715 = constructor_vec_fcmph(ctx, v149, v1709, v1710);
                                let v1717 = constructor_vec_not(ctx, v149, v1715);
                                let v1718 = constructor_output_reg(ctx, v1717);
                                // Rule at src/isa/s390x/lower.isle line 3436.
                                return Some(v1718);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1703 = C::unpack_value_array_2(ctx, v1701);
                        let v1706 = &constructor_fcmp_val(ctx, v1702, v1703.0, v1703.1);
                        let v1707 = constructor_lower_bool(ctx, v61, v1706);
                        let v1708 = constructor_output_reg(ctx, v1707);
                        // Rule at src/isa/s390x/lower.isle line 3418.
                        return Some(v1708);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1381,
            func_ref: v1382,
        } => {
            if let &Opcode::FuncAddr = v1381 {
                let v1383 = C::func_ref_data(ctx, v1382);
                let v1387 = C::reloc_distance_near(ctx, v1383.2);
                if let Some(v1388) = v1387 {
                    let v1390 = C::memflags_trusted(ctx);
                    let v1391 = &C::memarg_symbol(ctx, v1383.1, 0x0, v1390);
                    let v1392 = constructor_load_addr(ctx, v1391);
                    let v1393 = constructor_output_reg(ctx, v1392);
                    // Rule at src/isa/s390x/lower.isle line 2224.
                    return Some(v1393);
                }
                let v1395 = SymbolReloc::Absolute {
                    name: v1383.1,
                    offset: 0x0,
                };
                let v1396 = constructor_load_symbol_reloc(ctx, &v1395);
                let v1397 = constructor_output_reg(ctx, v1396);
                // Rule at src/isa/s390x/lower.isle line 2228.
                return Some(v1397);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1835,
            args: ref v1836,
            code: ref v1837,
        } => {
            if let &Opcode::UaddOverflowTrap = v1835 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1838 = C::unpack_value_array_2(ctx, v1836);
                        let v1858 = C::def_inst(ctx, v1838.0);
                        if let Some(v1859) = v1858 {
                            let v1860 = &C::inst_data(ctx, v1859);
                            if let &InstructionData::Unary {
                                opcode: ref v1861,
                                arg: v1862,
                            } = v1860
                            {
                                if let &Opcode::Uextend = v1861 {
                                    let v1863 = C::value_type(ctx, v1862);
                                    if v1863 == I32 {
                                        let v1864 = C::put_in_reg(ctx, v1838.1);
                                        let v1865 = C::put_in_reg(ctx, v1862);
                                        let v1866 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v61, v1864, v1865,
                                            );
                                        let v1844 = &C::mask_as_cond(ctx, 0x3);
                                        let v1845 = &constructor_trap_if_impl(ctx, v1844, v1837);
                                        let v1867 = constructor_with_flags(ctx, v1866, v1845);
                                        let v1868 = C::output(ctx, v1867);
                                        // Rule at src/isa/s390x/lower.isle line 3826.
                                        return Some(v1868);
                                    }
                                }
                            }
                        }
                        let v1876 = C::u32_from_value(ctx, v1838.0);
                        if let Some(v1877) = v1876 {
                            let v1864 = C::put_in_reg(ctx, v1838.1);
                            let v1878 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v61, v1864, v1877,
                            );
                            let v1872 = &C::mask_as_cond(ctx, 0x3);
                            let v1873 = &constructor_trap_if_impl(ctx, v1872, v1837);
                            let v1879 = constructor_with_flags(ctx, v1878, v1873);
                            let v1880 = C::output(ctx, v1879);
                            // Rule at src/isa/s390x/lower.isle line 3838.
                            return Some(v1880);
                        }
                        let v1900 = C::sinkable_inst(ctx, v1838.0);
                        if let Some(v1901) = v1900 {
                            let v1902 = &C::inst_data(ctx, v1901);
                            if let &InstructionData::Load {
                                opcode: ref v1903,
                                arg: v1904,
                                flags: v1905,
                                offset: v1906,
                            } = v1902
                            {
                                match v1903 {
                                    &Opcode::Load => {
                                        let v1897 = C::value_type(ctx, v1838.0);
                                        let v1898 = C::ty_32_or_64(ctx, v1897);
                                        if let Some(v1899) = v1898 {
                                            let v1907 = C::bigendian(ctx, v1905);
                                            if let Some(v1908) = v1907 {
                                                let v1864 = C::put_in_reg(ctx, v1838.1);
                                                let v1909 = &constructor_sink_load(ctx, v1901);
                                                let v1910 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v61, v1864, v1909,
                                                    );
                                                let v1844 = &C::mask_as_cond(ctx, 0x3);
                                                let v1845 =
                                                    &constructor_trap_if_impl(ctx, v1844, v1837);
                                                let v1911 =
                                                    constructor_with_flags(ctx, v1910, v1845);
                                                let v1912 = C::output(ctx, v1911);
                                                // Rule at src/isa/s390x/lower.isle line 3850.
                                                return Some(v1912);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1907 = C::bigendian(ctx, v1905);
                                        if let Some(v1908) = v1907 {
                                            let v1864 = C::put_in_reg(ctx, v1838.1);
                                            let v1917 = &constructor_sink_uload32(ctx, v1901);
                                            let v1918 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v61, v1864, v1917);
                                            let v1844 = &C::mask_as_cond(ctx, 0x3);
                                            let v1845 =
                                                &constructor_trap_if_impl(ctx, v1844, v1837);
                                            let v1919 = constructor_with_flags(ctx, v1918, v1845);
                                            let v1920 = C::output(ctx, v1919);
                                            // Rule at src/isa/s390x/lower.isle line 3862.
                                            return Some(v1920);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1848 = C::def_inst(ctx, v1838.1);
                        if let Some(v1849) = v1848 {
                            let v1850 = &C::inst_data(ctx, v1849);
                            if let &InstructionData::Unary {
                                opcode: ref v1851,
                                arg: v1852,
                            } = v1850
                            {
                                if let &Opcode::Uextend = v1851 {
                                    let v1853 = C::value_type(ctx, v1852);
                                    if v1853 == I32 {
                                        let v1841 = C::put_in_reg(ctx, v1838.0);
                                        let v1854 = C::put_in_reg(ctx, v1852);
                                        let v1855 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v61, v1841, v1854,
                                            );
                                        let v1844 = &C::mask_as_cond(ctx, 0x3);
                                        let v1845 = &constructor_trap_if_impl(ctx, v1844, v1837);
                                        let v1856 = constructor_with_flags(ctx, v1855, v1845);
                                        let v1857 = C::output(ctx, v1856);
                                        // Rule at src/isa/s390x/lower.isle line 3821.
                                        return Some(v1857);
                                    }
                                }
                            }
                        }
                        let v1869 = C::u32_from_value(ctx, v1838.1);
                        if let Some(v1870) = v1869 {
                            let v1841 = C::put_in_reg(ctx, v1838.0);
                            let v1871 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v61, v1841, v1870,
                            );
                            let v1872 = &C::mask_as_cond(ctx, 0x3);
                            let v1873 = &constructor_trap_if_impl(ctx, v1872, v1837);
                            let v1874 = constructor_with_flags(ctx, v1871, v1873);
                            let v1875 = C::output(ctx, v1874);
                            // Rule at src/isa/s390x/lower.isle line 3833.
                            return Some(v1875);
                        }
                        let v1884 = C::sinkable_inst(ctx, v1838.1);
                        if let Some(v1885) = v1884 {
                            let v1886 = &C::inst_data(ctx, v1885);
                            if let &InstructionData::Load {
                                opcode: ref v1887,
                                arg: v1888,
                                flags: v1889,
                                offset: v1890,
                            } = v1886
                            {
                                match v1887 {
                                    &Opcode::Load => {
                                        let v1881 = C::value_type(ctx, v1838.1);
                                        let v1882 = C::ty_32_or_64(ctx, v1881);
                                        if let Some(v1883) = v1882 {
                                            let v1891 = C::bigendian(ctx, v1889);
                                            if let Some(v1892) = v1891 {
                                                let v1841 = C::put_in_reg(ctx, v1838.0);
                                                let v1893 = &constructor_sink_load(ctx, v1885);
                                                let v1894 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v61, v1841, v1893,
                                                    );
                                                let v1844 = &C::mask_as_cond(ctx, 0x3);
                                                let v1845 =
                                                    &constructor_trap_if_impl(ctx, v1844, v1837);
                                                let v1895 =
                                                    constructor_with_flags(ctx, v1894, v1845);
                                                let v1896 = C::output(ctx, v1895);
                                                // Rule at src/isa/s390x/lower.isle line 3845.
                                                return Some(v1896);
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v1891 = C::bigendian(ctx, v1889);
                                        if let Some(v1892) = v1891 {
                                            let v1841 = C::put_in_reg(ctx, v1838.0);
                                            let v1913 = &constructor_sink_uload32(ctx, v1885);
                                            let v1914 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v61, v1841, v1913);
                                            let v1844 = &C::mask_as_cond(ctx, 0x3);
                                            let v1845 =
                                                &constructor_trap_if_impl(ctx, v1844, v1837);
                                            let v1915 = constructor_with_flags(ctx, v1914, v1845);
                                            let v1916 = C::output(ctx, v1915);
                                            // Rule at src/isa/s390x/lower.isle line 3857.
                                            return Some(v1916);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1841 = C::put_in_reg(ctx, v1838.0);
                        let v1842 = C::put_in_reg(ctx, v1838.1);
                        let v1843 =
                            &constructor_add_logical_reg_with_flags_paired(ctx, v61, v1841, v1842);
                        let v1844 = &C::mask_as_cond(ctx, 0x3);
                        let v1845 = &constructor_trap_if_impl(ctx, v1844, v1837);
                        let v1846 = constructor_with_flags(ctx, v1843, v1845);
                        let v1847 = C::output(ctx, v1846);
                        // Rule at src/isa/s390x/lower.isle line 3815.
                        return Some(v1847);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1666,
            args: ref v1667,
            cond: ref v1668,
        } => {
            if let &Opcode::Icmp = v1666 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v1668 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1678 = constructor_vec_cmpeq(ctx, v149, v1676, v1677);
                                let v1679 = constructor_output_reg(ctx, v1678);
                                // Rule at src/isa/s390x/lower.isle line 3392.
                                return Some(v1679);
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1678 = constructor_vec_cmpeq(ctx, v149, v1676, v1677);
                                let v1680 = constructor_vec_not(ctx, v149, v1678);
                                let v1681 = constructor_output_reg(ctx, v1680);
                                // Rule at src/isa/s390x/lower.isle line 3394.
                                return Some(v1681);
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1682 = constructor_vec_cmph(ctx, v149, v1676, v1677);
                                let v1683 = constructor_output_reg(ctx, v1682);
                                // Rule at src/isa/s390x/lower.isle line 3396.
                                return Some(v1683);
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1686 = C::put_in_reg(ctx, v1669.1);
                                let v1687 = C::put_in_reg(ctx, v1669.0);
                                let v1688 = constructor_vec_cmph(ctx, v149, v1686, v1687);
                                let v1690 = constructor_vec_not(ctx, v149, v1688);
                                let v1691 = constructor_output_reg(ctx, v1690);
                                // Rule at src/isa/s390x/lower.isle line 3402.
                                return Some(v1691);
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1686 = C::put_in_reg(ctx, v1669.1);
                                let v1687 = C::put_in_reg(ctx, v1669.0);
                                let v1688 = constructor_vec_cmph(ctx, v149, v1686, v1687);
                                let v1689 = constructor_output_reg(ctx, v1688);
                                // Rule at src/isa/s390x/lower.isle line 3400.
                                return Some(v1689);
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1682 = constructor_vec_cmph(ctx, v149, v1676, v1677);
                                let v1684 = constructor_vec_not(ctx, v149, v1682);
                                let v1685 = constructor_output_reg(ctx, v1684);
                                // Rule at src/isa/s390x/lower.isle line 3398.
                                return Some(v1685);
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1692 = constructor_vec_cmphl(ctx, v149, v1676, v1677);
                                let v1693 = constructor_output_reg(ctx, v1692);
                                // Rule at src/isa/s390x/lower.isle line 3404.
                                return Some(v1693);
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1686 = C::put_in_reg(ctx, v1669.1);
                                let v1687 = C::put_in_reg(ctx, v1669.0);
                                let v1696 = constructor_vec_cmphl(ctx, v149, v1686, v1687);
                                let v1698 = constructor_vec_not(ctx, v149, v1696);
                                let v1699 = constructor_output_reg(ctx, v1698);
                                // Rule at src/isa/s390x/lower.isle line 3410.
                                return Some(v1699);
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1686 = C::put_in_reg(ctx, v1669.1);
                                let v1687 = C::put_in_reg(ctx, v1669.0);
                                let v1696 = constructor_vec_cmphl(ctx, v149, v1686, v1687);
                                let v1697 = constructor_output_reg(ctx, v1696);
                                // Rule at src/isa/s390x/lower.isle line 3408.
                                return Some(v1697);
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v148 = C::ty_vec128(ctx, v3);
                            if let Some(v149) = v148 {
                                let v1669 = C::unpack_value_array_2(ctx, v1667);
                                let v1676 = C::put_in_reg(ctx, v1669.0);
                                let v1677 = C::put_in_reg(ctx, v1669.1);
                                let v1692 = constructor_vec_cmphl(ctx, v149, v1676, v1677);
                                let v1694 = constructor_vec_not(ctx, v149, v1692);
                                let v1695 = constructor_output_reg(ctx, v1694);
                                // Rule at src/isa/s390x/lower.isle line 3406.
                                return Some(v1695);
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v60 = C::fits_in_64(ctx, v3);
                    if let Some(v61) = v60 {
                        let v1669 = C::unpack_value_array_2(ctx, v1667);
                        let v1673 = &constructor_icmp_val(ctx, true, v1668, v1669.0, v1669.1);
                        let v1674 = constructor_lower_bool(ctx, v61, v1673);
                        let v1675 = constructor_output_reg(ctx, v1674);
                        // Rule at src/isa/s390x/lower.isle line 3270.
                        return Some(v1675);
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1425,
            arg: v1426,
            flags: v1427,
            offset: v1428,
        } => {
            match v1425 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v1362 = &C::lane_order(ctx);
                            match v1362 {
                                &LaneOrder::LittleEndian => {
                                    let v1433 = C::bigendian(ctx, v1427);
                                    if let Some(v1434) = v1433 {
                                        let v1462 = constructor_vec_load_elt_rev(
                                            ctx, v36, v1427, v1426, v1428,
                                        );
                                        let v1463 = constructor_output_reg(ctx, v1462);
                                        // Rule at src/isa/s390x/lower.isle line 2336.
                                        return Some(v1463);
                                    }
                                    let v1438 = C::littleendian(ctx, v1427);
                                    if let Some(v1439) = v1438 {
                                        let v1464 = constructor_vec_load_full_rev(
                                            ctx, v36, v1427, v1426, v1428,
                                        );
                                        let v1465 = constructor_output_reg(ctx, v1464);
                                        // Rule at src/isa/s390x/lower.isle line 2341.
                                        return Some(v1465);
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1433 = C::bigendian(ctx, v1427);
                                    if let Some(v1434) = v1433 {
                                        let v1430 =
                                            &constructor_lower_address(ctx, v1427, v1426, v1428);
                                        let v1458 = constructor_vec_load(ctx, v36, v1430);
                                        let v1459 = constructor_output_reg(ctx, v1458);
                                        // Rule at src/isa/s390x/lower.isle line 2326.
                                        return Some(v1459);
                                    }
                                    let v1438 = C::littleendian(ctx, v1427);
                                    if let Some(v1439) = v1438 {
                                        let v1460 = constructor_vec_load_byte_rev(
                                            ctx, v36, v1427, v1426, v1428,
                                        );
                                        let v1461 = constructor_output_reg(ctx, v1460);
                                        // Rule at src/isa/s390x/lower.isle line 2331.
                                        return Some(v1461);
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1431 = constructor_zext32_mem(ctx, I8, v1430);
                                let v1432 = constructor_output_reg(ctx, v1431);
                                // Rule at src/isa/s390x/lower.isle line 2274.
                                return Some(v1432);
                            }
                            I16 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1436 = constructor_zext32_mem(ctx, I16, v1430);
                                    let v1437 = constructor_output_reg(ctx, v1436);
                                    // Rule at src/isa/s390x/lower.isle line 2278.
                                    return Some(v1437);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1440 = constructor_loadrev16(ctx, v1430);
                                    let v1441 = constructor_output_reg(ctx, v1440);
                                    // Rule at src/isa/s390x/lower.isle line 2282.
                                    return Some(v1441);
                                }
                            }
                            I32 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1442 = constructor_load32(ctx, v1430);
                                    let v1443 = constructor_output_reg(ctx, v1442);
                                    // Rule at src/isa/s390x/lower.isle line 2286.
                                    return Some(v1443);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1444 = constructor_loadrev32(ctx, v1430);
                                    let v1445 = constructor_output_reg(ctx, v1444);
                                    // Rule at src/isa/s390x/lower.isle line 2290.
                                    return Some(v1445);
                                }
                            }
                            I64 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1446 = constructor_load64(ctx, v1430);
                                    let v1447 = constructor_output_reg(ctx, v1446);
                                    // Rule at src/isa/s390x/lower.isle line 2294.
                                    return Some(v1447);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1448 = constructor_loadrev64(ctx, v1430);
                                    let v1449 = constructor_output_reg(ctx, v1448);
                                    // Rule at src/isa/s390x/lower.isle line 2298.
                                    return Some(v1449);
                                }
                            }
                            R64 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1446 = constructor_load64(ctx, v1430);
                                    let v1447 = constructor_output_reg(ctx, v1446);
                                    // Rule at src/isa/s390x/lower.isle line 2302.
                                    return Some(v1447);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1448 = constructor_loadrev64(ctx, v1430);
                                    let v1449 = constructor_output_reg(ctx, v1448);
                                    // Rule at src/isa/s390x/lower.isle line 2306.
                                    return Some(v1449);
                                }
                            }
                            F32 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1450 =
                                        constructor_vec_load_lane_undef(ctx, F32X4, v1430, 0x0);
                                    let v1451 = constructor_output_reg(ctx, v1450);
                                    // Rule at src/isa/s390x/lower.isle line 2310.
                                    return Some(v1451);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1452 = constructor_vec_load_lane_little_undef(
                                        ctx, F32X4, v1430, 0x0,
                                    );
                                    let v1453 = constructor_output_reg(ctx, v1452);
                                    // Rule at src/isa/s390x/lower.isle line 2314.
                                    return Some(v1453);
                                }
                            }
                            F64 => {
                                let v1433 = C::bigendian(ctx, v1427);
                                if let Some(v1434) = v1433 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1454 =
                                        constructor_vec_load_lane_undef(ctx, F64X2, v1430, 0x0);
                                    let v1455 = constructor_output_reg(ctx, v1454);
                                    // Rule at src/isa/s390x/lower.isle line 2318.
                                    return Some(v1455);
                                }
                                let v1438 = C::littleendian(ctx, v1427);
                                if let Some(v1439) = v1438 {
                                    let v1430 =
                                        &constructor_lower_address(ctx, v1427, v1426, v1428);
                                    let v1456 = constructor_vec_load_lane_little_undef(
                                        ctx, F64X2, v1430, 0x0,
                                    );
                                    let v1457 = constructor_output_reg(ctx, v1456);
                                    // Rule at src/isa/s390x/lower.isle line 2322.
                                    return Some(v1457);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                            let v1466 = constructor_zext64_mem(ctx, I8, v1430);
                            let v1467 = constructor_output_reg(ctx, v1466);
                            // Rule at src/isa/s390x/lower.isle line 2438.
                            return Some(v1467);
                        }
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                            let v1431 = constructor_zext32_mem(ctx, I8, v1430);
                            let v1432 = constructor_output_reg(ctx, v1431);
                            // Rule at src/isa/s390x/lower.isle line 2434.
                            return Some(v1432);
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                            let v1470 = constructor_sext64_mem(ctx, I8, v1430);
                            let v1471 = constructor_output_reg(ctx, v1470);
                            // Rule at src/isa/s390x/lower.isle line 2449.
                            return Some(v1471);
                        }
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                            let v1468 = constructor_sext32_mem(ctx, I8, v1430);
                            let v1469 = constructor_output_reg(ctx, v1468);
                            // Rule at src/isa/s390x/lower.isle line 2445.
                            return Some(v1469);
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1433 = C::bigendian(ctx, v1427);
                        if let Some(v1434) = v1433 {
                            let v3 = C::value_type(ctx, v2);
                            let v518 = C::gpr64_ty(ctx, v3);
                            if let Some(v519) = v518 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1474 = constructor_zext64_mem(ctx, I16, v1430);
                                let v1475 = constructor_output_reg(ctx, v1474);
                                // Rule at src/isa/s390x/lower.isle line 2467.
                                return Some(v1475);
                            }
                            let v514 = C::gpr32_ty(ctx, v3);
                            if let Some(v515) = v514 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1436 = constructor_zext32_mem(ctx, I16, v1430);
                                let v1437 = constructor_output_reg(ctx, v1436);
                                // Rule at src/isa/s390x/lower.isle line 2456.
                                return Some(v1437);
                            }
                        }
                        let v1438 = C::littleendian(ctx, v1427);
                        if let Some(v1439) = v1438 {
                            let v3 = C::value_type(ctx, v2);
                            let v518 = C::gpr64_ty(ctx, v3);
                            if let Some(v519) = v518 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1440 = constructor_loadrev16(ctx, v1430);
                                let v1476 = constructor_zext64_reg(ctx, I16, v1440);
                                let v1477 = constructor_output_reg(ctx, v1476);
                                // Rule at src/isa/s390x/lower.isle line 2472.
                                return Some(v1477);
                            }
                            let v514 = C::gpr32_ty(ctx, v3);
                            if let Some(v515) = v514 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1440 = constructor_loadrev16(ctx, v1430);
                                let v1472 = constructor_zext32_reg(ctx, I16, v1440);
                                let v1473 = constructor_output_reg(ctx, v1472);
                                // Rule at src/isa/s390x/lower.isle line 2461.
                                return Some(v1473);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1433 = C::bigendian(ctx, v1427);
                        if let Some(v1434) = v1433 {
                            let v3 = C::value_type(ctx, v2);
                            let v518 = C::gpr64_ty(ctx, v3);
                            if let Some(v519) = v518 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1482 = constructor_sext64_mem(ctx, I16, v1430);
                                let v1483 = constructor_output_reg(ctx, v1482);
                                // Rule at src/isa/s390x/lower.isle line 2492.
                                return Some(v1483);
                            }
                            let v514 = C::gpr32_ty(ctx, v3);
                            if let Some(v515) = v514 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1478 = constructor_sext32_mem(ctx, I16, v1430);
                                let v1479 = constructor_output_reg(ctx, v1478);
                                // Rule at src/isa/s390x/lower.isle line 2481.
                                return Some(v1479);
                            }
                        }
                        let v1438 = C::littleendian(ctx, v1427);
                        if let Some(v1439) = v1438 {
                            let v3 = C::value_type(ctx, v2);
                            let v518 = C::gpr64_ty(ctx, v3);
                            if let Some(v519) = v518 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1440 = constructor_loadrev16(ctx, v1430);
                                let v1484 = constructor_sext64_reg(ctx, I16, v1440);
                                let v1485 = constructor_output_reg(ctx, v1484);
                                // Rule at src/isa/s390x/lower.isle line 2497.
                                return Some(v1485);
                            }
                            let v514 = C::gpr32_ty(ctx, v3);
                            if let Some(v515) = v514 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1440 = constructor_loadrev16(ctx, v1430);
                                let v1480 = constructor_sext32_reg(ctx, I16, v1440);
                                let v1481 = constructor_output_reg(ctx, v1480);
                                // Rule at src/isa/s390x/lower.isle line 2486.
                                return Some(v1481);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v1433 = C::bigendian(ctx, v1427);
                            if let Some(v1434) = v1433 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1486 = constructor_zext64_mem(ctx, I32, v1430);
                                let v1487 = constructor_output_reg(ctx, v1486);
                                // Rule at src/isa/s390x/lower.isle line 2506.
                                return Some(v1487);
                            }
                            let v1438 = C::littleendian(ctx, v1427);
                            if let Some(v1439) = v1438 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1444 = constructor_loadrev32(ctx, v1430);
                                let v1488 = constructor_zext64_reg(ctx, I32, v1444);
                                let v1489 = constructor_output_reg(ctx, v1488);
                                // Rule at src/isa/s390x/lower.isle line 2511.
                                return Some(v1489);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v1433 = C::bigendian(ctx, v1427);
                            if let Some(v1434) = v1433 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1490 = constructor_sext64_mem(ctx, I32, v1430);
                                let v1491 = constructor_output_reg(ctx, v1490);
                                // Rule at src/isa/s390x/lower.isle line 2520.
                                return Some(v1491);
                            }
                            let v1438 = C::littleendian(ctx, v1427);
                            if let Some(v1439) = v1438 {
                                let v1430 = &constructor_lower_address(ctx, v1427, v1426, v1428);
                                let v1444 = constructor_loadrev32(ctx, v1430);
                                let v1492 = constructor_sext64_reg(ctx, I32, v1444);
                                let v1493 = constructor_output_reg(ctx, v1492);
                                // Rule at src/isa/s390x/lower.isle line 2525.
                                return Some(v1493);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1494 = constructor_load_v64(ctx, I8X16, v1427, v1426, v1428);
                            let v1495 = constructor_vec_unpacku_high(ctx, I8X16, v1494);
                            let v1496 = constructor_output_reg(ctx, v1495);
                            // Rule at src/isa/s390x/lower.isle line 2534.
                            return Some(v1496);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1494 = constructor_load_v64(ctx, I8X16, v1427, v1426, v1428);
                            let v1497 = constructor_vec_unpacks_high(ctx, I8X16, v1494);
                            let v1498 = constructor_output_reg(ctx, v1497);
                            // Rule at src/isa/s390x/lower.isle line 2538.
                            return Some(v1498);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1499 = constructor_load_v64(ctx, I16X8, v1427, v1426, v1428);
                            let v1500 = constructor_vec_unpacku_high(ctx, I16X8, v1499);
                            let v1501 = constructor_output_reg(ctx, v1500);
                            // Rule at src/isa/s390x/lower.isle line 2542.
                            return Some(v1501);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1499 = constructor_load_v64(ctx, I16X8, v1427, v1426, v1428);
                            let v1502 = constructor_vec_unpacks_high(ctx, I16X8, v1499);
                            let v1503 = constructor_output_reg(ctx, v1502);
                            // Rule at src/isa/s390x/lower.isle line 2546.
                            return Some(v1503);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1504 = constructor_load_v64(ctx, I32X4, v1427, v1426, v1428);
                            let v1505 = constructor_vec_unpacku_high(ctx, I32X4, v1504);
                            let v1506 = constructor_output_reg(ctx, v1505);
                            // Rule at src/isa/s390x/lower.isle line 2550.
                            return Some(v1506);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1504 = constructor_load_v64(ctx, I32X4, v1427, v1426, v1428);
                            let v1507 = constructor_vec_unpacks_high(ctx, I32X4, v1504);
                            let v1508 = constructor_output_reg(ctx, v1507);
                            // Rule at src/isa/s390x/lower.isle line 2554.
                            return Some(v1508);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v985,
            arg: v986,
            flags: v987,
        } => {
            match v985 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v170 = C::multi_lane(ctx, v3);
                        if let Some(v171) = v170 {
                            let v988 = C::value_type(ctx, v986);
                            let v1007 = C::multi_lane(ctx, v988);
                            if let Some(v1008) = v1007 {
                                if v171.0 == v1008.0 {
                                    if v171.1 == v1008.1 {
                                        let v1000 = constructor_output_value(ctx, v986);
                                        // Rule at src/isa/s390x/lower.isle line 1726.
                                        return Some(v1000);
                                    }
                                }
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v988 = C::value_type(ctx, v986);
                            let v1011 = C::vr128_ty(ctx, v988);
                            if let Some(v1012) = v1011 {
                                let v989 = C::put_in_reg(ctx, v986);
                                let v1013 = &constructor_lane_order_from_memflags(ctx, v987);
                                let v1014 = constructor_abi_vec_elt_rev(ctx, v1013, v1012, v989);
                                let v1015 = constructor_abi_vec_elt_rev(ctx, v1013, v36, v1014);
                                let v1016 = constructor_output_reg(ctx, v1015);
                                // Rule at src/isa/s390x/lower.isle line 1736.
                                return Some(v1016);
                            }
                        }
                        let v1003 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1004) = v1003 {
                            let v988 = C::value_type(ctx, v986);
                            let v1005 = C::ty_scalar_float(ctx, v988);
                            if let Some(v1006) = v1005 {
                                let v1000 = constructor_output_value(ctx, v986);
                                // Rule at src/isa/s390x/lower.isle line 1722.
                                return Some(v1000);
                            }
                        }
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v988 = C::value_type(ctx, v986);
                            let v1001 = C::gpr64_ty(ctx, v988);
                            if let Some(v1002) = v1001 {
                                let v1000 = constructor_output_value(ctx, v986);
                                // Rule at src/isa/s390x/lower.isle line 1718.
                                return Some(v1000);
                            }
                        }
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v988 = C::value_type(ctx, v986);
                            let v998 = C::gpr32_ty(ctx, v988);
                            if let Some(v999) = v998 {
                                let v1000 = constructor_output_value(ctx, v986);
                                // Rule at src/isa/s390x/lower.isle line 1716.
                                return Some(v1000);
                            }
                        }
                        match v3 {
                            I32 => {
                                let v988 = C::value_type(ctx, v986);
                                if v988 == F32 {
                                    let v989 = C::put_in_reg(ctx, v986);
                                    let v52 = C::zero_reg(ctx);
                                    let v996 =
                                        constructor_vec_extract_lane(ctx, F32X4, v989, 0x0, v52);
                                    let v997 = constructor_output_reg(ctx, v996);
                                    // Rule at src/isa/s390x/lower.isle line 1712.
                                    return Some(v997);
                                }
                            }
                            I64 => {
                                let v988 = C::value_type(ctx, v986);
                                if v988 == F64 {
                                    let v989 = C::put_in_reg(ctx, v986);
                                    let v52 = C::zero_reg(ctx);
                                    let v992 =
                                        constructor_vec_extract_lane(ctx, F64X2, v989, 0x0, v52);
                                    let v993 = constructor_output_reg(ctx, v992);
                                    // Rule at src/isa/s390x/lower.isle line 1704.
                                    return Some(v993);
                                }
                            }
                            F32 => {
                                let v988 = C::value_type(ctx, v986);
                                if v988 == I32 {
                                    let v989 = C::put_in_reg(ctx, v986);
                                    let v52 = C::zero_reg(ctx);
                                    let v994 = constructor_vec_insert_lane_undef(
                                        ctx, F32X4, v989, 0x0, v52,
                                    );
                                    let v995 = constructor_output_reg(ctx, v994);
                                    // Rule at src/isa/s390x/lower.isle line 1708.
                                    return Some(v995);
                                }
                            }
                            F64 => {
                                let v988 = C::value_type(ctx, v986);
                                if v988 == I64 {
                                    let v989 = C::put_in_reg(ctx, v986);
                                    let v52 = C::zero_reg(ctx);
                                    let v990 = constructor_vec_insert_lane_undef(
                                        ctx, F64X2, v989, 0x0, v52,
                                    );
                                    let v991 = constructor_output_reg(ctx, v990);
                                    // Rule at src/isa/s390x/lower.isle line 1700.
                                    return Some(v991);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1629 = C::zero_offset(ctx);
                                let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                let v1631 = constructor_zext32_mem(ctx, I8, v1630);
                                let v1632 = constructor_output_reg(ctx, v1631);
                                // Rule at src/isa/s390x/lower.isle line 3181.
                                return Some(v1632);
                            }
                            I16 => {
                                let v1633 = C::bigendian(ctx, v987);
                                if let Some(v1634) = v1633 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1635 = constructor_zext32_mem(ctx, I16, v1630);
                                    let v1636 = constructor_output_reg(ctx, v1635);
                                    // Rule at src/isa/s390x/lower.isle line 3185.
                                    return Some(v1636);
                                }
                                let v1637 = C::littleendian(ctx, v987);
                                if let Some(v1638) = v1637 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1639 = constructor_loadrev16(ctx, v1630);
                                    let v1640 = constructor_output_reg(ctx, v1639);
                                    // Rule at src/isa/s390x/lower.isle line 3189.
                                    return Some(v1640);
                                }
                            }
                            I32 => {
                                let v1633 = C::bigendian(ctx, v987);
                                if let Some(v1634) = v1633 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1641 = constructor_load32(ctx, v1630);
                                    let v1642 = constructor_output_reg(ctx, v1641);
                                    // Rule at src/isa/s390x/lower.isle line 3193.
                                    return Some(v1642);
                                }
                                let v1637 = C::littleendian(ctx, v987);
                                if let Some(v1638) = v1637 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1643 = constructor_loadrev32(ctx, v1630);
                                    let v1644 = constructor_output_reg(ctx, v1643);
                                    // Rule at src/isa/s390x/lower.isle line 3197.
                                    return Some(v1644);
                                }
                            }
                            I64 => {
                                let v1633 = C::bigendian(ctx, v987);
                                if let Some(v1634) = v1633 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1645 = constructor_load64(ctx, v1630);
                                    let v1646 = constructor_output_reg(ctx, v1645);
                                    // Rule at src/isa/s390x/lower.isle line 3201.
                                    return Some(v1646);
                                }
                                let v1637 = C::littleendian(ctx, v987);
                                if let Some(v1638) = v1637 {
                                    let v1629 = C::zero_offset(ctx);
                                    let v1630 = &constructor_lower_address(ctx, v987, v986, v1629);
                                    let v1647 = constructor_loadrev64(ctx, v1630);
                                    let v1648 = constructor_output_reg(ctx, v1647);
                                    // Rule at src/isa/s390x/lower.isle line 3205.
                                    return Some(v1648);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1921,
            args: v1922,
        } => {
            if let &Opcode::Return = v1921 {
                let v1923 = C::value_list_slice(ctx, v1922);
                let v1925 = C::value_slice_len(ctx, v1923);
                let v1926 = C::range(ctx, 0x0, v1925);
                let v1927 = constructor_lower_return(ctx, v1926, v1923);
                // Rule at src/isa/s390x/lower.isle line 3870.
                return Some(v1927);
            }
        }
        &InstructionData::NullAry { opcode: ref v29 } => {
            match v29 {
                &Opcode::Debugtrap => {
                    let v1833 = &constructor_debugtrap_impl(ctx);
                    let v1834 = constructor_side_effect(ctx, v1833);
                    // Rule at src/isa/s390x/lower.isle line 3796.
                    return Some(v1834);
                }
                &Opcode::GetFramePointer => {
                    let v1985 = &C::memarg_stack_off(ctx, 0x0, 0x0);
                    let v1986 = constructor_load64(ctx, v1985);
                    let v1987 = constructor_output_reg(ctx, v1986);
                    // Rule at src/isa/s390x/lower.isle line 3956.
                    return Some(v1987);
                }
                &Opcode::GetStackPointer => {
                    let v1983 = constructor_sp(ctx);
                    let v1984 = constructor_output_reg(ctx, v1983);
                    // Rule at src/isa/s390x/lower.isle line 3953.
                    return Some(v1984);
                }
                &Opcode::GetReturnAddress => {
                    let v1989 = &C::memarg_initial_sp_offset(ctx, 0x70);
                    let v1990 = constructor_load64(ctx, v1989);
                    let v1991 = constructor_output_reg(ctx, v1990);
                    // Rule at src/isa/s390x/lower.isle line 3959.
                    return Some(v1991);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v31 = constructor_imm(ctx, v3, 0x0);
                        let v32 = constructor_output_reg(ctx, v31);
                        // Rule at src/isa/s390x/lower.isle line 39.
                        return Some(v32);
                    }
                }
                &Opcode::Nop => {
                    let v33 = C::invalid_reg(ctx);
                    let v34 = constructor_output_reg(ctx, v33);
                    // Rule at src/isa/s390x/lower.isle line 45.
                    return Some(v34);
                }
                &Opcode::Fence => {
                    let v1664 = &constructor_fence_impl(ctx);
                    let v1665 = constructor_side_effect(ctx, v1664);
                    // Rule at src/isa/s390x/lower.isle line 3237.
                    return Some(v1665);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1165,
            args: ref v1166,
            imm: v1167,
        } => {
            if let &Opcode::Shuffle = v1165 {
                let v1171 = C::u128_from_immediate(ctx, v1167);
                if let Some(v1172) = v1171 {
                    let v1173 = C::shuffle_mask_from_u128(ctx, v1172);
                    match v1173.1 {
                        0xF0F => {
                            let v1188 = C::u64_pair_split(ctx, v1173.0);
                            let v1191 = C::u32_pair_split(ctx, v1188.0);
                            let v1203 = C::u16_pair_split(ctx, v1191.1);
                            let v1206 = C::u8_pair_split(ctx, v1203.0);
                            match v1206.0 {
                                0x0 => {
                                    if v1206.1 == 0x1 {
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x2 {
                                            if v1209.1 == 0x3 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                if v1227.0 == 0x4 {
                                                    if v1227.1 == 0x5 {
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x6 {
                                                            if v1230.1 == 0x7 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1322 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1183,
                                                                    );
                                                                let v1323 = constructor_output_reg(
                                                                    ctx, v1322,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2133.
                                                                return Some(v1323);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1206.1 == 0x9 {
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0xA {
                                            if v1209.1 == 0xB {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                if v1227.0 == 0xC {
                                                    if v1227.1 == 0xD {
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0xE {
                                                            if v1230.1 == 0xF {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1334 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1183,
                                                                    );
                                                                let v1335 = constructor_output_reg(
                                                                    ctx, v1334,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2147.
                                                                return Some(v1335);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1206.1 == 0x11 {
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x12 {
                                            if v1209.1 == 0x13 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                if v1227.0 == 0x14 {
                                                    if v1227.1 == 0x15 {
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x16 {
                                                            if v1230.1 == 0x17 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1328 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1241,
                                                                    );
                                                                let v1329 = constructor_output_reg(
                                                                    ctx, v1328,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2139.
                                                                return Some(v1329);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1206.1 == 0x19 {
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x1A {
                                            if v1209.1 == 0x1B {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                if v1227.0 == 0x1C {
                                                    if v1227.1 == 0x1D {
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x1E {
                                                            if v1230.1 == 0x1F {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1340 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1241,
                                                                    );
                                                                let v1341 = constructor_output_reg(
                                                                    ctx, v1340,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2153.
                                                                return Some(v1341);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333 => {
                            let v1188 = C::u64_pair_split(ctx, v1173.0);
                            let v1191 = C::u32_pair_split(ctx, v1188.0);
                            let v1194 = C::u16_pair_split(ctx, v1191.0);
                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                            match v1200.0 {
                                0x0 => {
                                    if v1200.1 == 0x1 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x2 {
                                            if v1209.1 == 0x3 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                if v1221.0 == 0x4 {
                                                    if v1221.1 == 0x5 {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x6 {
                                                            if v1230.1 == 0x7 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1324 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1183,
                                                                    );
                                                                let v1325 = constructor_output_reg(
                                                                    ctx, v1324,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2135.
                                                                return Some(v1325);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1200.1 == 0x9 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0xA {
                                            if v1209.1 == 0xB {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                if v1221.0 == 0xC {
                                                    if v1221.1 == 0xD {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0xE {
                                                            if v1230.1 == 0xF {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1336 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1183,
                                                                    );
                                                                let v1337 = constructor_output_reg(
                                                                    ctx, v1336,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2149.
                                                                return Some(v1337);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1200.1 == 0x11 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x12 {
                                            if v1209.1 == 0x13 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                if v1221.0 == 0x14 {
                                                    if v1221.1 == 0x15 {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x16 {
                                                            if v1230.1 == 0x17 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1330 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1241,
                                                                    );
                                                                let v1331 = constructor_output_reg(
                                                                    ctx, v1330,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2141.
                                                                return Some(v1331);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1200.1 == 0x19 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                        if v1209.0 == 0x1A {
                                            if v1209.1 == 0x1B {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                if v1221.0 == 0x1C {
                                                    if v1221.1 == 0x1D {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                        if v1230.0 == 0x1E {
                                                            if v1230.1 == 0x1F {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1342 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1241,
                                                                    );
                                                                let v1343 = constructor_output_reg(
                                                                    ctx, v1342,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2155.
                                                                return Some(v1343);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555 => {
                            let v1188 = C::u64_pair_split(ctx, v1173.0);
                            let v1191 = C::u32_pair_split(ctx, v1188.0);
                            let v1194 = C::u16_pair_split(ctx, v1191.0);
                            let v1197 = C::u8_pair_split(ctx, v1194.0);
                            match v1197.1 {
                                0x0 => {
                                    let v1200 = C::u8_pair_split(ctx, v1194.1);
                                    if v1200.1 == 0x1 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                        if v1206.1 == 0x2 {
                                            let v1209 = C::u8_pair_split(ctx, v1203.1);
                                            if v1209.1 == 0x3 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1218 = C::u8_pair_split(ctx, v1215.0);
                                                if v1218.1 == 0x4 {
                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                    if v1221.1 == 0x5 {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                        if v1227.1 == 0x6 {
                                                            let v1230 =
                                                                C::u8_pair_split(ctx, v1224.1);
                                                            if v1230.1 == 0x7 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1326 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1183,
                                                                    );
                                                                let v1327 = constructor_output_reg(
                                                                    ctx, v1326,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2137.
                                                                return Some(v1327);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    let v1200 = C::u8_pair_split(ctx, v1194.1);
                                    if v1200.1 == 0x9 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                        if v1206.1 == 0xA {
                                            let v1209 = C::u8_pair_split(ctx, v1203.1);
                                            if v1209.1 == 0xB {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1218 = C::u8_pair_split(ctx, v1215.0);
                                                if v1218.1 == 0xC {
                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                    if v1221.1 == 0xD {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                        if v1227.1 == 0xE {
                                                            let v1230 =
                                                                C::u8_pair_split(ctx, v1224.1);
                                                            if v1230.1 == 0xF {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1183 =
                                                                    C::put_in_reg(ctx, v1168.0);
                                                                let v1338 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1183,
                                                                    );
                                                                let v1339 = constructor_output_reg(
                                                                    ctx, v1338,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2151.
                                                                return Some(v1339);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    let v1200 = C::u8_pair_split(ctx, v1194.1);
                                    if v1200.1 == 0x11 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                        if v1206.1 == 0x12 {
                                            let v1209 = C::u8_pair_split(ctx, v1203.1);
                                            if v1209.1 == 0x13 {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1218 = C::u8_pair_split(ctx, v1215.0);
                                                if v1218.1 == 0x14 {
                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                    if v1221.1 == 0x15 {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                        if v1227.1 == 0x16 {
                                                            let v1230 =
                                                                C::u8_pair_split(ctx, v1224.1);
                                                            if v1230.1 == 0x17 {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1332 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1241,
                                                                    );
                                                                let v1333 = constructor_output_reg(
                                                                    ctx, v1332,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2143.
                                                                return Some(v1333);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    let v1200 = C::u8_pair_split(ctx, v1194.1);
                                    if v1200.1 == 0x19 {
                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                        if v1206.1 == 0x1A {
                                            let v1209 = C::u8_pair_split(ctx, v1203.1);
                                            if v1209.1 == 0x1B {
                                                let v1212 = C::u32_pair_split(ctx, v1188.1);
                                                let v1215 = C::u16_pair_split(ctx, v1212.0);
                                                let v1218 = C::u8_pair_split(ctx, v1215.0);
                                                if v1218.1 == 0x1C {
                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                    if v1221.1 == 0x1D {
                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                        if v1227.1 == 0x1E {
                                                            let v1230 =
                                                                C::u8_pair_split(ctx, v1224.1);
                                                            if v1230.1 == 0x1F {
                                                                let v1168 = C::unpack_value_array_2(
                                                                    ctx, v1166,
                                                                );
                                                                let v1241 =
                                                                    C::put_in_reg(ctx, v1168.1);
                                                                let v1344 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1241,
                                                                    );
                                                                let v1345 = constructor_output_reg(
                                                                    ctx, v1344,
                                                                );
                                                                // Rule at src/isa/s390x/lower.isle line 2157.
                                                                return Some(v1345);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xFFFF => {
                            let v1188 = C::u64_pair_split(ctx, v1173.0);
                            let v1191 = C::u32_pair_split(ctx, v1188.0);
                            let v1194 = C::u16_pair_split(ctx, v1191.0);
                            let v1197 = C::u8_pair_split(ctx, v1194.0);
                            match v1197.0 {
                                0x0 => {
                                    match v1197.1 {
                                        0x0 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x1 {
                                                if v1200.1 == 0x1 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x2 {
                                                        if v1206.1 == 0x2 {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x3 {
                                                                if v1209.1 == 0x3 {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x4 {
                                                                        if v1218.1 == 0x4 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x5 {
                                                                                if v1221.1 == 0x5 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x7 {
                                                                                                if v1230.1 == 0x7 {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1256 = constructor_vec_merge_high(ctx, I8X16, v1183, v1177);
                                                                                                    let v1257 = constructor_output_reg(ctx, v1256);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2061.
                                                                                                    return Some(v1257);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            match v1200.0 {
                                                0x0 => {
                                                    if v1200.1 == 0x1 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x2 {
                                                            if v1206.1 == 0x3 {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x2 {
                                                                    if v1209.1 == 0x3 {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x4 {
                                                                            if v1218.1 == 0x5 {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x4 {
                                                                                    if v1221.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1227.1 == 0x7 {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x6 {
                                                                                                    if v1230.1 == 0x7 {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1254 = constructor_vec_merge_high(ctx, I16X8, v1183, v1177);
                                                                                                        let v1255 = constructor_output_reg(ctx, v1254);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2059.
                                                                                                        return Some(v1255);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2 => {
                                                    if v1200.1 == 0x3 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        match v1206.0 {
                                                            0x0 => {
                                                                if v1206.1 == 0x1 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x2 {
                                                                        if v1209.1 == 0x3 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x4 {
                                                                                if v1218.1 == 0x5 {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x4 {
                                                                                                if v1227.1 == 0x5 {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x6 {
                                                                                                        if v1230.1 == 0x7 {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1252 = constructor_vec_merge_high(ctx, I32X4, v1183, v1177);
                                                                                                            let v1253 = constructor_output_reg(ctx, v1252);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2057.
                                                                                                            return Some(v1253);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4 => {
                                                                if v1206.1 == 0x5 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x6 {
                                                                        if v1209.1 == 0x7 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            match v1218.0 {
                                                                                0x0 => {
                                                                                    if v1218.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1221.1 == 0x3 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x4 {
                                                                                                    if v1227.1 == 0x5 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x6 {
                                                                                                            if v1230.1 == 0x7 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1250 = constructor_vec_merge_high(ctx, I64X2, v1183, v1177);
                                                                                                                let v1251 = constructor_output_reg(ctx, v1250);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2055.
                                                                                                                return Some(v1251);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1218.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1221.1 == 0xB {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0xC {
                                                                                                    if v1227.1 == 0xD {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0xE {
                                                                                                            if v1230.1 == 0xF {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1354 = constructor_vec_permute_dw_imm(ctx, I8X16, v1183, 0x0, v1177, 0x1);
                                                                                                                let v1355 = constructor_output_reg(ctx, v1354);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2169.
                                                                                                                return Some(v1355);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1218.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1221.1 == 0x13 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x14 {
                                                                                                    if v1227.1 == 0x15 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x16 {
                                                                                                            if v1230.1 == 0x17 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1233 = constructor_vec_merge_high(ctx, I64X2, v1183, v1184);
                                                                                                                let v1234 = constructor_output_reg(ctx, v1233);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2039.
                                                                                                                return Some(v1234);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1218.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1221.1 == 0x1B {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x1C {
                                                                                                    if v1227.1 == 0x1D {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x1E {
                                                                                                            if v1230.1 == 0x1F {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1346 = constructor_vec_permute_dw_imm(ctx, I8X16, v1183, 0x0, v1184, 0x1);
                                                                                                                let v1347 = constructor_output_reg(ctx, v1346);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2161.
                                                                                                                return Some(v1347);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1206.1 == 0x11 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x12 {
                                                                        if v1209.1 == 0x13 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x4 {
                                                                                if v1218.1 == 0x5 {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x14 {
                                                                                                if v1227.1 == 0x15 {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x16 {
                                                                                                        if v1230.1 == 0x17 {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1235 = constructor_vec_merge_high(ctx, I32X4, v1183, v1184);
                                                                                                            let v1236 = constructor_output_reg(ctx, v1235);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2041.
                                                                                                            return Some(v1236);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1200.1 == 0x11 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x2 {
                                                            if v1206.1 == 0x3 {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x12 {
                                                                    if v1209.1 == 0x13 {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x4 {
                                                                            if v1218.1 == 0x5 {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x14 {
                                                                                    if v1221.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1227.1 == 0x7 {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x16 {
                                                                                                    if v1230.1 == 0x17 {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1237 = constructor_vec_merge_high(ctx, I16X8, v1183, v1184);
                                                                                                        let v1238 = constructor_output_reg(ctx, v1237);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2043.
                                                                                                        return Some(v1238);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x1 {
                                                if v1200.1 == 0x11 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x2 {
                                                        if v1206.1 == 0x12 {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x3 {
                                                                if v1209.1 == 0x13 {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x4 {
                                                                        if v1218.1 == 0x14 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x5 {
                                                                                if v1221.1 == 0x15 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x7 {
                                                                                                if v1230.1 == 0x17 {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1239 = constructor_vec_merge_high(ctx, I8X16, v1183, v1184);
                                                                                                    let v1240 = constructor_output_reg(ctx, v1239);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2045.
                                                                                                    return Some(v1240);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1 => {
                                    if v1197.1 == 0x3 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x5 {
                                            if v1200.1 == 0x7 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0x9 {
                                                    if v1206.1 == 0xB {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0xD {
                                                            if v1209.1 == 0xF {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x1 => {
                                                                        if v1218.1 == 0x3 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x5 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xD {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1314 = constructor_vec_pack(ctx, I16X8, v1183, v1177);
                                                                                                    let v1315 = constructor_output_reg(ctx, v1314);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2123.
                                                                                                    return Some(v1315);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1218.1 == 0x13 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x15 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1D {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1302 = constructor_vec_pack(ctx, I16X8, v1183, v1184);
                                                                                                    let v1303 = constructor_output_reg(ctx, v1302);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2111.
                                                                                                    return Some(v1303);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2 => {
                                    if v1197.1 == 0x3 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x6 {
                                            if v1200.1 == 0x7 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0xA {
                                                    if v1206.1 == 0xB {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0xE {
                                                            if v1209.1 == 0xF {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x2 => {
                                                                        if v1218.1 == 0x3 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x6 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xE {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1312 = constructor_vec_pack(ctx, I32X4, v1183, v1177);
                                                                                                    let v1313 = constructor_output_reg(ctx, v1312);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2121.
                                                                                                    return Some(v1313);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1218.1 == 0x13 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x16 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1E {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1300 = constructor_vec_pack(ctx, I32X4, v1183, v1184);
                                                                                                    let v1301 = constructor_output_reg(ctx, v1300);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2109.
                                                                                                    return Some(v1301);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4 => {
                                    if v1197.1 == 0x5 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x6 {
                                            if v1200.1 == 0x7 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0xC {
                                                    if v1206.1 == 0xD {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0xE {
                                                            if v1209.1 == 0xF {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x4 => {
                                                                        if v1218.1 == 0x5 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x6 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xE {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1310 = constructor_vec_pack(ctx, I64X2, v1183, v1177);
                                                                                                    let v1311 = constructor_output_reg(ctx, v1310);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2119.
                                                                                                    return Some(v1311);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1218.1 == 0x15 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x16 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1E {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1298 = constructor_vec_pack(ctx, I64X2, v1183, v1184);
                                                                                                    let v1299 = constructor_output_reg(ctx, v1298);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2107.
                                                                                                    return Some(v1299);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    match v1197.1 {
                                        0x8 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x9 {
                                                if v1200.1 == 0x9 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0xA {
                                                        if v1206.1 == 0xA {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0xB {
                                                                if v1209.1 == 0xB {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0xC {
                                                                        if v1218.1 == 0xC {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0xD {
                                                                                if v1221.1 == 0xD {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xF {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1288 = constructor_vec_merge_low(ctx, I8X16, v1183, v1177);
                                                                                                    let v1289 = constructor_output_reg(ctx, v1288);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2095.
                                                                                                    return Some(v1289);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            match v1200.0 {
                                                0x8 => {
                                                    if v1200.1 == 0x9 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0xA {
                                                            if v1206.1 == 0xB {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0xA {
                                                                    if v1209.1 == 0xB {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0xC {
                                                                            if v1218.1 == 0xD {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0xC {
                                                                                    if v1221.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1227.1 == 0xF {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0xE {
                                                                                                    if v1230.1 == 0xF {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1286 = constructor_vec_merge_low(ctx, I16X8, v1183, v1177);
                                                                                                        let v1287 = constructor_output_reg(ctx, v1286);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2093.
                                                                                                        return Some(v1287);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xA => {
                                                    if v1200.1 == 0xB {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        match v1206.0 {
                                                            0x8 => {
                                                                if v1206.1 == 0x9 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0xA {
                                                                        if v1209.1 == 0xB {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0xC {
                                                                                if v1218.1 == 0xD {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0xC {
                                                                                                if v1227.1 == 0xD {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0xE {
                                                                                                        if v1230.1 == 0xF {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1284 = constructor_vec_merge_low(ctx, I32X4, v1183, v1177);
                                                                                                            let v1285 = constructor_output_reg(ctx, v1284);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2091.
                                                                                                            return Some(v1285);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xC => {
                                                                if v1206.1 == 0xD {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0xE {
                                                                        if v1209.1 == 0xF {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            match v1218.0 {
                                                                                0x0 => {
                                                                                    if v1218.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1221.1 == 0x3 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x4 {
                                                                                                    if v1227.1 == 0x5 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x6 {
                                                                                                            if v1230.1 == 0x7 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1356 = constructor_vec_permute_dw_imm(ctx, I8X16, v1183, 0x1, v1177, 0x0);
                                                                                                                let v1357 = constructor_output_reg(ctx, v1356);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2171.
                                                                                                                return Some(v1357);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1218.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1221.1 == 0xB {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0xC {
                                                                                                    if v1227.1 == 0xD {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0xE {
                                                                                                            if v1230.1 == 0xF {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1282 = constructor_vec_merge_low(ctx, I64X2, v1183, v1177);
                                                                                                                let v1283 = constructor_output_reg(ctx, v1282);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2089.
                                                                                                                return Some(v1283);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1218.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1221.1 == 0x13 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x14 {
                                                                                                    if v1227.1 == 0x15 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x16 {
                                                                                                            if v1230.1 == 0x17 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1348 = constructor_vec_permute_dw_imm(ctx, I8X16, v1183, 0x1, v1184, 0x0);
                                                                                                                let v1349 = constructor_output_reg(ctx, v1348);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2163.
                                                                                                                return Some(v1349);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1218.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1221.1 == 0x1B {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x1C {
                                                                                                    if v1227.1 == 0x1D {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x1E {
                                                                                                            if v1230.1 == 0x1F {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1266 = constructor_vec_merge_low(ctx, I64X2, v1183, v1184);
                                                                                                                let v1267 = constructor_output_reg(ctx, v1266);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2073.
                                                                                                                return Some(v1267);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1206.1 == 0x19 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x1A {
                                                                        if v1209.1 == 0x1B {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0xC {
                                                                                if v1218.1 == 0xD {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x1C {
                                                                                                if v1227.1 == 0x1D {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x1E {
                                                                                                        if v1230.1 == 0x1F {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1268 = constructor_vec_merge_low(ctx, I32X4, v1183, v1184);
                                                                                                            let v1269 = constructor_output_reg(ctx, v1268);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2075.
                                                                                                            return Some(v1269);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1200.1 == 0x19 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0xA {
                                                            if v1206.1 == 0xB {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x1A {
                                                                    if v1209.1 == 0x1B {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0xC {
                                                                            if v1218.1 == 0xD {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x1C {
                                                                                    if v1221.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1227.1 == 0xF {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x1E {
                                                                                                    if v1230.1 == 0x1F {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1270 = constructor_vec_merge_low(ctx, I16X8, v1183, v1184);
                                                                                                        let v1271 = constructor_output_reg(ctx, v1270);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2077.
                                                                                                        return Some(v1271);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x9 {
                                                if v1200.1 == 0x19 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0xA {
                                                        if v1206.1 == 0x1A {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0xB {
                                                                if v1209.1 == 0x1B {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0xC {
                                                                        if v1218.1 == 0x1C {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0xD {
                                                                                if v1221.1 == 0x1D {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xF {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1183 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1272 = constructor_vec_merge_low(ctx, I8X16, v1183, v1184);
                                                                                                    let v1273 = constructor_output_reg(ctx, v1272);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2079.
                                                                                                    return Some(v1273);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10 => {
                                    match v1197.1 {
                                        0x0 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x11 {
                                                if v1200.1 == 0x1 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x12 {
                                                        if v1206.1 == 0x2 {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x13 {
                                                                if v1209.1 == 0x3 {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x14 {
                                                                        if v1218.1 == 0x4 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x15 {
                                                                                if v1221.1 == 0x5 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x17 {
                                                                                                if v1230.1 == 0x7 {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1248 = constructor_vec_merge_high(ctx, I8X16, v1241, v1177);
                                                                                                    let v1249 = constructor_output_reg(ctx, v1248);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2053.
                                                                                                    return Some(v1249);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x11 {
                                                if v1200.1 == 0x11 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x12 {
                                                        if v1206.1 == 0x12 {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x13 {
                                                                if v1209.1 == 0x13 {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x14 {
                                                                        if v1218.1 == 0x14 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x15 {
                                                                                if v1221.1 == 0x15 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x17 {
                                                                                                if v1230.1 == 0x17 {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1264 = constructor_vec_merge_high(ctx, I8X16, v1241, v1184);
                                                                                                    let v1265 = constructor_output_reg(ctx, v1264);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2069.
                                                                                                    return Some(v1265);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            match v1200.0 {
                                                0x0 => {
                                                    if v1200.1 == 0x1 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x12 {
                                                            if v1206.1 == 0x13 {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x2 {
                                                                    if v1209.1 == 0x3 {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x14 {
                                                                            if v1218.1 == 0x15 {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x4 {
                                                                                    if v1221.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1227.1 == 0x17 {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x6 {
                                                                                                    if v1230.1 == 0x7 {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1246 = constructor_vec_merge_high(ctx, I16X8, v1241, v1177);
                                                                                                        let v1247 = constructor_output_reg(ctx, v1246);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2051.
                                                                                                        return Some(v1247);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1200.1 == 0x11 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x12 {
                                                            if v1206.1 == 0x13 {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x12 {
                                                                    if v1209.1 == 0x13 {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x14 {
                                                                            if v1218.1 == 0x15 {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x14 {
                                                                                    if v1221.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1227.1 == 0x17 {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x16 {
                                                                                                    if v1230.1 == 0x17 {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1262 = constructor_vec_merge_high(ctx, I16X8, v1241, v1184);
                                                                                                        let v1263 = constructor_output_reg(ctx, v1262);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2067.
                                                                                                        return Some(v1263);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12 => {
                                                    if v1200.1 == 0x13 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        match v1206.0 {
                                                            0x0 => {
                                                                if v1206.1 == 0x1 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x2 {
                                                                        if v1209.1 == 0x3 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x14 {
                                                                                if v1218.1 == 0x15 {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x4 {
                                                                                                if v1227.1 == 0x5 {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x6 {
                                                                                                        if v1230.1 == 0x7 {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1244 = constructor_vec_merge_high(ctx, I32X4, v1241, v1177);
                                                                                                            let v1245 = constructor_output_reg(ctx, v1244);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2049.
                                                                                                            return Some(v1245);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1206.1 == 0x11 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x12 {
                                                                        if v1209.1 == 0x13 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x14 {
                                                                                if v1218.1 == 0x15 {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x14 {
                                                                                                if v1227.1 == 0x15 {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x16 {
                                                                                                        if v1230.1 == 0x17 {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1260 = constructor_vec_merge_high(ctx, I32X4, v1241, v1184);
                                                                                                            let v1261 = constructor_output_reg(ctx, v1260);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2065.
                                                                                                            return Some(v1261);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14 => {
                                                                if v1206.1 == 0x15 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x16 {
                                                                        if v1209.1 == 0x17 {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            match v1218.0 {
                                                                                0x0 => {
                                                                                    if v1218.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1221.1 == 0x3 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x4 {
                                                                                                    if v1227.1 == 0x5 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x6 {
                                                                                                            if v1230.1 == 0x7 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1242 = constructor_vec_merge_high(ctx, I64X2, v1241, v1177);
                                                                                                                let v1243 = constructor_output_reg(ctx, v1242);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2047.
                                                                                                                return Some(v1243);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1218.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1221.1 == 0xB {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0xC {
                                                                                                    if v1227.1 == 0xD {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0xE {
                                                                                                            if v1230.1 == 0xF {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1350 = constructor_vec_permute_dw_imm(ctx, I8X16, v1241, 0x0, v1177, 0x1);
                                                                                                                let v1351 = constructor_output_reg(ctx, v1350);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2165.
                                                                                                                return Some(v1351);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1218.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1221.1 == 0x13 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x14 {
                                                                                                    if v1227.1 == 0x15 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x16 {
                                                                                                            if v1230.1 == 0x17 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1258 = constructor_vec_merge_high(ctx, I64X2, v1241, v1184);
                                                                                                                let v1259 = constructor_output_reg(ctx, v1258);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2063.
                                                                                                                return Some(v1259);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1218.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1221.1 == 0x1B {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x1C {
                                                                                                    if v1227.1 == 0x1D {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x1E {
                                                                                                            if v1230.1 == 0x1F {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1358 = constructor_vec_permute_dw_imm(ctx, I8X16, v1241, 0x0, v1184, 0x1);
                                                                                                                let v1359 = constructor_output_reg(ctx, v1358);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2173.
                                                                                                                return Some(v1359);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11 => {
                                    if v1197.1 == 0x13 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x15 {
                                            if v1200.1 == 0x17 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0x19 {
                                                    if v1206.1 == 0x1B {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0x1D {
                                                            if v1209.1 == 0x1F {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x1 => {
                                                                        if v1218.1 == 0x3 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x5 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xD {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1308 = constructor_vec_pack(ctx, I16X8, v1241, v1177);
                                                                                                    let v1309 = constructor_output_reg(ctx, v1308);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2117.
                                                                                                    return Some(v1309);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1218.1 == 0x13 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x15 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1D {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1320 = constructor_vec_pack(ctx, I16X8, v1241, v1184);
                                                                                                    let v1321 = constructor_output_reg(ctx, v1320);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2129.
                                                                                                    return Some(v1321);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12 => {
                                    if v1197.1 == 0x13 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x16 {
                                            if v1200.1 == 0x17 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0x1A {
                                                    if v1206.1 == 0x1B {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0x1E {
                                                            if v1209.1 == 0x1F {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x2 => {
                                                                        if v1218.1 == 0x3 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x6 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xE {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1306 = constructor_vec_pack(ctx, I32X4, v1241, v1177);
                                                                                                    let v1307 = constructor_output_reg(ctx, v1306);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2115.
                                                                                                    return Some(v1307);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1218.1 == 0x13 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x16 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1E {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1318 = constructor_vec_pack(ctx, I32X4, v1241, v1184);
                                                                                                    let v1319 = constructor_output_reg(ctx, v1318);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2127.
                                                                                                    return Some(v1319);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14 => {
                                    if v1197.1 == 0x15 {
                                        let v1200 = C::u8_pair_split(ctx, v1194.1);
                                        if v1200.0 == 0x16 {
                                            if v1200.1 == 0x17 {
                                                let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                if v1206.0 == 0x1C {
                                                    if v1206.1 == 0x1D {
                                                        let v1209 = C::u8_pair_split(ctx, v1203.1);
                                                        if v1209.0 == 0x1E {
                                                            if v1209.1 == 0x1F {
                                                                let v1212 =
                                                                    C::u32_pair_split(ctx, v1188.1);
                                                                let v1215 =
                                                                    C::u16_pair_split(ctx, v1212.0);
                                                                let v1218 =
                                                                    C::u8_pair_split(ctx, v1215.0);
                                                                match v1218.0 {
                                                                    0x4 => {
                                                                        if v1218.1 == 0x5 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x6 {
                                                                                if v1221.1 == 0x7 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0xE {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1304 = constructor_vec_pack(ctx, I64X2, v1241, v1177);
                                                                                                    let v1305 = constructor_output_reg(ctx, v1304);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2113.
                                                                                                    return Some(v1305);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1218.1 == 0x15 {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x16 {
                                                                                if v1221.1 == 0x17 {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1E {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1316 = constructor_vec_pack(ctx, I64X2, v1241, v1184);
                                                                                                    let v1317 = constructor_output_reg(ctx, v1316);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2125.
                                                                                                    return Some(v1317);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    match v1197.1 {
                                        0x8 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x19 {
                                                if v1200.1 == 0x9 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x1A {
                                                        if v1206.1 == 0xA {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x1B {
                                                                if v1209.1 == 0xB {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x1C {
                                                                        if v1218.1 == 0xC {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x1D {
                                                                                if v1221.1 == 0xD {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1F {
                                                                                                if v1230.1 == 0xF {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                    let v1280 = constructor_vec_merge_low(ctx, I8X16, v1241, v1177);
                                                                                                    let v1281 = constructor_output_reg(ctx, v1280);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2087.
                                                                                                    return Some(v1281);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            if v1200.0 == 0x19 {
                                                if v1200.1 == 0x19 {
                                                    let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                    let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                    if v1206.0 == 0x1A {
                                                        if v1206.1 == 0x1A {
                                                            let v1209 =
                                                                C::u8_pair_split(ctx, v1203.1);
                                                            if v1209.0 == 0x1B {
                                                                if v1209.1 == 0x1B {
                                                                    let v1212 = C::u32_pair_split(
                                                                        ctx, v1188.1,
                                                                    );
                                                                    let v1215 = C::u16_pair_split(
                                                                        ctx, v1212.0,
                                                                    );
                                                                    let v1218 = C::u8_pair_split(
                                                                        ctx, v1215.0,
                                                                    );
                                                                    if v1218.0 == 0x1C {
                                                                        if v1218.1 == 0x1C {
                                                                            let v1221 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.1,
                                                                                );
                                                                            if v1221.0 == 0x1D {
                                                                                if v1221.1 == 0x1D {
                                                                                    let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                    let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                    if v1227.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1227.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                            if v1230.0 == 0x1F {
                                                                                                if v1230.1 == 0x1F {
                                                                                                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                    let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                    let v1296 = constructor_vec_merge_low(ctx, I8X16, v1241, v1184);
                                                                                                    let v1297 = constructor_output_reg(ctx, v1296);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2103.
                                                                                                    return Some(v1297);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19 => {
                                            let v1200 = C::u8_pair_split(ctx, v1194.1);
                                            match v1200.0 {
                                                0x8 => {
                                                    if v1200.1 == 0x9 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x1A {
                                                            if v1206.1 == 0x1B {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0xA {
                                                                    if v1209.1 == 0xB {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x1C {
                                                                            if v1218.1 == 0x1D {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0xC {
                                                                                    if v1221.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1227.1 == 0x1F {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0xE {
                                                                                                    if v1230.1 == 0xF {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                        let v1278 = constructor_vec_merge_low(ctx, I16X8, v1241, v1177);
                                                                                                        let v1279 = constructor_output_reg(ctx, v1278);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2085.
                                                                                                        return Some(v1279);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1200.1 == 0x19 {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        if v1206.0 == 0x1A {
                                                            if v1206.1 == 0x1B {
                                                                let v1209 =
                                                                    C::u8_pair_split(ctx, v1203.1);
                                                                if v1209.0 == 0x1A {
                                                                    if v1209.1 == 0x1B {
                                                                        let v1212 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1188.1,
                                                                            );
                                                                        let v1215 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1212.0,
                                                                            );
                                                                        let v1218 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1215.0,
                                                                            );
                                                                        if v1218.0 == 0x1C {
                                                                            if v1218.1 == 0x1D {
                                                                                let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                if v1221.0 == 0x1C {
                                                                                    if v1221.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                        let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                        if v1227.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1227.1 == 0x1F {
                                                                                                let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                if v1230.0 == 0x1E {
                                                                                                    if v1230.1 == 0x1F {
                                                                                                        let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                        let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                        let v1294 = constructor_vec_merge_low(ctx, I16X8, v1241, v1184);
                                                                                                        let v1295 = constructor_output_reg(ctx, v1294);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2101.
                                                                                                        return Some(v1295);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1A => {
                                                    if v1200.1 == 0x1B {
                                                        let v1203 = C::u16_pair_split(ctx, v1191.1);
                                                        let v1206 = C::u8_pair_split(ctx, v1203.0);
                                                        match v1206.0 {
                                                            0x8 => {
                                                                if v1206.1 == 0x9 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0xA {
                                                                        if v1209.1 == 0xB {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x1C {
                                                                                if v1218.1 == 0x1D {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0xC {
                                                                                                if v1227.1 == 0xD {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0xE {
                                                                                                        if v1230.1 == 0xF {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                            let v1276 = constructor_vec_merge_low(ctx, I32X4, v1241, v1177);
                                                                                                            let v1277 = constructor_output_reg(ctx, v1276);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2083.
                                                                                                            return Some(v1277);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1206.1 == 0x19 {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x1A {
                                                                        if v1209.1 == 0x1B {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            if v1218.0 == 0x1C {
                                                                                if v1218.1 == 0x1D {
                                                                                    let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                    if v1221.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1221.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                            let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                            if v1227.0 == 0x1C {
                                                                                                if v1227.1 == 0x1D {
                                                                                                    let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                    if v1230.0 == 0x1E {
                                                                                                        if v1230.1 == 0x1F {
                                                                                                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                            let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                            let v1292 = constructor_vec_merge_low(ctx, I32X4, v1241, v1184);
                                                                                                            let v1293 = constructor_output_reg(ctx, v1292);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2099.
                                                                                                            return Some(v1293);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1C => {
                                                                if v1206.1 == 0x1D {
                                                                    let v1209 = C::u8_pair_split(
                                                                        ctx, v1203.1,
                                                                    );
                                                                    if v1209.0 == 0x1E {
                                                                        if v1209.1 == 0x1F {
                                                                            let v1212 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1188.1,
                                                                                );
                                                                            let v1215 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1212.0,
                                                                                );
                                                                            let v1218 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1215.0,
                                                                                );
                                                                            match v1218.0 {
                                                                                0x0 => {
                                                                                    if v1218.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1221.1 == 0x3 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x4 {
                                                                                                    if v1227.1 == 0x5 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x6 {
                                                                                                            if v1230.1 == 0x7 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1352 = constructor_vec_permute_dw_imm(ctx, I8X16, v1241, 0x1, v1177, 0x0);
                                                                                                                let v1353 = constructor_output_reg(ctx, v1352);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2167.
                                                                                                                return Some(v1353);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1218.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1221.1 == 0xB {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0xC {
                                                                                                    if v1227.1 == 0xD {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0xE {
                                                                                                            if v1230.1 == 0xF {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1177 = C::put_in_reg(ctx, v1168.0);
                                                                                                                let v1274 = constructor_vec_merge_low(ctx, I64X2, v1241, v1177);
                                                                                                                let v1275 = constructor_output_reg(ctx, v1274);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2081.
                                                                                                                return Some(v1275);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1218.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1221.1 == 0x13 {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x14 {
                                                                                                    if v1227.1 == 0x15 {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x16 {
                                                                                                            if v1230.1 == 0x17 {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1360 = constructor_vec_permute_dw_imm(ctx, I8X16, v1241, 0x1, v1184, 0x0);
                                                                                                                let v1361 = constructor_output_reg(ctx, v1360);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2175.
                                                                                                                return Some(v1361);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1218.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1221 = C::u8_pair_split(ctx, v1215.1);
                                                                                        if v1221.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1221.1 == 0x1B {
                                                                                                let v1224 = C::u16_pair_split(ctx, v1212.1);
                                                                                                let v1227 = C::u8_pair_split(ctx, v1224.0);
                                                                                                if v1227.0 == 0x1C {
                                                                                                    if v1227.1 == 0x1D {
                                                                                                        let v1230 = C::u8_pair_split(ctx, v1224.1);
                                                                                                        if v1230.0 == 0x1E {
                                                                                                            if v1230.1 == 0x1F {
                                                                                                                let v1168 = C::unpack_value_array_2(ctx, v1166);
                                                                                                                let v1241 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1184 = C::put_in_reg(ctx, v1168.1);
                                                                                                                let v1290 = constructor_vec_merge_low(ctx, I64X2, v1241, v1184);
                                                                                                                let v1291 = constructor_output_reg(ctx, v1290);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2097.
                                                                                                                return Some(v1291);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1168 = C::unpack_value_array_2(ctx, v1166);
                            let v1183 = C::put_in_reg(ctx, v1168.0);
                            let v1184 = C::put_in_reg(ctx, v1168.1);
                            let v1185 = constructor_vec_imm(ctx, I8X16, v1173.0);
                            let v1186 = constructor_vec_permute(ctx, I8X16, v1183, v1184, v1185);
                            let v1187 = constructor_output_reg(ctx, v1186);
                            // Rule at src/isa/s390x/lower.isle line 2035.
                            return Some(v1187);
                        }
                        _ => {}
                    }
                    let v1176 = constructor_vec_imm_byte_mask(ctx, I8X16, v1173.1);
                    let v1168 = C::unpack_value_array_2(ctx, v1166);
                    let v1177 = C::put_in_reg(ctx, v1168.0);
                    let v1178 = C::put_in_reg(ctx, v1168.1);
                    let v1179 = constructor_vec_imm(ctx, I8X16, v1173.0);
                    let v1180 = constructor_vec_permute(ctx, I8X16, v1177, v1178, v1179);
                    let v1181 = constructor_vec_and(ctx, I8X16, v1176, v1180);
                    let v1182 = constructor_output_reg(ctx, v1181);
                    // Rule at src/isa/s390x/lower.isle line 2030.
                    return Some(v1182);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1376,
            stack_slot: v1377,
            offset: v1378,
        } => {
            if let &Opcode::StackAddr = v1376 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1379 = constructor_stack_addr_impl(ctx, v3, v1377, v1378);
                    let v1380 = constructor_output_reg(ctx, v1379);
                    // Rule at src/isa/s390x/lower.isle line 2217.
                    return Some(v1380);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1083,
            args: ref v1084,
            flags: v1085,
            offset: v1086,
        } => {
            match v1083 {
                &Opcode::Store => {
                    let v1087 = C::unpack_value_array_2(ctx, v1084);
                    let v1090 = C::def_inst(ctx, v1087.0);
                    if let Some(v1091) = v1090 {
                        let v1092 = &C::inst_data(ctx, v1091);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1093,
                            arg: v1094,
                            imm: v1095,
                        } = v1092
                        {
                            if let &Opcode::Extractlane = v1093 {
                                let v1098 = C::bigendian(ctx, v1085);
                                if let Some(v1099) = v1098 {
                                    let v1100 = C::put_in_reg(ctx, v1094);
                                    let v1101 =
                                        &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                    let v1096 = C::value_type(ctx, v1094);
                                    let v1097 = C::u8_from_uimm8(ctx, v1095);
                                    let v1102 = C::be_lane_idx(ctx, v1096, v1097);
                                    let v1103 = &constructor_vec_store_lane(
                                        ctx, v1096, v1100, v1101, v1102,
                                    );
                                    let v1104 = constructor_side_effect(ctx, v1103);
                                    // Rule at src/isa/s390x/lower.isle line 1873.
                                    return Some(v1104);
                                }
                                let v1105 = C::littleendian(ctx, v1085);
                                if let Some(v1106) = v1105 {
                                    let v1100 = C::put_in_reg(ctx, v1094);
                                    let v1101 =
                                        &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                    let v1096 = C::value_type(ctx, v1094);
                                    let v1097 = C::u8_from_uimm8(ctx, v1095);
                                    let v1102 = C::be_lane_idx(ctx, v1096, v1097);
                                    let v1107 = &constructor_vec_store_lane_little(
                                        ctx, v1096, v1100, v1101, v1102,
                                    );
                                    let v1108 = constructor_side_effect(ctx, v1107);
                                    // Rule at src/isa/s390x/lower.isle line 1880.
                                    return Some(v1108);
                                }
                            }
                        }
                    }
                    let v1362 = &C::lane_order(ctx);
                    match v1362 {
                        &LaneOrder::LittleEndian => {
                            let v1509 = C::value_type(ctx, v1087.0);
                            let v1527 = C::vr128_ty(ctx, v1509);
                            if let Some(v1528) = v1527 {
                                let v1098 = C::bigendian(ctx, v1085);
                                if let Some(v1099) = v1098 {
                                    let v1518 = C::put_in_reg(ctx, v1087.0);
                                    let v1533 = &constructor_vec_store_elt_rev(
                                        ctx, v1528, v1518, v1085, v1087.1, v1086,
                                    );
                                    let v1534 = constructor_side_effect(ctx, v1533);
                                    // Rule at src/isa/s390x/lower.isle line 2668.
                                    return Some(v1534);
                                }
                                let v1105 = C::littleendian(ctx, v1085);
                                if let Some(v1106) = v1105 {
                                    let v1518 = C::put_in_reg(ctx, v1087.0);
                                    let v1535 = &constructor_vec_store_full_rev(
                                        ctx, v1528, v1518, v1085, v1087.1, v1086,
                                    );
                                    let v1536 = constructor_side_effect(ctx, v1535);
                                    // Rule at src/isa/s390x/lower.isle line 2674.
                                    return Some(v1536);
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v1509 = C::value_type(ctx, v1087.0);
                            let v1527 = C::vr128_ty(ctx, v1509);
                            if let Some(v1528) = v1527 {
                                let v1098 = C::bigendian(ctx, v1085);
                                if let Some(v1099) = v1098 {
                                    let v1518 = C::put_in_reg(ctx, v1087.0);
                                    let v1101 =
                                        &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                    let v1529 = &constructor_vec_store(ctx, v1518, v1101);
                                    let v1530 = constructor_side_effect(ctx, v1529);
                                    // Rule at src/isa/s390x/lower.isle line 2656.
                                    return Some(v1530);
                                }
                                let v1105 = C::littleendian(ctx, v1085);
                                if let Some(v1106) = v1105 {
                                    let v1518 = C::put_in_reg(ctx, v1087.0);
                                    let v1531 = &constructor_vec_store_byte_rev(
                                        ctx, v1528, v1518, v1085, v1087.1, v1086,
                                    );
                                    let v1532 = constructor_side_effect(ctx, v1531);
                                    // Rule at src/isa/s390x/lower.isle line 2662.
                                    return Some(v1532);
                                }
                            }
                        }
                        _ => {}
                    }
                    let v1509 = C::value_type(ctx, v1087.0);
                    match v1509 {
                        I8 => {
                            let v1510 =
                                &constructor_istore8_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                            let v1511 = constructor_side_effect(ctx, v1510);
                            // Rule at src/isa/s390x/lower.isle line 2612.
                            return Some(v1511);
                        }
                        I16 => {
                            let v1512 =
                                &constructor_istore16_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                            let v1513 = constructor_side_effect(ctx, v1512);
                            // Rule at src/isa/s390x/lower.isle line 2616.
                            return Some(v1513);
                        }
                        I32 => {
                            let v1514 =
                                &constructor_istore32_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                            let v1515 = constructor_side_effect(ctx, v1514);
                            // Rule at src/isa/s390x/lower.isle line 2620.
                            return Some(v1515);
                        }
                        I64 => {
                            let v1516 =
                                &constructor_istore64_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                            let v1517 = constructor_side_effect(ctx, v1516);
                            // Rule at src/isa/s390x/lower.isle line 2624.
                            return Some(v1517);
                        }
                        R64 => {
                            let v1516 =
                                &constructor_istore64_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                            let v1517 = constructor_side_effect(ctx, v1516);
                            // Rule at src/isa/s390x/lower.isle line 2628.
                            return Some(v1517);
                        }
                        F32 => {
                            let v1105 = C::littleendian(ctx, v1085);
                            if let Some(v1106) = v1105 {
                                let v1518 = C::put_in_reg(ctx, v1087.0);
                                let v1101 = &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                let v1521 = &constructor_vec_store_lane_little(
                                    ctx, F32X4, v1518, v1101, 0x0,
                                );
                                let v1522 = constructor_side_effect(ctx, v1521);
                                // Rule at src/isa/s390x/lower.isle line 2638.
                                return Some(v1522);
                            }
                            let v1098 = C::bigendian(ctx, v1085);
                            if let Some(v1099) = v1098 {
                                let v1518 = C::put_in_reg(ctx, v1087.0);
                                let v1101 = &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                let v1519 =
                                    &constructor_vec_store_lane(ctx, F32X4, v1518, v1101, 0x0);
                                let v1520 = constructor_side_effect(ctx, v1519);
                                // Rule at src/isa/s390x/lower.isle line 2632.
                                return Some(v1520);
                            }
                        }
                        F64 => {
                            let v1105 = C::littleendian(ctx, v1085);
                            if let Some(v1106) = v1105 {
                                let v1518 = C::put_in_reg(ctx, v1087.0);
                                let v1101 = &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                let v1525 = &constructor_vec_store_lane_little(
                                    ctx, F64X2, v1518, v1101, 0x0,
                                );
                                let v1526 = constructor_side_effect(ctx, v1525);
                                // Rule at src/isa/s390x/lower.isle line 2650.
                                return Some(v1526);
                            }
                            let v1098 = C::bigendian(ctx, v1085);
                            if let Some(v1099) = v1098 {
                                let v1518 = C::put_in_reg(ctx, v1087.0);
                                let v1101 = &constructor_lower_address(ctx, v1085, v1087.1, v1086);
                                let v1523 =
                                    &constructor_vec_store_lane(ctx, F64X2, v1518, v1101, 0x0);
                                let v1524 = constructor_side_effect(ctx, v1523);
                                // Rule at src/isa/s390x/lower.isle line 2644.
                                return Some(v1524);
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1087 = C::unpack_value_array_2(ctx, v1084);
                    let v1510 = &constructor_istore8_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                    let v1511 = constructor_side_effect(ctx, v1510);
                    // Rule at src/isa/s390x/lower.isle line 2768.
                    return Some(v1511);
                }
                &Opcode::Istore16 => {
                    let v1087 = C::unpack_value_array_2(ctx, v1084);
                    let v1512 = &constructor_istore16_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                    let v1513 = constructor_side_effect(ctx, v1512);
                    // Rule at src/isa/s390x/lower.isle line 2786.
                    return Some(v1513);
                }
                &Opcode::Istore32 => {
                    let v1087 = C::unpack_value_array_2(ctx, v1084);
                    let v1514 = &constructor_istore32_impl(ctx, v1085, v1087.0, v1087.1, v1086);
                    let v1515 = constructor_side_effect(ctx, v1514);
                    // Rule at src/isa/s390x/lower.isle line 2812.
                    return Some(v1515);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1649,
            args: ref v1650,
            flags: v1651,
        } => {
            if let &Opcode::AtomicStore = v1649 {
                let v1652 = C::unpack_value_array_2(ctx, v1650);
                let v1655 = C::value_type(ctx, v1652.0);
                match v1655 {
                    I8 => {
                        let v1629 = C::zero_offset(ctx);
                        let v1656 = &constructor_istore8_impl(ctx, v1651, v1652.0, v1652.1, v1629);
                        let v1657 = constructor_atomic_store_impl(ctx, v1656);
                        // Rule at src/isa/s390x/lower.isle line 3218.
                        return Some(v1657);
                    }
                    I16 => {
                        let v1629 = C::zero_offset(ctx);
                        let v1658 = &constructor_istore16_impl(ctx, v1651, v1652.0, v1652.1, v1629);
                        let v1659 = constructor_atomic_store_impl(ctx, v1658);
                        // Rule at src/isa/s390x/lower.isle line 3222.
                        return Some(v1659);
                    }
                    I32 => {
                        let v1629 = C::zero_offset(ctx);
                        let v1660 = &constructor_istore32_impl(ctx, v1651, v1652.0, v1652.1, v1629);
                        let v1661 = constructor_atomic_store_impl(ctx, v1660);
                        // Rule at src/isa/s390x/lower.isle line 3226.
                        return Some(v1661);
                    }
                    I64 => {
                        let v1629 = C::zero_offset(ctx);
                        let v1662 = &constructor_istore64_impl(ctx, v1651, v1652.0, v1652.1, v1629);
                        let v1663 = constructor_atomic_store_impl(ctx, v1662);
                        // Rule at src/isa/s390x/lower.isle line 3230.
                        return Some(v1663);
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v653,
            args: ref v654,
        } => {
            match v653 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v655 = C::unpack_value_array_3(ctx, v654);
                        let v1817 = &constructor_value_nonzero(ctx, v655.0);
                        let v660 = C::put_in_reg(ctx, v655.1);
                        let v816 = C::put_in_reg(ctx, v655.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1818 = constructor_select_bool_reg(ctx, v3, v1817, v660, v816);
                        let v1819 = constructor_output_reg(ctx, v1818);
                        // Rule at src/isa/s390x/lower.isle line 3697.
                        return Some(v1819);
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v655 = C::unpack_value_array_3(ctx, v654);
                        let v1817 = &constructor_value_nonzero(ctx, v655.0);
                        let v660 = C::put_in_reg(ctx, v655.1);
                        let v816 = C::put_in_reg(ctx, v655.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1818 = constructor_select_bool_reg(ctx, v3, v1817, v660, v816);
                        let v1819 = constructor_output_reg(ctx, v1818);
                        // Rule at src/isa/s390x/lower.isle line 3707.
                        return Some(v1819);
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v655 = C::unpack_value_array_3(ctx, v654);
                                let v659 = C::put_in_reg(ctx, v655.0);
                                let v660 = C::put_in_reg(ctx, v655.1);
                                let v661 = constructor_and_reg(ctx, v61, v660, v659);
                                let v662 = C::put_in_reg(ctx, v655.2);
                                let v663 = constructor_and_not_reg(ctx, v61, v662, v659);
                                let v664 = constructor_or_reg(ctx, v61, v663, v661);
                                let v665 = constructor_output_reg(ctx, v664);
                                // Rule at src/isa/s390x/lower.isle line 1084.
                                return Some(v665);
                            }
                            let v568 = C::mie2_disabled(ctx, v3);
                            if let Some(v569) = v568 {
                                let v655 = C::unpack_value_array_3(ctx, v654);
                                let v659 = C::put_in_reg(ctx, v655.0);
                                let v660 = C::put_in_reg(ctx, v655.1);
                                let v661 = constructor_and_reg(ctx, v61, v660, v659);
                                let v662 = C::put_in_reg(ctx, v655.2);
                                let v666 = constructor_not_reg(ctx, v61, v659);
                                let v667 = constructor_and_reg(ctx, v61, v662, v666);
                                let v668 = constructor_or_reg(ctx, v61, v667, v661);
                                let v669 = constructor_output_reg(ctx, v668);
                                // Rule at src/isa/s390x/lower.isle line 1091.
                                return Some(v669);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v655 = C::unpack_value_array_3(ctx, v654);
                            let v670 = C::put_in_reg(ctx, v655.1);
                            let v671 = C::put_in_reg(ctx, v655.2);
                            let v672 = C::put_in_reg(ctx, v655.0);
                            let v673 = constructor_vec_select(ctx, v36, v670, v671, v672);
                            let v674 = constructor_output_reg(ctx, v673);
                            // Rule at src/isa/s390x/lower.isle line 1098.
                            return Some(v674);
                        }
                    }
                }
                &Opcode::Vselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v655 = C::unpack_value_array_3(ctx, v654);
                            let v670 = C::put_in_reg(ctx, v655.1);
                            let v671 = C::put_in_reg(ctx, v655.2);
                            let v672 = C::put_in_reg(ctx, v655.0);
                            let v675 = constructor_vec_select(ctx, v149, v670, v671, v672);
                            let v676 = constructor_output_reg(ctx, v675);
                            // Rule at src/isa/s390x/lower.isle line 1105.
                            return Some(v676);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v655 = C::unpack_value_array_3(ctx, v654);
                        let v659 = C::put_in_reg(ctx, v655.0);
                        let v660 = C::put_in_reg(ctx, v655.1);
                        let v816 = C::put_in_reg(ctx, v655.2);
                        let v3 = C::value_type(ctx, v2);
                        let v817 = constructor_fma_reg(ctx, v3, v659, v660, v816);
                        let v818 = constructor_output_reg(ctx, v817);
                        // Rule at src/isa/s390x/lower.isle line 1393.
                        return Some(v818);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1017,
            args: ref v1018,
            imm: v1019,
        } => {
            if let &Opcode::Insertlane = v1017 {
                let v1020 = C::unpack_value_array_2(ctx, v1018);
                let v1054 = C::sinkable_inst(ctx, v1020.1);
                if let Some(v1055) = v1054 {
                    let v1056 = &C::inst_data(ctx, v1055);
                    if let &InstructionData::Load {
                        opcode: ref v1057,
                        arg: v1058,
                        flags: v1059,
                        offset: v1060,
                    } = v1056
                    {
                        if let &Opcode::Load = v1057 {
                            let v1066 = C::littleendian(ctx, v1059);
                            if let Some(v1067) = v1066 {
                                let v1028 = C::put_in_reg(ctx, v1020.0);
                                let v1063 = &constructor_sink_load(ctx, v1055);
                                let v1023 = C::value_type(ctx, v1020.0);
                                let v1025 = C::u8_from_uimm8(ctx, v1019);
                                let v1030 = C::be_lane_idx(ctx, v1023, v1025);
                                let v1068 = constructor_vec_load_lane_little(
                                    ctx, v1023, v1028, v1063, v1030,
                                );
                                let v1069 = constructor_output_reg(ctx, v1068);
                                // Rule at src/isa/s390x/lower.isle line 1775.
                                return Some(v1069);
                            }
                            let v1061 = C::bigendian(ctx, v1059);
                            if let Some(v1062) = v1061 {
                                let v1028 = C::put_in_reg(ctx, v1020.0);
                                let v1063 = &constructor_sink_load(ctx, v1055);
                                let v1023 = C::value_type(ctx, v1020.0);
                                let v1025 = C::u8_from_uimm8(ctx, v1019);
                                let v1030 = C::be_lane_idx(ctx, v1023, v1025);
                                let v1064 =
                                    constructor_vec_load_lane(ctx, v1023, v1028, v1063, v1030);
                                let v1065 = constructor_output_reg(ctx, v1064);
                                // Rule at src/isa/s390x/lower.isle line 1770.
                                return Some(v1065);
                            }
                        }
                    }
                }
                let v1050 = C::i16_from_value(ctx, v1020.1);
                if let Some(v1051) = v1050 {
                    let v1028 = C::put_in_reg(ctx, v1020.0);
                    let v1023 = C::value_type(ctx, v1020.0);
                    let v1025 = C::u8_from_uimm8(ctx, v1019);
                    let v1035 = C::be_lane_idx(ctx, v1023, v1025);
                    let v1052 = constructor_vec_insert_lane_imm(ctx, v1023, v1028, v1051, v1035);
                    let v1053 = constructor_output_reg(ctx, v1052);
                    // Rule at src/isa/s390x/lower.isle line 1765.
                    return Some(v1053);
                }
                let v1039 = C::def_inst(ctx, v1020.1);
                if let Some(v1040) = v1039 {
                    let v1041 = &C::inst_data(ctx, v1040);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1042,
                        arg: v1043,
                        imm: v1044,
                    } = v1041
                    {
                        if let &Opcode::Extractlane = v1042 {
                            let v1028 = C::put_in_reg(ctx, v1020.0);
                            let v1023 = C::value_type(ctx, v1020.0);
                            let v1025 = C::u8_from_uimm8(ctx, v1019);
                            let v1035 = C::be_lane_idx(ctx, v1023, v1025);
                            let v1046 = C::put_in_reg(ctx, v1043);
                            let v1045 = C::u8_from_uimm8(ctx, v1044);
                            let v1047 = C::be_lane_idx(ctx, v1023, v1045);
                            let v1048 = constructor_vec_move_lane_and_insert(
                                ctx, v1023, v1028, v1035, v1046, v1047,
                            );
                            let v1049 = constructor_output_reg(ctx, v1048);
                            // Rule at src/isa/s390x/lower.isle line 1758.
                            return Some(v1049);
                        }
                    }
                }
                let v1024 = C::value_type(ctx, v1020.1);
                let v1026 = C::ty_int_ref_scalar_64(ctx, v1024);
                if let Some(v1027) = v1026 {
                    let v1028 = C::put_in_reg(ctx, v1020.0);
                    let v1029 = C::put_in_reg(ctx, v1020.1);
                    let v1023 = C::value_type(ctx, v1020.0);
                    let v1025 = C::u8_from_uimm8(ctx, v1019);
                    let v1030 = C::be_lane_idx(ctx, v1023, v1025);
                    let v55 = C::zero_reg(ctx);
                    let v1031 = constructor_vec_insert_lane(ctx, v1023, v1028, v1029, v1030, v55);
                    let v1032 = constructor_output_reg(ctx, v1031);
                    // Rule at src/isa/s390x/lower.isle line 1745.
                    return Some(v1032);
                }
                let v1033 = C::ty_scalar_float(ctx, v1024);
                if let Some(v1034) = v1033 {
                    let v1028 = C::put_in_reg(ctx, v1020.0);
                    let v1023 = C::value_type(ctx, v1020.0);
                    let v1025 = C::u8_from_uimm8(ctx, v1019);
                    let v1035 = C::be_lane_idx(ctx, v1023, v1025);
                    let v1036 = C::put_in_reg(ctx, v1020.1);
                    let v1037 =
                        constructor_vec_move_lane_and_insert(ctx, v1023, v1028, v1035, v1036, 0x0);
                    let v1038 = constructor_output_reg(ctx, v1037);
                    // Rule at src/isa/s390x/lower.isle line 1752.
                    return Some(v1038);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1820,
            code: ref v1821,
        } => {
            match v1820 {
                &Opcode::Trap => {
                    let v1822 = &constructor_trap_impl(ctx, v1821);
                    let v1823 = constructor_side_effect(ctx, v1822);
                    // Rule at src/isa/s390x/lower.isle line 3766.
                    return Some(v1823);
                }
                &Opcode::ResumableTrap => {
                    let v1822 = &constructor_trap_impl(ctx, v1821);
                    let v1823 = constructor_side_effect(ctx, v1822);
                    // Rule at src/isa/s390x/lower.isle line 3772.
                    return Some(v1823);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v46,
            arg: v47,
        } => {
            match v46 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1130 = C::sinkable_inst(ctx, v47);
                        if let Some(v1131) = v1130 {
                            let v1132 = &C::inst_data(ctx, v1131);
                            if let &InstructionData::Load {
                                opcode: ref v1133,
                                arg: v1134,
                                flags: v1135,
                                offset: v1136,
                            } = v1132
                            {
                                if let &Opcode::Load = v1133 {
                                    let v1142 = C::littleendian(ctx, v1135);
                                    if let Some(v1143) = v1142 {
                                        let v1139 = &constructor_sink_load(ctx, v1131);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1144 =
                                            constructor_vec_load_replicate_little(ctx, v3, v1139);
                                        let v1145 = constructor_output_reg(ctx, v1144);
                                        // Rule at src/isa/s390x/lower.isle line 1942.
                                        return Some(v1145);
                                    }
                                    let v1137 = C::bigendian(ctx, v1135);
                                    if let Some(v1138) = v1137 {
                                        let v1139 = &constructor_sink_load(ctx, v1131);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1140 = constructor_vec_load_replicate(ctx, v3, v1139);
                                        let v1141 = constructor_output_reg(ctx, v1140);
                                        // Rule at src/isa/s390x/lower.isle line 1938.
                                        return Some(v1141);
                                    }
                                }
                            }
                        }
                        let v1126 = C::i16_from_value(ctx, v47);
                        if let Some(v1127) = v1126 {
                            let v3 = C::value_type(ctx, v2);
                            let v1128 = constructor_vec_imm_replicate(ctx, v3, v1127);
                            let v1129 = constructor_output_reg(ctx, v1128);
                            // Rule at src/isa/s390x/lower.isle line 1934.
                            return Some(v1129);
                        }
                        let v220 = C::def_inst(ctx, v47);
                        if let Some(v221) = v220 {
                            let v222 = &C::inst_data(ctx, v221);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1118,
                                arg: v1119,
                                imm: v1120,
                            } = v222
                            {
                                if let &Opcode::Extractlane = v1118 {
                                    let v1122 = C::put_in_reg(ctx, v1119);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1121 = C::u8_from_uimm8(ctx, v1120);
                                    let v1123 = C::be_lane_idx(ctx, v3, v1121);
                                    let v1124 =
                                        constructor_vec_replicate_lane(ctx, v3, v1122, v1123);
                                    let v1125 = constructor_output_reg(ctx, v1124);
                                    // Rule at src/isa/s390x/lower.isle line 1930.
                                    return Some(v1125);
                                }
                            }
                        }
                        let v48 = C::value_type(ctx, v47);
                        let v1109 = C::ty_int_ref_scalar_64(ctx, v48);
                        if let Some(v1110) = v1109 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v52 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1111 = constructor_vec_insert_lane_undef(ctx, v3, v49, 0x0, v52);
                            let v1112 = constructor_vec_replicate_lane(ctx, v3, v1111, 0x0);
                            let v1113 = constructor_output_reg(ctx, v1112);
                            // Rule at src/isa/s390x/lower.isle line 1920.
                            return Some(v1113);
                        }
                        let v1114 = C::ty_scalar_float(ctx, v48);
                        if let Some(v1115) = v1114 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v3 = C::value_type(ctx, v2);
                            let v1116 = constructor_vec_replicate_lane(ctx, v3, v49, 0x0);
                            let v1117 = constructor_output_reg(ctx, v1116);
                            // Rule at src/isa/s390x/lower.isle line 1925.
                            return Some(v1117);
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v1748 = &constructor_vany_true_val(ctx, v47);
                            let v1749 = constructor_lower_bool(ctx, v61, v1748);
                            let v1750 = constructor_output_reg(ctx, v1749);
                            // Rule at src/isa/s390x/lower.isle line 3542.
                            return Some(v1750);
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v1745 = &constructor_vall_true_val(ctx, v47);
                            let v1746 = constructor_lower_bool(ctx, v61, v1745);
                            let v1747 = constructor_output_reg(ctx, v1746);
                            // Rule at src/isa/s390x/lower.isle line 3464.
                            return Some(v1747);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1362 = &C::lane_order(ctx);
                    match v1362 {
                        &LaneOrder::LittleEndian => {
                            let v48 = C::value_type(ctx, v47);
                            let v1751 = C::multi_lane(ctx, v48);
                            if let Some(v1752) = v1751 {
                                match v1752.0 {
                                    0x8 => {
                                        if v1752.1 == 0x10 {
                                            let v1765 = constructor_imm8x16(
                                                ctx, 0x0, 0x8, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
                                                0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                                            );
                                            let v1766 = constructor_vec_imm(ctx, I8X16, v1765);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1768 =
                                                constructor_vec_bitpermute(ctx, v1767, v1766);
                                            let v319 = C::zero_reg(ctx);
                                            let v1769 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1768, 0x0, v319,
                                            );
                                            let v1770 = constructor_output_reg(ctx, v1769);
                                            // Rule at src/isa/s390x/lower.isle line 3618.
                                            return Some(v1770);
                                        }
                                    }
                                    0x10 => {
                                        if v1752.1 == 0x8 {
                                            let v1777 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60,
                                                0x70,
                                            );
                                            let v1778 = constructor_vec_imm(ctx, I8X16, v1777);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1779 =
                                                constructor_vec_bitpermute(ctx, v1767, v1778);
                                            let v319 = C::zero_reg(ctx);
                                            let v1780 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1779, 0x0, v319,
                                            );
                                            let v1781 = constructor_output_reg(ctx, v1780);
                                            // Rule at src/isa/s390x/lower.isle line 3629.
                                            return Some(v1781);
                                        }
                                    }
                                    0x20 => {
                                        if v1752.1 == 0x4 {
                                            let v1787 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x20, 0x40,
                                                0x60,
                                            );
                                            let v1788 = constructor_vec_imm(ctx, I8X16, v1787);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1789 =
                                                constructor_vec_bitpermute(ctx, v1767, v1788);
                                            let v319 = C::zero_reg(ctx);
                                            let v1790 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1789, 0x0, v319,
                                            );
                                            let v1791 = constructor_output_reg(ctx, v1790);
                                            // Rule at src/isa/s390x/lower.isle line 3640.
                                            return Some(v1791);
                                        }
                                    }
                                    0x40 => {
                                        if v1752.1 == 0x2 {
                                            let v1797 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0,
                                                0x40,
                                            );
                                            let v1798 = constructor_vec_imm(ctx, I8X16, v1797);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1799 =
                                                constructor_vec_bitpermute(ctx, v1767, v1798);
                                            let v319 = C::zero_reg(ctx);
                                            let v1800 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1799, 0x0, v319,
                                            );
                                            let v1801 = constructor_output_reg(ctx, v1800);
                                            // Rule at src/isa/s390x/lower.isle line 3651.
                                            return Some(v1801);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v48 = C::value_type(ctx, v47);
                            let v1751 = C::multi_lane(ctx, v48);
                            if let Some(v1752) = v1751 {
                                match v1752.0 {
                                    0x8 => {
                                        if v1752.1 == 0x10 {
                                            let v1771 = constructor_imm8x16(
                                                ctx, 0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48,
                                                0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x8, 0x0,
                                            );
                                            let v1772 = constructor_vec_imm(ctx, I8X16, v1771);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1773 =
                                                constructor_vec_bitpermute(ctx, v1767, v1772);
                                            let v319 = C::zero_reg(ctx);
                                            let v1774 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1773, 0x0, v319,
                                            );
                                            let v1775 = constructor_output_reg(ctx, v1774);
                                            // Rule at src/isa/s390x/lower.isle line 3623.
                                            return Some(v1775);
                                        }
                                    }
                                    0x10 => {
                                        if v1752.1 == 0x8 {
                                            let v1782 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10,
                                                0x0,
                                            );
                                            let v1783 = constructor_vec_imm(ctx, I8X16, v1782);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1784 =
                                                constructor_vec_bitpermute(ctx, v1767, v1783);
                                            let v319 = C::zero_reg(ctx);
                                            let v1785 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1784, 0x0, v319,
                                            );
                                            let v1786 = constructor_output_reg(ctx, v1785);
                                            // Rule at src/isa/s390x/lower.isle line 3634.
                                            return Some(v1786);
                                        }
                                    }
                                    0x20 => {
                                        if v1752.1 == 0x4 {
                                            let v1792 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0x20,
                                                0x0,
                                            );
                                            let v1793 = constructor_vec_imm(ctx, I8X16, v1792);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1794 =
                                                constructor_vec_bitpermute(ctx, v1767, v1793);
                                            let v319 = C::zero_reg(ctx);
                                            let v1795 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1794, 0x0, v319,
                                            );
                                            let v1796 = constructor_output_reg(ctx, v1795);
                                            // Rule at src/isa/s390x/lower.isle line 3645.
                                            return Some(v1796);
                                        }
                                    }
                                    0x40 => {
                                        if v1752.1 == 0x2 {
                                            let v1802 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
                                                0x0,
                                            );
                                            let v1803 = constructor_vec_imm(ctx, I8X16, v1802);
                                            let v1767 = C::put_in_reg(ctx, v47);
                                            let v1804 =
                                                constructor_vec_bitpermute(ctx, v1767, v1803);
                                            let v319 = C::zero_reg(ctx);
                                            let v1805 = constructor_vec_extract_lane(
                                                ctx, I64X2, v1804, 0x0, v319,
                                            );
                                            let v1806 = constructor_output_reg(ctx, v1805);
                                            // Rule at src/isa/s390x/lower.isle line 3656.
                                            return Some(v1806);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v220 = C::def_inst(ctx, v47);
                            if let Some(v221) = v220 {
                                let v222 = &C::inst_data(ctx, v221);
                                if let &InstructionData::Unary {
                                    opcode: ref v223,
                                    arg: v224,
                                } = v222
                                {
                                    if let &Opcode::Sextend = v223 {
                                        let v225 = C::value_type(ctx, v224);
                                        if v225 == I32 {
                                            let v226 = C::put_in_reg(ctx, v224);
                                            let v242 = constructor_neg_reg_sext32(ctx, v61, v226);
                                            let v243 = constructor_output_reg(ctx, v242);
                                            // Rule at src/isa/s390x/lower.isle line 227.
                                            return Some(v243);
                                        }
                                    }
                                }
                            }
                            let v49 = C::put_in_reg(ctx, v47);
                            let v240 = constructor_neg_reg(ctx, v61, v49);
                            let v241 = constructor_output_reg(ctx, v240);
                            // Rule at src/isa/s390x/lower.isle line 223.
                            return Some(v241);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v244 = constructor_vec_neg(ctx, v149, v49);
                            let v245 = constructor_output_reg(ctx, v244);
                            // Rule at src/isa/s390x/lower.isle line 231.
                            return Some(v245);
                        }
                        if v3 == I128 {
                            let v233 = constructor_vec_imm(ctx, I128, 0x0);
                            let v234 = C::put_in_reg(ctx, v47);
                            let v235 = constructor_vec_sub(ctx, I128, v233, v234);
                            let v246 = constructor_output_reg(ctx, v235);
                            // Rule at src/isa/s390x/lower.isle line 235.
                            return Some(v246);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v220 = C::def_inst(ctx, v47);
                            if let Some(v221) = v220 {
                                let v222 = &C::inst_data(ctx, v221);
                                if let &InstructionData::Unary {
                                    opcode: ref v223,
                                    arg: v224,
                                } = v222
                                {
                                    if let &Opcode::Sextend = v223 {
                                        let v225 = C::value_type(ctx, v224);
                                        if v225 == I32 {
                                            let v226 = C::put_in_reg(ctx, v224);
                                            let v227 = constructor_abs_reg_sext32(ctx, v61, v226);
                                            let v228 = constructor_output_reg(ctx, v227);
                                            // Rule at src/isa/s390x/lower.isle line 203.
                                            return Some(v228);
                                        }
                                    }
                                }
                            }
                            let v216 = constructor_ty_ext32(ctx, v61);
                            let v217 = constructor_put_in_reg_sext32(ctx, v47);
                            let v218 = constructor_abs_reg(ctx, v216, v217);
                            let v219 = constructor_output_reg(ctx, v218);
                            // Rule at src/isa/s390x/lower.isle line 199.
                            return Some(v219);
                        }
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v229 = constructor_vec_abs(ctx, v149, v49);
                            let v230 = constructor_output_reg(ctx, v229);
                            // Rule at src/isa/s390x/lower.isle line 207.
                            return Some(v230);
                        }
                        if v3 == I128 {
                            let v233 = constructor_vec_imm(ctx, I128, 0x0);
                            let v234 = C::put_in_reg(ctx, v47);
                            let v235 = constructor_vec_sub(ctx, I128, v233, v234);
                            let v236 = constructor_vec_replicate_lane(ctx, I64X2, v234, 0x0);
                            let v237 = constructor_vec_cmph(ctx, I64X2, v233, v236);
                            let v238 = constructor_vec_select(ctx, I128, v235, v234, v237);
                            let v239 = constructor_output_reg(ctx, v238);
                            // Rule at src/isa/s390x/lower.isle line 211.
                            return Some(v239);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v566 = constructor_not_or_reg(ctx, v61, v49, v49);
                                let v567 = constructor_output_reg(ctx, v566);
                                // Rule at src/isa/s390x/lower.isle line 947.
                                return Some(v567);
                            }
                            let v568 = C::mie2_disabled(ctx, v3);
                            if let Some(v569) = v568 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v570 = constructor_not_reg(ctx, v61, v49);
                                let v571 = constructor_output_reg(ctx, v570);
                                // Rule at src/isa/s390x/lower.isle line 952.
                                return Some(v571);
                            }
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v572 = constructor_vec_not(ctx, v36, v49);
                            let v573 = constructor_output_reg(ctx, v572);
                            // Rule at src/isa/s390x/lower.isle line 956.
                            return Some(v573);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v685 = constructor_bitrev_bits(ctx, 0x1, 0xAAAAAAAAAAAAAAAA, v3, v49);
                        let v686 = constructor_bitrev_bits(ctx, 0x2, 0xCCCCCCCCCCCCCCCC, v3, v685);
                        let v687 = constructor_bitrev_bits(ctx, 0x4, 0xF0F0F0F0F0F0F0F0, v3, v686);
                        let v688 = constructor_bitrev_bytes(ctx, v3, v687);
                        let v689 = constructor_output_reg(ctx, v688);
                        // Rule at src/isa/s390x/lower.isle line 1117.
                        return Some(v689);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v520 = constructor_put_in_reg_zext64(ctx, v47);
                            let v693 = constructor_clz_reg(ctx, 0x40, v520);
                            let v694 = constructor_clz_offset(ctx, v61, v693);
                            let v695 = constructor_output_reg(ctx, v694);
                            // Rule at src/isa/s390x/lower.isle line 1168.
                            return Some(v695);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v696 = constructor_vec_clz(ctx, I64X2, v49);
                            let v697 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v698 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v697, 0x0, v696, 0x0);
                            let v699 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v697, 0x0, v696, 0x1);
                            let v700 = constructor_vec_add(ctx, I64X2, v698, v699);
                            let v702 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v703 = constructor_vec_cmpeq(ctx, I64X2, v698, v702);
                            let v704 = constructor_vec_select(ctx, I128, v700, v698, v703);
                            let v705 = constructor_output_reg(ctx, v704);
                            // Rule at src/isa/s390x/lower.isle line 1176.
                            return Some(v705);
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v537 = constructor_put_in_reg_sext64(ctx, v47);
                            let v540 = constructor_ashr_imm(ctx, I64, v537, 0x3F);
                            let v706 = constructor_xor_reg(ctx, I64, v537, v540);
                            let v707 = constructor_clz_reg(ctx, 0x40, v706);
                            let v708 = constructor_cls_offset(ctx, v61, v707);
                            let v709 = constructor_output_reg(ctx, v708);
                            // Rule at src/isa/s390x/lower.isle line 1202.
                            return Some(v709);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v711 = constructor_vec_imm_splat(ctx, I8X16, 0xFF);
                            let v712 = constructor_vec_ashr_by_byte(ctx, v49, v711);
                            let v713 = constructor_vec_ashr_by_bit(ctx, v712, v711);
                            let v714 = constructor_vec_xor(ctx, I128, v49, v713);
                            let v715 = constructor_vec_clz(ctx, I64X2, v714);
                            let v716 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v717 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v716, 0x0, v715, 0x0);
                            let v718 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v716, 0x0, v715, 0x1);
                            let v719 = constructor_vec_add(ctx, I64X2, v717, v718);
                            let v720 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v721 = constructor_vec_cmpeq(ctx, I64X2, v717, v720);
                            let v722 = constructor_vec_select(ctx, I128, v719, v717, v721);
                            let v723 = constructor_vec_add(ctx, I128, v722, v711);
                            let v724 = constructor_output_reg(ctx, v723);
                            // Rule at src/isa/s390x/lower.isle line 1210.
                            return Some(v724);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v725 = constructor_ctz_guardbit(ctx, v515);
                            let v726 = constructor_or_uimm16shifted(ctx, I64, v49, v725);
                            let v727 = constructor_neg_reg(ctx, I64, v726);
                            let v728 = constructor_and_reg(ctx, I64, v726, v727);
                            let v729 = constructor_clz_reg(ctx, 0x40, v728);
                            let v731 = constructor_imm(ctx, v515, 0x3F);
                            let v732 = constructor_sub_reg(ctx, v515, v731, v729);
                            let v733 = constructor_output_reg(ctx, v732);
                            // Rule at src/isa/s390x/lower.isle line 1239.
                            return Some(v733);
                        }
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v734 = constructor_neg_reg(ctx, I64, v49);
                            let v735 = constructor_and_reg(ctx, I64, v49, v734);
                            let v737 = constructor_clz_reg(ctx, -0x1, v735);
                            let v738 = constructor_imm(ctx, I64, 0x3F);
                            let v739 = constructor_sub_reg(ctx, I64, v738, v737);
                            let v740 = constructor_output_reg(ctx, v739);
                            // Rule at src/isa/s390x/lower.isle line 1254.
                            return Some(v740);
                        }
                        if v3 == I128 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v741 = constructor_vec_ctz(ctx, I64X2, v49);
                            let v697 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v742 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v697, 0x0, v741, 0x0);
                            let v743 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v697, 0x0, v741, 0x1);
                            let v744 = constructor_vec_add(ctx, I64X2, v742, v743);
                            let v702 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v745 = constructor_vec_cmpeq(ctx, I64X2, v743, v702);
                            let v746 = constructor_vec_select(ctx, I128, v744, v743, v745);
                            let v747 = constructor_output_reg(ctx, v746);
                            // Rule at src/isa/s390x/lower.isle line 1261.
                            return Some(v747);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v690 = constructor_bitrev_bytes(ctx, v3, v49);
                        let v691 = constructor_output_reg(ctx, v690);
                        // Rule at src/isa/s390x/lower.isle line 1152.
                        return Some(v691);
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v148 = C::ty_vec128(ctx, v3);
                        if let Some(v149) = v148 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v776 = constructor_vec_popcnt(ctx, v149, v49);
                            let v777 = constructor_output_reg(ctx, v776);
                            // Rule at src/isa/s390x/lower.isle line 1309.
                            return Some(v777);
                        }
                        match v3 {
                            I8 => {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v748 = constructor_popcnt_byte(ctx, v49);
                                let v749 = constructor_output_reg(ctx, v748);
                                // Rule at src/isa/s390x/lower.isle line 1274.
                                return Some(v749);
                            }
                            I16 => {
                                let v568 = C::mie2_disabled(ctx, v3);
                                if let Some(v569) = v568 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v748 = constructor_popcnt_byte(ctx, v49);
                                    let v753 = constructor_lshr_imm(ctx, I32, v748, 0x8);
                                    let v754 = constructor_add_reg(ctx, I32, v748, v753);
                                    let v756 = C::uimm16shifted(ctx, 0xFF, 0x0);
                                    let v757 = constructor_and_uimm16shifted(ctx, I32, v754, v756);
                                    let v758 = constructor_output_reg(ctx, v757);
                                    // Rule at src/isa/s390x/lower.isle line 1290.
                                    return Some(v758);
                                }
                            }
                            I32 => {
                                let v568 = C::mie2_disabled(ctx, v3);
                                if let Some(v569) = v568 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v748 = constructor_popcnt_byte(ctx, v49);
                                    let v760 = constructor_lshl_imm(ctx, I32, v748, 0x10);
                                    let v761 = constructor_add_reg(ctx, I32, v748, v760);
                                    let v762 = constructor_lshl_imm(ctx, I32, v761, 0x8);
                                    let v763 = constructor_add_reg(ctx, I32, v761, v762);
                                    let v765 = constructor_lshr_imm(ctx, I32, v763, 0x18);
                                    let v766 = constructor_output_reg(ctx, v765);
                                    // Rule at src/isa/s390x/lower.isle line 1295.
                                    return Some(v766);
                                }
                            }
                            I64 => {
                                let v568 = C::mie2_disabled(ctx, v3);
                                if let Some(v569) = v568 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v748 = constructor_popcnt_byte(ctx, v49);
                                    let v767 = constructor_lshl_imm(ctx, I64, v748, 0x20);
                                    let v768 = constructor_add_reg(ctx, I64, v748, v767);
                                    let v769 = constructor_lshl_imm(ctx, I64, v768, 0x10);
                                    let v770 = constructor_add_reg(ctx, I64, v768, v769);
                                    let v771 = constructor_lshl_imm(ctx, I64, v770, 0x8);
                                    let v772 = constructor_add_reg(ctx, I64, v770, v771);
                                    let v774 = constructor_lshr_imm(ctx, I64, v772, 0x38);
                                    let v775 = constructor_output_reg(ctx, v774);
                                    // Rule at src/isa/s390x/lower.isle line 1301.
                                    return Some(v775);
                                }
                            }
                            I128 => {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v778 = constructor_vec_popcnt(ctx, I64X2, v49);
                                let v697 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v779 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v697, 0x0, v778, 0x0,
                                );
                                let v780 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v697, 0x0, v778, 0x1,
                                );
                                let v781 = constructor_vec_add(ctx, I64X2, v779, v780);
                                let v782 = constructor_output_reg(ctx, v781);
                                // Rule at src/isa/s390x/lower.isle line 1313.
                                return Some(v782);
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v564 = C::mie2_enabled(ctx, v3);
                            if let Some(v565) = v564 {
                                let v520 = constructor_put_in_reg_zext64(ctx, v47);
                                let v750 = constructor_popcnt_reg(ctx, v520);
                                let v751 = constructor_output_reg(ctx, v750);
                                // Rule at src/isa/s390x/lower.isle line 1279.
                                return Some(v751);
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v819 = constructor_sqrt_reg(ctx, v3, v49);
                        let v820 = constructor_output_reg(ctx, v819);
                        // Rule at src/isa/s390x/lower.isle line 1400.
                        return Some(v820);
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v821 = constructor_fneg_reg(ctx, v3, v49);
                        let v822 = constructor_output_reg(ctx, v821);
                        // Rule at src/isa/s390x/lower.isle line 1407.
                        return Some(v822);
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v823 = constructor_fabs_reg(ctx, v3, v49);
                        let v824 = constructor_output_reg(ctx, v823);
                        // Rule at src/isa/s390x/lower.isle line 1414.
                        return Some(v824);
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v825 = constructor_ceil_reg(ctx, v3, v49);
                        let v826 = constructor_output_reg(ctx, v825);
                        // Rule at src/isa/s390x/lower.isle line 1421.
                        return Some(v826);
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v827 = constructor_floor_reg(ctx, v3, v49);
                        let v828 = constructor_output_reg(ctx, v827);
                        // Rule at src/isa/s390x/lower.isle line 1428.
                        return Some(v828);
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v829 = constructor_trunc_reg(ctx, v3, v49);
                        let v830 = constructor_output_reg(ctx, v829);
                        // Rule at src/isa/s390x/lower.isle line 1435.
                        return Some(v830);
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v831 = constructor_nearest_reg(ctx, v3, v49);
                        let v832 = constructor_output_reg(ctx, v831);
                        // Rule at src/isa/s390x/lower.isle line 1442.
                        return Some(v832);
                    }
                }
                &Opcode::IsNull => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == R64 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v1807 = &constructor_icmps_simm16(ctx, I64, v49, 0x0);
                                let v1809 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1810 = &constructor_bool(ctx, v1807, v1809);
                                let v1811 = constructor_lower_bool(ctx, I8, v1810);
                                let v1812 = constructor_output_reg(ctx, v1811);
                                // Rule at src/isa/s390x/lower.isle line 3666.
                                return Some(v1812);
                            }
                        }
                    }
                }
                &Opcode::IsInvalid => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == R64 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v1813 = &constructor_icmps_simm16(ctx, I64, v49, -0x1);
                                let v1809 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v1814 = &constructor_bool(ctx, v1813, v1809);
                                let v1815 = constructor_lower_bool(ctx, I8, v1814);
                                let v1816 = constructor_output_reg(ctx, v1815);
                                // Rule at src/isa/s390x/lower.isle line 3672.
                                return Some(v1816);
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1130 = C::sinkable_inst(ctx, v47);
                        if let Some(v1131) = v1130 {
                            let v1132 = &C::inst_data(ctx, v1131);
                            if let &InstructionData::Load {
                                opcode: ref v1133,
                                arg: v1134,
                                flags: v1135,
                                offset: v1136,
                            } = v1132
                            {
                                if let &Opcode::Load = v1133 {
                                    let v1142 = C::littleendian(ctx, v1135);
                                    if let Some(v1143) = v1142 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1146 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1160 = &constructor_sink_load(ctx, v1131);
                                        let v1147 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1163 = constructor_vec_load_lane_little(
                                            ctx, v3, v1146, v1160, v1147,
                                        );
                                        let v1164 = constructor_output_reg(ctx, v1163);
                                        // Rule at src/isa/s390x/lower.isle line 2003.
                                        return Some(v1164);
                                    }
                                    let v1137 = C::bigendian(ctx, v1135);
                                    if let Some(v1138) = v1137 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1146 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1160 = &constructor_sink_load(ctx, v1131);
                                        let v1147 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1161 =
                                            constructor_vec_load_lane(ctx, v3, v1146, v1160, v1147);
                                        let v1162 = constructor_output_reg(ctx, v1161);
                                        // Rule at src/isa/s390x/lower.isle line 1999.
                                        return Some(v1162);
                                    }
                                }
                            }
                        }
                        let v1126 = C::i16_from_value(ctx, v47);
                        if let Some(v1127) = v1126 {
                            let v3 = C::value_type(ctx, v2);
                            let v1146 = constructor_vec_imm(ctx, v3, 0x0);
                            let v1157 = C::be_lane_idx(ctx, v3, 0x0);
                            let v1158 =
                                constructor_vec_insert_lane_imm(ctx, v3, v1146, v1127, v1157);
                            let v1159 = constructor_output_reg(ctx, v1158);
                            // Rule at src/isa/s390x/lower.isle line 1995.
                            return Some(v1159);
                        }
                        let v220 = C::def_inst(ctx, v47);
                        if let Some(v221) = v220 {
                            let v222 = &C::inst_data(ctx, v221);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1118,
                                arg: v1119,
                                imm: v1120,
                            } = v222
                            {
                                if let &Opcode::Extractlane = v1118 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1150 = C::be_lane_idx(ctx, v3, 0x0);
                                    let v1153 = C::put_in_reg(ctx, v1119);
                                    let v1121 = C::u8_from_uimm8(ctx, v1120);
                                    let v1154 = C::be_lane_idx(ctx, v3, v1121);
                                    let v1155 = constructor_vec_move_lane_and_zero(
                                        ctx, v3, v1150, v1153, v1154,
                                    );
                                    let v1156 = constructor_output_reg(ctx, v1155);
                                    // Rule at src/isa/s390x/lower.isle line 1990.
                                    return Some(v1156);
                                }
                            }
                        }
                        let v48 = C::value_type(ctx, v47);
                        let v1109 = C::ty_int_ref_scalar_64(ctx, v48);
                        if let Some(v1110) = v1109 {
                            let v3 = C::value_type(ctx, v2);
                            let v1146 = constructor_vec_imm(ctx, v3, 0x0);
                            let v234 = C::put_in_reg(ctx, v47);
                            let v1147 = C::be_lane_idx(ctx, v3, 0x0);
                            let v55 = C::zero_reg(ctx);
                            let v1148 =
                                constructor_vec_insert_lane(ctx, v3, v1146, v234, v1147, v55);
                            let v1149 = constructor_output_reg(ctx, v1148);
                            // Rule at src/isa/s390x/lower.isle line 1979.
                            return Some(v1149);
                        }
                        let v1114 = C::ty_scalar_float(ctx, v48);
                        if let Some(v1115) = v1114 {
                            let v3 = C::value_type(ctx, v2);
                            let v1150 = C::be_lane_idx(ctx, v3, 0x0);
                            let v234 = C::put_in_reg(ctx, v47);
                            let v1151 =
                                constructor_vec_move_lane_and_zero(ctx, v3, v1150, v234, 0x0);
                            let v1152 = constructor_output_reg(ctx, v1151);
                            // Rule at src/isa/s390x/lower.isle line 1985.
                            return Some(v1152);
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v677 = &constructor_value_nonzero(ctx, v47);
                        let v3 = C::value_type(ctx, v2);
                        let v678 = constructor_lower_bool_to_mask(ctx, v3, v677);
                        let v679 = constructor_output_reg(ctx, v678);
                        // Rule at src/isa/s390x/lower.isle line 1111.
                        return Some(v679);
                    }
                }
                &Opcode::Ireduce => {
                    let v48 = C::value_type(ctx, v47);
                    let v507 = C::fits_in_64(ctx, v48);
                    if let Some(v508) = v507 {
                        let v509 = constructor_output_value(ctx, v47);
                        // Rule at src/isa/s390x/lower.isle line 856.
                        return Some(v509);
                    }
                    let v510 = C::vr128_ty(ctx, v48);
                    if let Some(v511) = v510 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v52 = C::zero_reg(ctx);
                        let v512 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x1, v52);
                        let v513 = constructor_output_reg(ctx, v512);
                        // Rule at src/isa/s390x/lower.isle line 860.
                        return Some(v513);
                    }
                }
                &Opcode::SwidenLow => {
                    let v48 = C::value_type(ctx, v47);
                    let v554 = C::ty_vec128(ctx, v48);
                    if let Some(v555) = v554 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v556 = constructor_vec_unpacks_low_lane_order(ctx, v555, v49);
                        let v557 = constructor_output_reg(ctx, v556);
                        // Rule at src/isa/s390x/lower.isle line 922.
                        return Some(v557);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v48 = C::value_type(ctx, v47);
                    let v554 = C::ty_vec128(ctx, v48);
                    if let Some(v555) = v554 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v558 = constructor_vec_unpacks_high_lane_order(ctx, v555, v49);
                        let v559 = constructor_output_reg(ctx, v558);
                        // Rule at src/isa/s390x/lower.isle line 928.
                        return Some(v559);
                    }
                }
                &Opcode::UwidenLow => {
                    let v48 = C::value_type(ctx, v47);
                    let v554 = C::ty_vec128(ctx, v48);
                    if let Some(v555) = v554 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v560 = constructor_vec_unpacku_low_lane_order(ctx, v555, v49);
                        let v561 = constructor_output_reg(ctx, v560);
                        // Rule at src/isa/s390x/lower.isle line 934.
                        return Some(v561);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v48 = C::value_type(ctx, v47);
                    let v554 = C::ty_vec128(ctx, v48);
                    if let Some(v555) = v554 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v562 = constructor_vec_unpacku_high_lane_order(ctx, v555, v49);
                        let v563 = constructor_output_reg(ctx, v562);
                        // Rule at src/isa/s390x/lower.isle line 940.
                        return Some(v563);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v520 = constructor_put_in_reg_zext64(ctx, v47);
                            let v521 = constructor_output_reg(ctx, v520);
                            // Rule at src/isa/s390x/lower.isle line 871.
                            return Some(v521);
                        }
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v516 = constructor_put_in_reg_zext32(ctx, v47);
                            let v517 = constructor_output_reg(ctx, v516);
                            // Rule at src/isa/s390x/lower.isle line 867.
                            return Some(v517);
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v48 = C::value_type(ctx, v47);
                            match v48 {
                                I8 => {
                                    let v522 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v234 = C::put_in_reg(ctx, v47);
                                    let v524 = C::zero_reg(ctx);
                                    let v525 = constructor_vec_insert_lane(
                                        ctx, I8X16, v522, v234, 0xF, v524,
                                    );
                                    let v526 = constructor_output_reg(ctx, v525);
                                    // Rule at src/isa/s390x/lower.isle line 875.
                                    return Some(v526);
                                }
                                I16 => {
                                    let v522 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v234 = C::put_in_reg(ctx, v47);
                                    let v524 = C::zero_reg(ctx);
                                    let v528 = constructor_vec_insert_lane(
                                        ctx, I16X8, v522, v234, 0x7, v524,
                                    );
                                    let v529 = constructor_output_reg(ctx, v528);
                                    // Rule at src/isa/s390x/lower.isle line 877.
                                    return Some(v529);
                                }
                                I32 => {
                                    let v522 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v234 = C::put_in_reg(ctx, v47);
                                    let v524 = C::zero_reg(ctx);
                                    let v531 = constructor_vec_insert_lane(
                                        ctx, I32X4, v522, v234, 0x3, v524,
                                    );
                                    let v532 = constructor_output_reg(ctx, v531);
                                    // Rule at src/isa/s390x/lower.isle line 879.
                                    return Some(v532);
                                }
                                I64 => {
                                    let v522 = constructor_vec_imm(ctx, v36, 0x0);
                                    let v234 = C::put_in_reg(ctx, v47);
                                    let v524 = C::zero_reg(ctx);
                                    let v533 = constructor_vec_insert_lane(
                                        ctx, I64X2, v522, v234, 0x1, v524,
                                    );
                                    let v534 = constructor_output_reg(ctx, v533);
                                    // Rule at src/isa/s390x/lower.isle line 881.
                                    return Some(v534);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v518 = C::gpr64_ty(ctx, v3);
                        if let Some(v519) = v518 {
                            let v537 = constructor_put_in_reg_sext64(ctx, v47);
                            let v538 = constructor_output_reg(ctx, v537);
                            // Rule at src/isa/s390x/lower.isle line 892.
                            return Some(v538);
                        }
                        let v514 = C::gpr32_ty(ctx, v3);
                        if let Some(v515) = v514 {
                            let v535 = constructor_put_in_reg_sext32(ctx, v47);
                            let v536 = constructor_output_reg(ctx, v535);
                            // Rule at src/isa/s390x/lower.isle line 888.
                            return Some(v536);
                        }
                        let v35 = C::vr128_ty(ctx, v3);
                        if let Some(v36) = v35 {
                            let v537 = constructor_put_in_reg_sext64(ctx, v47);
                            let v540 = constructor_ashr_imm(ctx, I64, v537, 0x3F);
                            let v541 = constructor_mov_to_vec128(ctx, v36, v540, v537);
                            let v542 = constructor_output_reg(ctx, v541);
                            // Rule at src/isa/s390x/lower.isle line 896.
                            return Some(v542);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v833 = constructor_fpromote_reg(ctx, v61, v48, v49);
                            let v834 = constructor_output_reg(ctx, v833);
                            // Rule at src/isa/s390x/lower.isle line 1449.
                            return Some(v834);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v839 =
                                constructor_fdemote_reg(ctx, v61, v48, &FpuRoundMode::Current, v49);
                            let v840 = constructor_output_reg(ctx, v839);
                            // Rule at src/isa/s390x/lower.isle line 1463.
                            return Some(v840);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == F64X2 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v841 = constructor_fdemote_reg(
                                    ctx,
                                    F32X4,
                                    F64X2,
                                    &FpuRoundMode::Current,
                                    v49,
                                );
                                let v842 = constructor_vec_lshr_imm(ctx, I64X2, v841, 0x20);
                                let v843 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v844 = constructor_vec_pack_lane_order(ctx, I64X2, v842, v843);
                                let v845 = constructor_output_reg(ctx, v844);
                                // Rule at src/isa/s390x/lower.isle line 1470.
                                return Some(v845);
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == F32X4 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v234 = C::put_in_reg(ctx, v47);
                                let v835 =
                                    constructor_vec_merge_low_lane_order(ctx, I32X4, v49, v234);
                                let v836 = constructor_fpromote_reg(ctx, F64X2, F32X4, v835);
                                let v837 = constructor_output_reg(ctx, v836);
                                // Rule at src/isa/s390x/lower.isle line 1456.
                                return Some(v837);
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v909 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v911 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v912 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v913 = constructor_trap_if(ctx, v909, v911, v912);
                            let v914 = constructor_fcvt_to_uint_ub(ctx, v48, v61);
                            let v915 = &constructor_fcmp_reg(ctx, v48, v49, v914);
                            let v917 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v918 = &C::trap_code_integer_overflow(ctx);
                            let v919 = constructor_trap_if(ctx, v915, v917, v918);
                            let v920 = constructor_fcvt_to_uint_lb(ctx, v48);
                            let v921 = &constructor_fcmp_reg(ctx, v48, v49, v920);
                            let v923 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v924 = constructor_trap_if(ctx, v921, v923, v918);
                            let v925 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v926 = constructor_fpromote_reg(ctx, v925, v48, v49);
                            let v928 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v925,
                                &FpuRoundMode::ToZero,
                                v926,
                            );
                            let v929 = constructor_output_reg(ctx, v928);
                            // Rule at src/isa/s390x/lower.isle line 1570.
                            return Some(v929);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v909 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v911 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v912 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v913 = constructor_trap_if(ctx, v909, v911, v912);
                            let v930 = constructor_fcvt_to_sint_ub(ctx, v48, v61);
                            let v931 = &constructor_fcmp_reg(ctx, v48, v49, v930);
                            let v917 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v918 = &C::trap_code_integer_overflow(ctx);
                            let v932 = constructor_trap_if(ctx, v931, v917, v918);
                            let v933 = constructor_fcvt_to_sint_lb(ctx, v48, v61);
                            let v934 = &constructor_fcmp_reg(ctx, v48, v49, v933);
                            let v923 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v935 = constructor_trap_if(ctx, v934, v923, v918);
                            let v925 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v926 = constructor_fpromote_reg(ctx, v925, v48, v49);
                            let v936 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v925,
                                &FpuRoundMode::ToZero,
                                v926,
                            );
                            let v937 = constructor_output_reg(ctx, v936);
                            // Rule at src/isa/s390x/lower.isle line 1594.
                            return Some(v937);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F32X4 {
                                    let v859 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v860) = v859 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v944 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v49,
                                        );
                                        let v945 = constructor_output_reg(ctx, v944);
                                        // Rule at src/isa/s390x/lower.isle line 1630.
                                        return Some(v945);
                                    }
                                    let v863 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v864) = v863 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v234 = C::put_in_reg(ctx, v47);
                                        let v946 =
                                            constructor_vec_merge_high(ctx, I32X4, v49, v234);
                                        let v947 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v946);
                                        let v948 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v947,
                                        );
                                        let v949 = C::put_in_reg(ctx, v47);
                                        let v950 = C::put_in_reg(ctx, v47);
                                        let v951 =
                                            constructor_vec_merge_low(ctx, I32X4, v949, v950);
                                        let v952 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v951);
                                        let v953 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v952,
                                        );
                                        let v954 =
                                            constructor_vec_pack_usat(ctx, I64X2, v948, v953);
                                        let v955 = constructor_output_reg(ctx, v954);
                                        // Rule at src/isa/s390x/lower.isle line 1635.
                                        return Some(v955);
                                    }
                                }
                            }
                            I64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v956 = constructor_fcvt_to_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v49,
                                    );
                                    let v957 = constructor_output_reg(ctx, v956);
                                    // Rule at src/isa/s390x/lower.isle line 1644.
                                    return Some(v957);
                                }
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v938 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v939 = constructor_fcvt_int_ty(ctx, v61, v48);
                            let v940 = constructor_fpromote_reg(ctx, v938, v48, v49);
                            let v941 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v938,
                                &FpuRoundMode::ToZero,
                                v940,
                            );
                            let v942 = constructor_uint_sat_reg(ctx, v61, v939, v941);
                            let v943 = constructor_output_reg(ctx, v942);
                            // Rule at src/isa/s390x/lower.isle line 1618.
                            return Some(v943);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F32X4 {
                                    let v859 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v860) = v859 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v966 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v49,
                                        );
                                        let v967 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v968 = C::put_in_reg(ctx, v47);
                                        let v868 = C::put_in_reg(ctx, v47);
                                        let v969 = constructor_vec_fcmpeq(ctx, F32X4, v968, v868);
                                        let v970 =
                                            constructor_vec_select(ctx, I32X4, v966, v967, v969);
                                        let v971 = constructor_output_reg(ctx, v970);
                                        // Rule at src/isa/s390x/lower.isle line 1670.
                                        return Some(v971);
                                    }
                                    let v863 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v864) = v863 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v234 = C::put_in_reg(ctx, v47);
                                        let v946 =
                                            constructor_vec_merge_high(ctx, I32X4, v49, v234);
                                        let v947 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v946);
                                        let v972 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v947,
                                        );
                                        let v949 = C::put_in_reg(ctx, v47);
                                        let v950 = C::put_in_reg(ctx, v47);
                                        let v951 =
                                            constructor_vec_merge_low(ctx, I32X4, v949, v950);
                                        let v952 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v951);
                                        let v973 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v952,
                                        );
                                        let v974 =
                                            constructor_vec_pack_ssat(ctx, I64X2, v972, v973);
                                        let v975 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v976 = C::put_in_reg(ctx, v47);
                                        let v977 = C::put_in_reg(ctx, v47);
                                        let v978 = constructor_vec_fcmpeq(ctx, F32X4, v976, v977);
                                        let v979 =
                                            constructor_vec_select(ctx, I32X4, v974, v975, v978);
                                        let v980 = constructor_output_reg(ctx, v979);
                                        // Rule at src/isa/s390x/lower.isle line 1678.
                                        return Some(v980);
                                    }
                                }
                            }
                            I64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == F64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v981 = constructor_fcvt_to_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v49,
                                    );
                                    let v697 = constructor_vec_imm(ctx, I64X2, 0x0);
                                    let v968 = C::put_in_reg(ctx, v47);
                                    let v868 = C::put_in_reg(ctx, v47);
                                    let v982 = constructor_vec_fcmpeq(ctx, F64X2, v968, v868);
                                    let v983 = constructor_vec_select(ctx, I64X2, v981, v697, v982);
                                    let v984 = constructor_output_reg(ctx, v983);
                                    // Rule at src/isa/s390x/lower.isle line 1690.
                                    return Some(v984);
                                }
                            }
                            _ => {}
                        }
                        let v60 = C::fits_in_64(ctx, v3);
                        if let Some(v61) = v60 {
                            let v49 = C::put_in_reg(ctx, v47);
                            let v48 = C::value_type(ctx, v47);
                            let v938 = constructor_fcvt_flt_ty(ctx, v61, v48);
                            let v939 = constructor_fcvt_int_ty(ctx, v61, v48);
                            let v940 = constructor_fpromote_reg(ctx, v938, v48, v49);
                            let v958 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v938,
                                &FpuRoundMode::ToZero,
                                v940,
                            );
                            let v959 = &constructor_fcmp_reg(ctx, v48, v49, v49);
                            let v960 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v962 = &constructor_cmov_imm(ctx, v939, v960, 0x0, v958);
                            let v963 = constructor_with_flags_reg(ctx, v959, v962);
                            let v964 = constructor_sint_sat_reg(ctx, v61, v939, v963);
                            let v965 = constructor_output_reg(ctx, v964);
                            // Rule at src/isa/s390x/lower.isle line 1651.
                            return Some(v965);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v48 = C::value_type(ctx, v47);
                                let v846 = C::vxrs_ext2_enabled(ctx, v48);
                                if let Some(v847) = v846 {
                                    let v848 = C::fits_in_32(ctx, v48);
                                    if let Some(v849) = v848 {
                                        let v516 = constructor_put_in_reg_zext32(ctx, v47);
                                        let v851 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v516,
                                        );
                                        let v852 = constructor_output_reg(ctx, v851);
                                        // Rule at src/isa/s390x/lower.isle line 1479.
                                        return Some(v852);
                                    }
                                }
                                let v507 = C::fits_in_64(ctx, v48);
                                if let Some(v508) = v507 {
                                    let v520 = constructor_put_in_reg_zext64(ctx, v47);
                                    let v854 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v520,
                                    );
                                    let v855 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v854,
                                    );
                                    let v856 = constructor_output_reg(ctx, v855);
                                    // Rule at src/isa/s390x/lower.isle line 1485.
                                    return Some(v856);
                                }
                            }
                            F64 => {
                                let v48 = C::value_type(ctx, v47);
                                let v507 = C::fits_in_64(ctx, v48);
                                if let Some(v508) = v507 {
                                    let v520 = constructor_put_in_reg_zext64(ctx, v47);
                                    let v857 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v520,
                                    );
                                    let v858 = constructor_output_reg(ctx, v857);
                                    // Rule at src/isa/s390x/lower.isle line 1491.
                                    return Some(v858);
                                }
                            }
                            F32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I32X4 {
                                    let v859 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v860) = v859 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v861 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v49,
                                        );
                                        let v862 = constructor_output_reg(ctx, v861);
                                        // Rule at src/isa/s390x/lower.isle line 1496.
                                        return Some(v862);
                                    }
                                    let v863 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v864) = v863 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v865 = constructor_vec_unpacku_high(ctx, I32X4, v49);
                                        let v866 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v865,
                                        );
                                        let v867 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v866,
                                        );
                                        let v868 = C::put_in_reg(ctx, v47);
                                        let v869 = constructor_vec_unpacku_low(ctx, I32X4, v868);
                                        let v870 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v869,
                                        );
                                        let v871 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v870,
                                        );
                                        let v881 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v882 = constructor_vec_imm(ctx, I8X16, v881);
                                        let v883 =
                                            constructor_vec_permute(ctx, F32X4, v867, v871, v882);
                                        let v884 = constructor_output_reg(ctx, v883);
                                        // Rule at src/isa/s390x/lower.isle line 1501.
                                        return Some(v884);
                                    }
                                }
                            }
                            F64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v885 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v49,
                                    );
                                    let v886 = constructor_output_reg(ctx, v885);
                                    // Rule at src/isa/s390x/lower.isle line 1513.
                                    return Some(v886);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v48 = C::value_type(ctx, v47);
                                let v846 = C::vxrs_ext2_enabled(ctx, v48);
                                if let Some(v847) = v846 {
                                    let v848 = C::fits_in_32(ctx, v48);
                                    if let Some(v849) = v848 {
                                        let v535 = constructor_put_in_reg_sext32(ctx, v47);
                                        let v887 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v535,
                                        );
                                        let v888 = constructor_output_reg(ctx, v887);
                                        // Rule at src/isa/s390x/lower.isle line 1520.
                                        return Some(v888);
                                    }
                                }
                                let v507 = C::fits_in_64(ctx, v48);
                                if let Some(v508) = v507 {
                                    let v537 = constructor_put_in_reg_sext64(ctx, v47);
                                    let v889 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v537,
                                    );
                                    let v890 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v889,
                                    );
                                    let v891 = constructor_output_reg(ctx, v890);
                                    // Rule at src/isa/s390x/lower.isle line 1526.
                                    return Some(v891);
                                }
                            }
                            F64 => {
                                let v48 = C::value_type(ctx, v47);
                                let v507 = C::fits_in_64(ctx, v48);
                                if let Some(v508) = v507 {
                                    let v537 = constructor_put_in_reg_sext64(ctx, v47);
                                    let v892 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v537,
                                    );
                                    let v893 = constructor_output_reg(ctx, v892);
                                    // Rule at src/isa/s390x/lower.isle line 1532.
                                    return Some(v893);
                                }
                            }
                            F32X4 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I32X4 {
                                    let v859 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v860) = v859 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v894 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v49,
                                        );
                                        let v895 = constructor_output_reg(ctx, v894);
                                        // Rule at src/isa/s390x/lower.isle line 1537.
                                        return Some(v895);
                                    }
                                    let v863 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v864) = v863 {
                                        let v49 = C::put_in_reg(ctx, v47);
                                        let v896 = constructor_vec_unpacks_high(ctx, I32X4, v49);
                                        let v897 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v896,
                                        );
                                        let v898 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v897,
                                        );
                                        let v868 = C::put_in_reg(ctx, v47);
                                        let v899 = constructor_vec_unpacks_low(ctx, I32X4, v868);
                                        let v900 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v899,
                                        );
                                        let v901 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v900,
                                        );
                                        let v881 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v882 = constructor_vec_imm(ctx, I8X16, v881);
                                        let v902 =
                                            constructor_vec_permute(ctx, F32X4, v898, v901, v882);
                                        let v903 = constructor_output_reg(ctx, v902);
                                        // Rule at src/isa/s390x/lower.isle line 1542.
                                        return Some(v903);
                                    }
                                }
                            }
                            F64X2 => {
                                let v48 = C::value_type(ctx, v47);
                                if v48 == I64X2 {
                                    let v49 = C::put_in_reg(ctx, v47);
                                    let v904 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v49,
                                    );
                                    let v905 = constructor_output_reg(ctx, v904);
                                    // Rule at src/isa/s390x/lower.isle line 1554.
                                    return Some(v905);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtLowFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v48 = C::value_type(ctx, v47);
                            if v48 == I32X4 {
                                let v49 = C::put_in_reg(ctx, v47);
                                let v906 = constructor_vec_unpacks_low_lane_order(ctx, I32X4, v49);
                                let v907 = constructor_fcvt_from_sint_reg(
                                    ctx,
                                    F64X2,
                                    &FpuRoundMode::ToNearestTiesToEven,
                                    v906,
                                );
                                let v908 = constructor_output_reg(ctx, v907);
                                // Rule at src/isa/s390x/lower.isle line 1561.
                                return Some(v908);
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v48 = C::value_type(ctx, v47);
                    if v48 == I128 {
                        let v49 = C::put_in_reg(ctx, v47);
                        let v52 = C::zero_reg(ctx);
                        let v53 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x0, v52);
                        let v55 = C::zero_reg(ctx);
                        let v56 = constructor_vec_extract_lane(ctx, I64X2, v49, 0x1, v55);
                        let v57 = C::value_reg(ctx, v56);
                        let v58 = C::value_reg(ctx, v53);
                        let v59 = C::output_pair(ctx, v57, v58);
                        // Rule at src/isa/s390x/lower.isle line 57.
                        return Some(v59);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v22,
            constant_handle: v23,
        } => {
            if let &Opcode::Vconst = v22 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v24 = C::u128_from_constant(ctx, v23);
                    if let Some(v25) = v24 {
                        let v3 = C::value_type(ctx, v2);
                        let v26 = C::be_vec_const(ctx, v3, v25);
                        let v27 = constructor_vec_imm(ctx, v3, v26);
                        let v28 = constructor_output_reg(ctx, v27);
                        // Rule at src/isa/s390x/lower.isle line 33.
                        return Some(v28);
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1398,
            global_value: v1399,
        } => {
            match v1398 {
                &Opcode::SymbolValue => {
                    let v1400 = C::symbol_value_data(ctx, v1399);
                    if let Some(v1401) = v1400 {
                        let v1405 = C::reloc_distance_near(ctx, v1401.1);
                        if let Some(v1406) = v1405 {
                            let v1407 = constructor_memarg_symbol_offset(ctx, v1401.2);
                            if let Some(v1408) = v1407 {
                                let v1390 = C::memflags_trusted(ctx);
                                let v1409 = &C::memarg_symbol(ctx, v1401.0, v1408, v1390);
                                let v1410 = constructor_load_addr(ctx, v1409);
                                let v1411 = constructor_output_reg(ctx, v1410);
                                // Rule at src/isa/s390x/lower.isle line 2235.
                                return Some(v1411);
                            }
                        }
                        let v1412 = SymbolReloc::Absolute {
                            name: v1401.0,
                            offset: v1401.2,
                        };
                        let v1413 = constructor_load_symbol_reloc(ctx, &v1412);
                        let v1414 = constructor_output_reg(ctx, v1413);
                        // Rule at src/isa/s390x/lower.isle line 2241.
                        return Some(v1414);
                    }
                }
                &Opcode::TlsValue => {
                    let v1400 = C::symbol_value_data(ctx, v1399);
                    if let Some(v1401) = v1400 {
                        if v1401.2 == 0x0 {
                            let v1415 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1416) = v1415 {
                                let v1418 = &C::memarg_got(ctx);
                                let v1419 = constructor_load_addr(ctx, v1418);
                                let v1417 = SymbolReloc::TlsGd { name: v1401.0 };
                                let v1420 = constructor_load_symbol_reloc(ctx, &v1417);
                                let v1421 =
                                    constructor_lib_call_tls_get_offset(ctx, v1419, v1420, &v1417);
                                let v1422 = constructor_thread_pointer(ctx);
                                let v1423 = constructor_add_reg(ctx, I64, v1421, v1422);
                                let v1424 = constructor_output_reg(ctx, v1423);
                                // Rule at src/isa/s390x/lower.isle line 2248.
                                return Some(v1424);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v10,
            imm: v11,
        } => {
            if let &Opcode::F32const = v10 {
                let v12 = C::u64_from_ieee32(ctx, v11);
                let v14 = constructor_imm(ctx, F32, v12);
                let v15 = constructor_output_reg(ctx, v14);
                // Rule at src/isa/s390x/lower.isle line 21.
                return Some(v15);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v16,
            imm: v17,
        } => {
            if let &Opcode::F64const = v16 {
                let v18 = C::u64_from_ieee64(ctx, v17);
                let v20 = constructor_imm(ctx, F64, v18);
                let v21 = constructor_output_reg(ctx, v20);
                // Rule at src/isa/s390x/lower.isle line 27.
                return Some(v21);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    // Rule at src/isa/s390x/lower.isle line 15.
                    return Some(v9);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v9,
            arg: v10,
            destination: v11,
            table: v12,
        } => {
            if let &Opcode::BrTable = v9 {
                let v13 = constructor_put_in_reg_zext64(ctx, v10);
                let v15 = C::vec_length_minus1(ctx, arg1);
                let v16 = &constructor_icmpu_uimm32(ctx, I64, v13, v15);
                let v18 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                let v19 = &constructor_bool(ctx, v16, v18);
                let v20 = C::vec_element(ctx, arg1, 0x0);
                let v21 = &constructor_oneway_cond_br_bool(ctx, v19, v20);
                let v22 = constructor_emit_side_effect(ctx, v21);
                let v24 = constructor_lshl_imm(ctx, I64, v13, 0x2);
                let v25 = &constructor_jt_sequence(ctx, v24, arg1);
                let v26 = constructor_emit_side_effect(ctx, v25);
                // Rule at src/isa/s390x/lower.isle line 3725.
                return Some(v26);
            }
        }
        &InstructionData::Brif {
            opcode: ref v27,
            arg: v28,
            blocks: ref v29,
        } => {
            if let &Opcode::Brif = v27 {
                let v33 = &constructor_value_nonzero(ctx, v28);
                let v34 = C::vec_element(ctx, arg1, 0x0);
                let v36 = C::vec_element(ctx, arg1, 0x1);
                let v37 = &constructor_cond_br_bool(ctx, v33, v34, v36);
                let v38 = constructor_emit_side_effect(ctx, v37);
                // Rule at src/isa/s390x/lower.isle line 3758.
                return Some(v38);
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v6 = C::vec_element(ctx, arg1, 0x0);
                let v7 = &constructor_jump_impl(ctx, v6);
                let v8 = constructor_emit_side_effect(ctx, v7);
                // Rule at src/isa/s390x/lower.isle line 3717.
                return Some(v8);
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = constructor_copy_reg(ctx, I64, v30);
            let v32 = C::regpair_hi(ctx, v29);
            let v33 = constructor_copy_reg(ctx, I64, v32);
            let v34 = constructor_mul_reg(ctx, I64, v24, v26);
            let v35 = constructor_mul_reg(ctx, I64, v13, v28);
            let v36 = constructor_add_reg(ctx, I64, v34, v33);
            let v37 = constructor_add_reg(ctx, I64, v35, v36);
            let v38 = constructor_mov_to_vec128(ctx, I64X2, v37, v31);
            // Rule at src/isa/s390x/lower.isle line 337.
            return v38;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 324.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 325.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 326.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src/isa/s390x/lower.isle line 329.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_mul_impl", "src/isa/s390x/lower.isle line 319"
    )
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11, 0x11);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xF);
            // Rule at src/isa/s390x/lower.isle line 450.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21, 0x21);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1F);
            // Rule at src/isa/s390x/lower.isle line 454.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sqmul_impl", "src/isa/s390x/lower.isle line 449"
    )
}

// Generated as internal constructor for term zero_divisor_check_needed.
pub fn constructor_zero_divisor_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_nonzero(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 518.
            return false;
        }
    }
    let v6 = C::value_type(ctx, arg0);
    let v7 = C::allow_div_traps(ctx, v6);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/lower.isle line 521.
        return false;
    }
    // Rule at src/isa/s390x/lower.isle line 522.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_zero_divisor.
pub fn constructor_maybe_trap_if_zero_divisor<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v7 = &C::trap_code_division_by_zero(ctx);
            let v8 = constructor_icmps_simm16_and_trap(ctx, arg1, arg2, 0x0, v6, v7);
            // Rule at src/isa/s390x/lower.isle line 528.
            return v8;
        }
        false => {
            let v3 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 527.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_zero_divisor", "src/isa/s390x/lower.isle line 526"
    )
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 600.
            return false;
        }
    }
    // Rule at src/isa/s390x/lower.isle line 603.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -0x1, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 616.
            return v14;
        }
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 615.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_sdiv_overflow", "src/isa/s390x/lower.isle line 614"
    )
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 623.
            return 0x7F;
        }
        I16 => {
            // Rule at src/isa/s390x/lower.isle line 624.
            return 0x7FFF;
        }
        I32 => {
            // Rule at src/isa/s390x/lower.isle line 625.
            return 0x7FFFFFFF;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 626.
            return 0x7FFFFFFFFFFFFFFF;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_max", "src/isa/s390x/lower.isle line 622"
    )
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                I32 => {
                    // Rule at src/isa/s390x/lower.isle line 644.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -0x1);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0x0, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src/isa/s390x/lower.isle line 645.
                    return v11;
                }
                _ => {}
            }
        }
        false => {
            // Rule at src/isa/s390x/lower.isle line 643.
            return arg2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_avoid_srem_overflow", "src/isa/s390x/lower.isle line 642"
    )
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src/isa/s390x/lower.isle line 1124.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src/isa/s390x/lower.isle line 1132.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bits", "src/isa/s390x/lower.isle line 1123"
    )
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 1140.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1141.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src/isa/s390x/lower.isle line 1142.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1143.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(
                ctx, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0,
            );
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src/isa/s390x/lower.isle line 1144.
            return v28;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bytes", "src/isa/s390x/lower.isle line 1139"
    )
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x38);
            // Rule at src/isa/s390x/lower.isle line 1161.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x30);
            // Rule at src/isa/s390x/lower.isle line 1162.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x20);
            // Rule at src/isa/s390x/lower.isle line 1163.
            return v10;
        }
        I64 => {
            let v12 = constructor_copy_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1164.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "clz_offset", "src/isa/s390x/lower.isle line 1160"
    )
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x39);
            // Rule at src/isa/s390x/lower.isle line 1192.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x31);
            // Rule at src/isa/s390x/lower.isle line 1193.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x21);
            // Rule at src/isa/s390x/lower.isle line 1194.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -0x1);
            // Rule at src/isa/s390x/lower.isle line 1195.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cls_offset", "src/isa/s390x/lower.isle line 1191"
    )
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100, 0x0);
            // Rule at src/isa/s390x/lower.isle line 1246.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1247.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1, 0x20);
            // Rule at src/isa/s390x/lower.isle line 1248.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ctz_guardbit", "src/isa/s390x/lower.isle line 1245"
    )
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg2 {
                0x0 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1);
                    // Rule at src/isa/s390x/lower.isle line 1784.
                    return v10;
                }
                0x1 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 1786.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src/isa/s390x/lower.isle line 1790.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src/isa/s390x/lower.isle line 1795.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1804.
                return v8;
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1808.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1819.
                    return v16;
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1811.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1822.
                    return v18;
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1814.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1825.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little", "src/isa/s390x/lower.isle line 1801"
    )
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src/isa/s390x/lower.isle line 1833.
                return v7;
            }
            0x10 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1837.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1848.
                    return v15;
                }
            }
            0x20 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1840.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1851.
                    return v17;
                }
            }
            0x40 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1843.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1854.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little_undef", "src/isa/s390x/lower.isle line 1830"
    )
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1891.
                return v8.clone();
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1895.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1906.
                    return v16.clone();
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1898.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1909.
                    return v17.clone();
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1901.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1912.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_little", "src/isa/s390x/lower.isle line 1888"
    )
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src/isa/s390x/lower.isle line 1950.
                return v6;
            }
            0x10 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1954.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1965.
                    return v14;
                }
            }
            0x20 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1957.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1968.
                    return v14;
                }
            }
            0x40 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1960.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1971.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_little", "src/isa/s390x/lower.isle line 1947"
    )
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg1 {
                0x0 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2011.
                    return v11;
                }
                0x1 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2013.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src/isa/s390x/lower.isle line 2017.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src/isa/s390x/lower.isle line 2022.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &C::lib_call_info_tls_get_offset(ctx, v4, arg0, arg1, arg2);
    let v6 = C::lib_accumulate_outgoing_args_size(ctx, v5);
    let v7 = &constructor_lib_call(ctx, v5);
    let v8 = constructor_side_effect(ctx, v7);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/lower.isle line 2258.
    return v9;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20);
    let v6 = constructor_insert_ar(ctx, v4, 0x1);
    // Rule at src/isa/s390x/lower.isle line 2267.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src/isa/s390x/lower.isle line 2350.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src/isa/s390x/lower.isle line 2354.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_full_rev", "src/isa/s390x/lower.isle line 2347"
    )
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                if v7.1 == 0x10 {
                    let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v11 = constructor_vec_load(ctx, arg0, v10);
                    // Rule at src/isa/s390x/lower.isle line 2370.
                    return v11;
                }
            }
            0x10 => {
                if v7.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte16rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2380.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2391.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v7.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_byte32rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2377.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2388.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v7.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_byte64rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2374.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2385.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
        // Rule at src/isa/s390x/lower.isle line 2366.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_byte_rev", "src/isa/s390x/lower.isle line 2363"
    )
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2405.
                    return v11;
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2415.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2426.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2412.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2423.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2409.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2420.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
        let v6 = constructor_vec_load(ctx, I128, v5);
        // Rule at src/isa/s390x/lower.isle line 2401.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_elt_rev", "src/isa/s390x/lower.isle line 2397"
    )
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2577.
                            return v13;
                        }
                    }
                    0x10 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2588.
                                return v21;
                            }
                        }
                    }
                    0x20 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2600.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2567.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2572.
                            return v10;
                        }
                    }
                    0x10 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2582.
                                return v20;
                            }
                        }
                    }
                    0x20 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2594.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2562.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "load_v64", "src/isa/s390x/lower.isle line 2559"
    )
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src/isa/s390x/lower.isle line 2684.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src/isa/s390x/lower.isle line 2688.
        return v23.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_full_rev", "src/isa/s390x/lower.isle line 2681"
    )
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v12 = &constructor_vec_store(ctx, arg1, v11);
                    // Rule at src/isa/s390x/lower.isle line 2705.
                    return v12.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte16rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2715.
                        return v17.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2726.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_byte32rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2712.
                        return v16.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2723.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_byte64rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2709.
                        return v15.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2720.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
        // Rule at src/isa/s390x/lower.isle line 2701.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_byte_rev", "src/isa/s390x/lower.isle line 2698"
    )
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 2739.
                    return v11.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2749.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2760.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2746.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2757.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2743.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2754.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v6 = &constructor_vec_store(ctx, arg1, v5);
        // Rule at src/isa/s390x/lower.isle line 2735.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_elt_rev", "src/isa/s390x/lower.isle line 2732"
    )
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src/isa/s390x/lower.isle line 2779.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src/isa/s390x/lower.isle line 2775.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src/isa/s390x/lower.isle line 2801.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2793.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src/isa/s390x/lower.isle line 2805.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2797.
        return v11.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore16_impl", "src/isa/s390x/lower.isle line 2790"
    )
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2823.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2819.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2827.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore32_impl", "src/isa/s390x/lower.isle line 2816"
    )
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2841.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2837.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2845.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore64_impl", "src/isa/s390x/lower.isle line 2834"
    )
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3008.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2970.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src/isa/s390x/lower.isle line 2950.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src/isa/s390x/lower.isle line 2953.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src/isa/s390x/lower.isle line 2956.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src/isa/s390x/lower.isle line 2960.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src/isa/s390x/lower.isle line 2976.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Or,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2972.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3049.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3046.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3010.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3055.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3052.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src/isa/s390x/lower.isle line 2939.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src/isa/s390x/lower.isle line 2942.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Insert,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2968.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Xor,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2974.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body", "src/isa/s390x/lower.isle line 2934"
    )
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x28, 0x18);
            // Rule at src/isa/s390x/lower.isle line 2984.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x30, 0x10);
                // Rule at src/isa/s390x/lower.isle line 2988.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30, 0x40, -0x10);
                // Rule at src/isa/s390x/lower.isle line 2992.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_rxsbg", "src/isa/s390x/lower.isle line 2981"
    )
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xFF000000, 0x0);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src/isa/s390x/lower.isle line 2998.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xFFFF0000, 0x0);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src/isa/s390x/lower.isle line 3001.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xFFFF, 0x0);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src/isa/s390x/lower.isle line 3004.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_invert", "src/isa/s390x/lower.isle line 2996"
    )
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src/isa/s390x/lower.isle line 3031.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3017.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src/isa/s390x/lower.isle line 3021.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src/isa/s390x/lower.isle line 3039.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src/isa/s390x/lower.isle line 3027.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_addsub", "src/isa/s390x/lower.isle line 3014"
    )
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                arg6,
                v33,
                0x20,
                0x30,
                0x0,
            );
            // Rule at src/isa/s390x/lower.isle line 3090.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 3065.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src/isa/s390x/lower.isle line 3072.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                v38,
                v33,
                0x20,
                0x30,
                0x0,
            );
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src/isa/s390x/lower.isle line 3097.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(
            ctx,
            arg0,
            &RxSBGOp::Insert,
            arg5,
            arg6,
            v24,
            0x20,
            0x28,
            0x0,
        );
        // Rule at src/isa/s390x/lower.isle line 3084.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_minmax", "src/isa/s390x/lower.isle line 3060"
    )
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x28, 0x18);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg3,
                arg4,
                arg6,
                0x20,
                0x28,
                0x18,
            );
            // Rule at src/isa/s390x/lower.isle line 3149.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x30, 0x10);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    arg6,
                    0x20,
                    0x30,
                    0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3156.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30, 0x40, -0x10);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    v28,
                    0x30,
                    0x40,
                    -0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3167.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_body", "src/isa/s390x/lower.isle line 3142"
    )
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src/isa/s390x/lower.isle line 3213.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src/isa/s390x/lower.isle line 3359.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src/isa/s390x/lower.isle line 3362.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3368.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src/isa/s390x/lower.isle line 3372.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3370.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src/isa/s390x/lower.isle line 3374.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3379.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src/isa/s390x/lower.isle line 3383.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3381.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src/isa/s390x/lower.isle line 3385.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src/isa/s390x/lower.isle line 3280.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src/isa/s390x/lower.isle line 3283.
            return v15.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_val", "src/isa/s390x/lower.isle line 3277"
    )
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30
                {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src/isa/s390x/lower.isle line 3309.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src/isa/s390x/lower.isle line 3305.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src/isa/s390x/lower.isle line 3313.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src/isa/s390x/lower.isle line 3315.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3295.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3299.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src/isa/s390x/lower.isle line 3301.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3291.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmps_val", "src/isa/s390x/lower.isle line 3288"
    )
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27
                {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src/isa/s390x/lower.isle line 3335.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src/isa/s390x/lower.isle line 3341.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src/isa/s390x/lower.isle line 3349.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src/isa/s390x/lower.isle line 3353.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3331.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3327.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3323.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmpu_val", "src/isa/s390x/lower.isle line 3320"
    )
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src/isa/s390x/lower.isle line 3423.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3506.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3512.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3518.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3524.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3530.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3509.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3533.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3527.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3521.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3515.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3474.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3477.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3480.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3489.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3486.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3483.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3492.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3501.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3498.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3495.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3469.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3584.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3590.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3596.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3602.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3608.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3587.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3611.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3605.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3599.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3593.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3552.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3555.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3558.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3567.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3564.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3561.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3570.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3579.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3576.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3573.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3547.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src/isa/s390x/lower.isle line 3685.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, false, v6, v7.0, v7.1);
                    // Rule at src/isa/s390x/lower.isle line 3684.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src/isa/s390x/lower.isle line 3686.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src/isa/s390x/lower.isle line 3689.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src/isa/s390x/lower.isle line 3692.
        return v43.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "value_nonzero", "src/isa/s390x/lower.isle line 3683"
    )
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = constructor_lower_call_args_buffer(ctx, arg0, arg1, arg2);
    let v5 = constructor_lower_call_args_slots(ctx, arg0, v3, arg1, arg2);
    let v6 = constructor_lower_call_ret_arg(ctx, arg0, v3);
    let v7 = &C::args_builder_finish(ctx, v3);
    // Rule at src/isa/s390x/lower.isle line 3910.
    return v7.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> InstOutput {
    let v2 = &C::range_view(ctx, arg1);
    match v2 {
        &RangeView::Empty => {
            let v4 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3919.
            return v4;
        }
        &RangeView::NonEmpty {
            index: v5,
            rest: v6,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v5);
            let v9 = C::value_slice_get(ctx, arg2, v5);
            let v10 = constructor_copy_to_buffer(ctx, 0x0, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, v6, arg2);
            // Rule at src/isa/s390x/lower.isle line 3920.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_buffer", "src/isa/s390x/lower.isle line 3918"
    )
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3927.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v6);
            let v11 = C::value_slice_get(ctx, arg3, v6);
            let v12 = constructor_copy_to_arg(ctx, arg1, v8, 0x0, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3928.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_slots", "src/isa/s390x/lower.isle line 3926"
    )
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
) -> InstOutput {
    let v5 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = &C::abi_arg_only_slot(ctx, v6);
        if let Some(v8) = v7 {
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v11 = &C::memarg_stack_off(ctx, v9, 0x0);
            let v12 = &C::abi_lane_order(ctx, arg0);
            let v13 = constructor_load_addr(ctx, v11);
            let v14 = constructor_copy_reg_to_arg_slot(ctx, arg1, v12, 0x0, v8, v13);
            // Rule at src/isa/s390x/lower.isle line 3937.
            return v14;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::output_none(ctx);
        // Rule at src/isa/s390x/lower.isle line 3936.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_ret_arg", "src/isa/s390x/lower.isle line 3935"
    )
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_builder_finish(ctx, arg3);
            // Rule at src/isa/s390x/lower.isle line 3943.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v9 = C::abi_sized_stack_arg_space(ctx, arg0);
            let v10 = &C::abi_get_ret(ctx, arg0, v6);
            let v11 = constructor_copy_from_arg(ctx, arg1, v8, v9, v10);
            let v12 = C::output_builder_push(ctx, arg3, v11);
            let v13 = constructor_lower_call_rets(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3944.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_rets", "src/isa/s390x/lower.isle line 3942"
    )
}
