// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/x64/inst.isle
// - src/isa/x64/lower.isle
// - /Users/rajeeb/Work/personal/fluence-fil-bangalore/target/debug/build/cranelift-codegen-d602c9be4ae391d2/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> u32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn amode_with_flags(&mut self, arg0: &Amode, arg1: MemFlags) -> Amode;
    fn amode_imm_reg(&mut self, arg0: u32, arg1: Gpr) -> Amode;
    fn amode_imm_reg_reg_shift(&mut self, arg0: u32, arg1: Gpr, arg2: Gpr, arg3: u8) -> Amode;
    fn sum_extend_fits_in_32_bits(
        &mut self,
        arg0: Type,
        arg1: Imm64,
        arg2: Offset32,
    ) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: u32) -> Amode;
    fn zero_offset(&mut self) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn temp_writable_gpr(&mut self) -> WritableGpr;
    fn temp_writable_xmm(&mut self) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn avx512vl_enabled(&mut self, arg0: Type) -> bool;
    fn avx512dq_enabled(&mut self, arg0: Type) -> bool;
    fn avx512f_enabled(&mut self, arg0: Type) -> bool;
    fn avx512bitalg_enabled(&mut self, arg0: Type) -> bool;
    fn avx512vbmi_enabled(&mut self, arg0: Type) -> bool;
    fn use_lzcnt(&mut self, arg0: Type) -> bool;
    fn use_bmi1(&mut self, arg0: Type) -> bool;
    fn use_popcnt(&mut self, arg0: Type) -> bool;
    fn use_fma(&mut self, arg0: Type) -> bool;
    fn use_sse41(&mut self, arg0: Type) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u32;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn simm32_from_imm64(&mut self, arg0: Imm64) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> RegMem;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn fcvt_uint_mask_const(&mut self) -> VCodeConstant;
    fn fcvt_uint_mask_high_const(&mut self) -> VCodeConstant;
    fn iadd_pairwise_mul_const_16(&mut self) -> VCodeConstant;
    fn iadd_pairwise_mul_const_32(&mut self) -> VCodeConstant;
    fn iadd_pairwise_xor_const_32(&mut self) -> VCodeConstant;
    fn iadd_pairwise_addd_const_32(&mut self) -> VCodeConstant;
    fn snarrow_umax_mask(&mut self) -> VCodeConstant;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn atomic_rmw_op_to_mach_atomic_rmw_op(&mut self, arg0: &AtomicRmwOp) -> MachAtomicRmwOp;
    fn emit_div_or_rem(
        &mut self,
        arg0: &DivOrRemKind,
        arg1: Type,
        arg2: WritableGpr,
        arg3: Gpr,
        arg4: Gpr,
    ) -> Unit;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(
        &mut self,
        arg0: &VecMask,
    ) -> Option<(VCodeConstant, VCodeConstant)>;
    fn swizzle_zero_mask(&mut self) -> VCodeConstant;
    fn sqmul_round_sat_mask(&mut self) -> VCodeConstant;
    fn uunarrow_umax_mask(&mut self) -> VCodeConstant;
    fn uunarrow_uint_mask(&mut self) -> VCodeConstant;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self) -> PReg;
    fn preg_rsp(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn popcount_4bit_table(&mut self) -> VCodeConstant;
    fn popcount_low_mask(&mut self) -> VCodeConstant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 282.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 324.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/x64/inst.isle line 8.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: Gpr,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        signed: bool,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    MulHi {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    CheckedDivOrRemSeq {
        kind: DivOrRemKind,
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
        tmp: OptionWritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm64: u64,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src: GprMemImm,
        dst: Gpr,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: XmmMem,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: XmmMem,
        src2: Xmm,
        dst: WritableXmm,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: XmmMem,
        src2: Xmm,
        src3: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMem,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Reg,
        dst: SyntheticAmode,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src: XmmMem,
        dst: Xmm,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        dest: ExternalName,
        info: BoxCallInfo,
    },
    CallUnknown {
        dest: RegMem,
        info: BoxCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        rets: VecRetPair,
    },
    JmpKnown {
        dst: MachLabel,
    },
    JmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: MachAtomicRmwOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type Amode: defined at src/isa/x64/inst.isle line 844.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: u32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: u32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type RegisterClass: defined at src/isa/x64/inst.isle line 1373.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr { single_register: bool },
    Xmm,
}

/// Internal type ExtendKind: defined at src/isa/x64/inst.isle line 1483.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type IcmpCondResult: defined at src/isa/x64/inst.isle line 3446.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition { producer: ProducesFlags, cc: CC },
}

/// Internal type FcmpCondResult: defined at src/isa/x64/inst.isle line 3548.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 55.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 59.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 79.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 128.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 139.
    return v3;
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 292.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 294.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 297.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 291"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 305.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 310.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 312.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 314.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 309"
    )
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        let v3 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: v1.clone(),
            inst2: arg1.clone(),
        };
        // Rule at src/prelude_lower.isle line 339.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_append", "src/prelude_lower.isle line 338"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 364.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 365.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 370.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 372.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 369"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 385.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 379.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 378"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 416.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 422.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 434.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 450.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 457.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 470.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 410.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 402.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 400"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 488.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 495.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 506.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 511.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 516.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 521.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 526.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 504"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> InstOutput {
    let v2 = C::gen_return(ctx, arg1);
    let v3 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 706.
    return v3;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src/isa/x64/inst.isle line 583.
            return 0x8;
        }
        &OperandSize::Size16 => {
            // Rule at src/isa/x64/inst.isle line 584.
            return 0x10;
        }
        &OperandSize::Size32 => {
            // Rule at src/isa/x64/inst.isle line 585.
            return 0x20;
        }
        &OperandSize::Size64 => {
            // Rule at src/isa/x64/inst.isle line 586.
            return 0x40;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size_bits", "src/isa/x64/inst.isle line 582"
    )
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> RegMemImm {
    match arg0 {
        &RegMem::Reg { reg: v1 } => {
            let v2 = RegMemImm::Reg { reg: v1 };
            // Rule at src/isa/x64/inst.isle line 818.
            return v2;
        }
        &RegMem::Mem { addr: ref v3 } => {
            let v4 = RegMemImm::Mem { addr: v3.clone() };
            // Rule at src/isa/x64/inst.isle line 820.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "reg_mem_to_reg_mem_imm", "src/isa/x64/inst.isle line 817"
    )
}

// Generated as internal constructor for term amode_imm_reg_flags.
pub fn constructor_amode_imm_reg_flags<C: Context>(
    ctx: &mut C,
    arg0: u32,
    arg1: Gpr,
    arg2: MemFlags,
) -> Amode {
    let v3 = &C::amode_imm_reg(ctx, arg0, arg1);
    let v4 = &C::amode_with_flags(ctx, v3, arg2);
    // Rule at src/isa/x64/inst.isle line 872.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg_reg_shift_flags.
pub fn constructor_amode_imm_reg_reg_shift_flags<C: Context>(
    ctx: &mut C,
    arg0: u32,
    arg1: Gpr,
    arg2: Gpr,
    arg3: u8,
    arg4: MemFlags,
) -> Amode {
    let v5 = &C::amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    let v6 = &C::amode_with_flags(ctx, v5, arg4);
    // Rule at src/isa/x64/inst.isle line 879.
    return v6.clone();
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v3 = &constructor_amode_initial(ctx, arg0, arg2);
    let v4 = &constructor_amode_add(ctx, v3, arg1);
    let v5 = &constructor_amode_finalize(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1041.
    return v5.clone();
}

// Generated as internal constructor for term amode_initial.
pub fn constructor_amode_initial<C: Context>(ctx: &mut C, arg0: MemFlags, arg1: Offset32) -> Amode {
    let v3 = C::invalid_reg(ctx);
    let v2 = C::offset32(ctx, arg1);
    let v4 = Amode::ImmReg {
        simm32: v2,
        base: v3,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 949.
    return v4;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: &Amode, arg1: Value) -> Amode {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        match v4 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let v10 = &constructor_amode_add(ctx, arg0, v7.0);
                        let v11 = &constructor_amode_add(ctx, v10, v7.1);
                        // Rule at src/isa/x64/inst.isle line 963.
                        return v11.clone();
                    }
                    &Opcode::Ishl => {
                        if let &Amode::ImmReg {
                            simm32: v12,
                            base: v13,
                            flags: v14,
                        } = arg0
                        {
                            let v15 = C::is_valid_reg(ctx, v13);
                            if v15 == true {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let v22 = C::def_inst(ctx, v7.1);
                                if let Some(v23) = v22 {
                                    let v24 = &C::inst_data(ctx, v23);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v25,
                                        imm: v26,
                                    } = v24
                                    {
                                        if let &Opcode::Iconst = v25 {
                                            let v27 = C::uimm8(ctx, v26);
                                            if let Some(v28) = v27 {
                                                let v29 = C::u8_as_u32(ctx, v28);
                                                let v31 = C::u32_lteq(ctx, v29, 0x3);
                                                if let Some(v32) = v31 {
                                                    let v18 = C::gpr_new(ctx, v13);
                                                    let v33 = constructor_put_in_gpr(ctx, v7.0);
                                                    let v34 = Amode::ImmRegRegShift {
                                                        simm32: v12,
                                                        base: v18,
                                                        index: v33,
                                                        shift: v28,
                                                        flags: v14,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 987.
                                                    return v34;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v50,
                arg: v51,
            } => {
                match v50 {
                    &Opcode::Uextend => {
                        match arg0 {
                            &Amode::ImmReg {
                                simm32: v12,
                                base: v13,
                                flags: v14,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v59 = C::u32_nonnegative(ctx, v58);
                                                if let Some(v60) = v59 {
                                                    let v61 = C::s32_add_fallible(ctx, v12, v60);
                                                    if let Some(v62) = v61 {
                                                        let v63 = Amode::ImmReg {
                                                            simm32: v62,
                                                            base: v13,
                                                            flags: v14,
                                                        };
                                                        // Rule at src/isa/x64/inst.isle line 1012.
                                                        return v63;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &Amode::ImmRegRegShift {
                                simm32: v42,
                                base: v43,
                                index: v44,
                                shift: v45,
                                flags: v46,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v59 = C::u32_nonnegative(ctx, v58);
                                                if let Some(v60) = v59 {
                                                    let v64 = C::s32_add_fallible(ctx, v42, v60);
                                                    if let Some(v65) = v64 {
                                                        let v66 = Amode::ImmRegRegShift {
                                                            simm32: v65,
                                                            base: v43,
                                                            index: v44,
                                                            shift: v45,
                                                            flags: v46,
                                                        };
                                                        // Rule at src/isa/x64/inst.isle line 1016.
                                                        return v66;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Sextend => {
                        match arg0 {
                            &Amode::ImmReg {
                                simm32: v12,
                                base: v13,
                                flags: v14,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v67 = C::s32_add_fallible(ctx, v12, v58);
                                                if let Some(v68) = v67 {
                                                    let v69 = Amode::ImmReg {
                                                        simm32: v68,
                                                        base: v13,
                                                        flags: v14,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 1022.
                                                    return v69;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &Amode::ImmRegRegShift {
                                simm32: v42,
                                base: v43,
                                index: v44,
                                shift: v45,
                                flags: v46,
                            } => {
                                let v52 = C::def_inst(ctx, v51);
                                if let Some(v53) = v52 {
                                    let v54 = &C::inst_data(ctx, v53);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v55,
                                        imm: v56,
                                    } = v54
                                    {
                                        if let &Opcode::Iconst = v55 {
                                            let v57 = C::simm32(ctx, v56);
                                            if let Some(v58) = v57 {
                                                let v70 = C::s32_add_fallible(ctx, v42, v58);
                                                if let Some(v71) = v70 {
                                                    let v72 = Amode::ImmRegRegShift {
                                                        simm32: v71,
                                                        base: v43,
                                                        index: v44,
                                                        shift: v45,
                                                        flags: v46,
                                                    };
                                                    // Rule at src/isa/x64/inst.isle line 1026.
                                                    return v72;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v35,
                imm: v36,
            } => {
                if let &Opcode::Iconst = v35 {
                    match arg0 {
                        &Amode::ImmReg {
                            simm32: v12,
                            base: v13,
                            flags: v14,
                        } => {
                            let v37 = C::simm32(ctx, v36);
                            if let Some(v38) = v37 {
                                let v39 = C::s32_add_fallible(ctx, v12, v38);
                                if let Some(v40) = v39 {
                                    let v41 = Amode::ImmReg {
                                        simm32: v40,
                                        base: v13,
                                        flags: v14,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 999.
                                    return v41;
                                }
                            }
                        }
                        &Amode::ImmRegRegShift {
                            simm32: v42,
                            base: v43,
                            index: v44,
                            shift: v45,
                            flags: v46,
                        } => {
                            let v37 = C::simm32(ctx, v36);
                            if let Some(v38) = v37 {
                                let v47 = C::s32_add_fallible(ctx, v42, v38);
                                if let Some(v48) = v47 {
                                    let v49 = Amode::ImmRegRegShift {
                                        simm32: v48,
                                        base: v43,
                                        index: v44,
                                        shift: v45,
                                        flags: v46,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1003.
                                    return v49;
                                }
                            }
                        }
                        _ => {}
                    }
                }
            }
            _ => {}
        }
    }
    match arg0 {
        &Amode::ImmReg {
            simm32: v12,
            base: v13,
            flags: v14,
        } => {
            let v15 = C::is_valid_reg(ctx, v13);
            match v15 {
                true => {
                    let v18 = C::gpr_new(ctx, v13);
                    let v19 = constructor_put_in_gpr(ctx, arg1);
                    let v21 = Amode::ImmRegRegShift {
                        simm32: v12,
                        base: v18,
                        index: v19,
                        shift: 0x0,
                        flags: v14,
                    };
                    // Rule at src/isa/x64/inst.isle line 978.
                    return v21;
                }
                false => {
                    let v16 = C::put_in_reg(ctx, arg1);
                    let v17 = Amode::ImmReg {
                        simm32: v12,
                        base: v16,
                        flags: v14,
                    };
                    // Rule at src/isa/x64/inst.isle line 972.
                    return v17;
                }
                _ => {}
            }
        }
        &Amode::ImmRegRegShift {
            simm32: v42,
            base: v43,
            index: v44,
            shift: v45,
            flags: v46,
        } => {
            let v74 = &constructor_put_in_gpr_mem_imm(ctx, arg1);
            let v75 = constructor_x64_add(ctx, I64, v43, v74);
            let v76 = Amode::ImmRegRegShift {
                simm32: v42,
                base: v75,
                index: v44,
                shift: v45,
                flags: v46,
            };
            // Rule at src/isa/x64/inst.isle line 1036.
            return v76;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_add", "src/isa/x64/inst.isle line 954"
    )
}

// Generated as internal constructor for term amode_finalize.
pub fn constructor_amode_finalize<C: Context>(ctx: &mut C, arg0: &Amode) -> Amode {
    if let &Amode::ImmReg {
        simm32: v1,
        base: v2,
        flags: v3,
    } = arg0
    {
        let v4 = C::is_valid_reg(ctx, v2);
        if v4 == false {
            let v7 = constructor_imm(ctx, I64, 0x0);
            let v8 = Amode::ImmReg {
                simm32: v1,
                base: v7,
                flags: v3,
            };
            // Rule at src/isa/x64/inst.isle line 1048.
            return v8;
        }
    }
    // Rule at src/isa/x64/inst.isle line 1050.
    return arg0.clone();
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3
        {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src/isa/x64/inst.isle line 1085.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = RegMemImm::Imm { simm32: v15 };
        let v17 = &C::gpr_mem_imm_new(ctx, &v16);
        let v18 = constructor_x64_and(ctx, I64, v14, v17);
        let v19 = &C::gpr_to_imm8_gpr(ctx, v18);
        // Rule at src/isa/x64/inst.isle line 1087.
        return v19.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
    let v20 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src/isa/x64/inst.isle line 1089.
    return v20.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Reg) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1285.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1292.
    return v2;
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1299.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1306.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1313.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1330.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/x64/inst.isle line 1335.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1340.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1347.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1360.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1);
    let v3 = &C::gpr_mem_imm_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1469.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> XmmMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1473.
    return v2.clone();
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src/isa/x64/inst.isle line 1498.
        return v4;
    }
    let v6 = &C::operand_size_of_type_32_64(ctx, arg1);
    let v7 = constructor_operand_size_bits(ctx, v6);
    let v5 = C::ty_bits_u16(ctx, v1);
    let v8 = &C::ext_mode(ctx, v5, v7);
    let v9 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v10 = constructor_extend(ctx, arg2, arg1, v8, v9);
    // Rule at src/isa/x64/inst.isle line 1501.
    return v10;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 1521.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 1517.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src/isa/x64/inst.isle line 1514"
    )
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/x64/inst.isle line 1528.
                    return I8X16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/x64/inst.isle line 1529.
                    return I16X8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/x64/inst.isle line 1530.
                    return I32X4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/x64/inst.isle line 1531.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_int_type", "src/isa/x64/inst.isle line 1527"
    )
}

// Generated as internal constructor for term sse_xor_op.
pub fn constructor_sse_xor_op<C: Context>(ctx: &mut C, arg0: Type) -> SseOpcode {
    match arg0 {
        F32 => {
            // Rule at src/isa/x64/inst.isle line 1537.
            return SseOpcode::Xorps;
        }
        F64 => {
            // Rule at src/isa/x64/inst.isle line 1538.
            return SseOpcode::Xorpd;
        }
        F32X4 => {
            // Rule at src/isa/x64/inst.isle line 1535.
            return SseOpcode::Xorps;
        }
        F64X2 => {
            // Rule at src/isa/x64/inst.isle line 1536.
            return SseOpcode::Xorpd;
        }
        _ => {}
    }
    let v3 = C::multi_lane(ctx, arg0);
    if let Some(v4) = v3 {
        // Rule at src/isa/x64/inst.isle line 1542.
        return SseOpcode::Pxor;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_xor_op", "src/isa/x64/inst.isle line 1534"
    )
}

// Generated as internal constructor for term sse_xor.
pub fn constructor_sse_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    let v3 = &constructor_sse_xor_op(ctx, arg0);
    let v4 = constructor_xmm_rm_r(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1546.
    return v4;
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = C::writable_xmm_to_xmm(ctx, v0);
    let v2 = &constructor_writable_xmm_to_xmm_mem(ctx, v0);
    let v3 = constructor_x64_pcmpeqd(ctx, v1, v2);
    // Rule at src/isa/x64/inst.isle line 1558.
    return v3;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue { dst: v0 };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 1564.
    return v3;
}

// Generated as internal constructor for term make_i64x2_from_lanes.
pub fn constructor_make_i64x2_from_lanes<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
    arg1: &GprMem,
) -> Xmm {
    let v2 = constructor_xmm_uninit_value(ctx);
    let v5 = constructor_x64_pinsrd(ctx, v2, arg0, 0x0, &OperandSize::Size64);
    let v7 = constructor_x64_pinsrd(ctx, v5, arg1, 0x1, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 1571.
    return v7;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg { reg: v4 } => {
            let v6 = &C::reg_to_gpr_mem(ctx, v4);
            let v8 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v6, &OperandSize::Size32);
            let v9 = &C::xmm_to_xmm_mem_imm(ctx, v8);
            // Rule at src/isa/x64/inst.isle line 1581.
            return v9.clone();
        }
        &RegMemImm::Mem { addr: ref v1 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 1579.
            return v2.clone();
        }
        &RegMemImm::Imm { simm32: v3 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 1580.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mov_rmi_to_xmm", "src/isa/x64/inst.isle line 1578"
    )
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: ExternalName, arg1: i64) -> Reg {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::LoadExtName {
        dst: v3,
        name: v4,
        offset: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1598.
    return v7;
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = C::temp_writable_gpr(ctx);
            let v12 = MInst::Mov64MR {
                src: arg1.clone(),
                dst: v11,
            };
            let v13 = C::emit(ctx, &v12);
            let v14 = constructor_writable_gpr_to_r_reg(ctx, v11);
            // Rule at src/isa/x64/inst.isle line 1610.
            return v14;
        }
        F32 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v17 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movss, v16);
            let v18 = C::xmm_to_reg(ctx, v17);
            // Rule at src/isa/x64/inst.isle line 1615.
            return v18;
        }
        F64 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v20 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movsd, v16);
            let v21 = C::xmm_to_reg(ctx, v20);
            // Rule at src/isa/x64/inst.isle line 1619.
            return v21;
        }
        F32X4 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v23 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movups, v16);
            let v24 = C::xmm_to_reg(ctx, v23);
            // Rule at src/isa/x64/inst.isle line 1623.
            return v24;
        }
        F64X2 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v26 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movupd, v16);
            let v27 = C::xmm_to_reg(ctx, v26);
            // Rule at src/isa/x64/inst.isle line 1627.
            return v27;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src/isa/x64/inst.isle line 1606.
            return v10;
        }
    }
    let v28 = C::multi_lane(ctx, arg0);
    if let Some(v29) = v28 {
        let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v33 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movdqu, v16);
        let v34 = C::xmm_to_reg(ctx, v33);
        // Rule at src/isa/x64/inst.isle line 1631.
        return v34;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_load", "src/isa/x64/inst.isle line 1604"
    )
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v3 = MInst::Mov64MR {
        src: v2.clone(),
        dst: v1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1635.
    return v5;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1641.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1647.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movss, arg0);
    // Rule at src/isa/x64/inst.isle line 1653.
    return v2;
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movsd, arg0);
    // Rule at src/isa/x64/inst.isle line 1657.
    return v2;
}

// Generated as internal constructor for term x64_movups.
pub fn constructor_x64_movups<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movups, arg0);
    // Rule at src/isa/x64/inst.isle line 1661.
    return v2;
}

// Generated as internal constructor for term x64_movupd.
pub fn constructor_x64_movupd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movupd, arg0);
    // Rule at src/isa/x64/inst.isle line 1665.
    return v2;
}

// Generated as internal constructor for term x64_movd.
pub fn constructor_x64_movd<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 1669.
    return v3;
}

// Generated as internal constructor for term x64_movdqu.
pub fn constructor_x64_movdqu<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src/isa/x64/inst.isle line 1673.
    return v2;
}

// Generated as internal constructor for term x64_movapd.
pub fn constructor_x64_movapd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Movapd, arg0);
    // Rule at src/isa/x64/inst.isle line 1677.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 1681.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 1685.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 1689.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 1693.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 1697.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 1701.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 1705.
    return v5;
}

// Generated as internal constructor for term x64_xmm_movrm.
pub fn constructor_x64_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = C::xmm_to_reg(ctx, arg2);
    let v4 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: v3,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 1710.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1715.
    return v5;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1726.
    return v8;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1734.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 1742.
    return v8;
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 1754.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1766.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 1774.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 1786.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Mul, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1798.
    return v4;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1806.
    return v4;
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 1813.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1824.
    return v4;
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1832.
    return v4;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1840.
    return v8;
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1847.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src/isa/x64/inst.isle line 1854.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        I64 => {
            let v24 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v25) = v24 {
                let v5 = C::temp_writable_gpr(ctx);
                let v26 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v25,
                    dst: v5,
                };
                let v27 = C::emit(ctx, &v26);
                let v28 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 1889.
                return v28;
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v40 = C::temp_writable_xmm(ctx);
                    let v41 = C::writable_xmm_to_xmm(ctx, v40);
                    let v48 = &C::xmm_to_xmm_mem(ctx, v41);
                    let v49 = MInst::XmmRmR {
                        op: SseOpcode::Xorps,
                        src1: v41,
                        src2: v48.clone(),
                        dst: v40,
                    };
                    let v50 = C::emit(ctx, &v49);
                    let v51 = C::xmm_to_reg(ctx, v41);
                    // Rule at src/isa/x64/inst.isle line 1918.
                    return v51;
                }
                false => {
                    let v12 = constructor_imm(ctx, I32, arg1);
                    let v13 = &C::reg_to_gpr_mem(ctx, v12);
                    let v15 =
                        constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v13, &OperandSize::Size32);
                    let v16 = C::xmm_to_reg(ctx, v15);
                    // Rule at src/isa/x64/inst.isle line 1876.
                    return v16;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v40 = C::temp_writable_xmm(ctx);
                    let v41 = C::writable_xmm_to_xmm(ctx, v40);
                    let v48 = &C::xmm_to_xmm_mem(ctx, v41);
                    let v53 = MInst::XmmRmR {
                        op: SseOpcode::Xorpd,
                        src1: v41,
                        src2: v48.clone(),
                        dst: v40,
                    };
                    let v54 = C::emit(ctx, &v53);
                    let v51 = C::xmm_to_reg(ctx, v41);
                    // Rule at src/isa/x64/inst.isle line 1930.
                    return v51;
                }
                false => {
                    let v19 = constructor_imm(ctx, I64, arg1);
                    let v20 = &C::reg_to_gpr_mem(ctx, v19);
                    let v22 =
                        constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, v20, &OperandSize::Size64);
                    let v23 = C::xmm_to_reg(ctx, v22);
                    // Rule at src/isa/x64/inst.isle line 1882.
                    return v23;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v29 = C::writable_gpr_to_gpr(ctx, v5);
                let v30 = &C::operand_size_of_type_32_64(ctx, v2);
                let v32 = &C::gpr_to_gpr_mem_imm(ctx, v29);
                let v33 = MInst::AluRmiR {
                    size: v30.clone(),
                    op: AluRmiROpcode::Xor,
                    src1: v29,
                    src2: v32.clone(),
                    dst: v5,
                };
                let v34 = C::emit(ctx, &v33);
                let v35 = C::gpr_to_reg(ctx, v29);
                // Rule at src/isa/x64/inst.isle line 1895.
                return v35;
            }
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 1869.
                return v9;
            }
            _ => {}
        }
    }
    if arg1 == 0x0 {
        let v36 = C::multi_lane(ctx, arg0);
        if let Some(v37) = v36 {
            let v40 = C::temp_writable_xmm(ctx);
            let v41 = C::writable_xmm_to_xmm(ctx, v40);
            let v42 = &constructor_sse_xor_op(ctx, arg0);
            let v43 = &C::xmm_to_xmm_mem(ctx, v41);
            let v44 = MInst::XmmRmR {
                op: v42.clone(),
                src1: v41,
                src2: v43.clone(),
                dst: v40,
            };
            let v45 = C::emit(ctx, &v44);
            let v46 = C::xmm_to_reg(ctx, v41);
            // Rule at src/isa/x64/inst.isle line 1908.
            return v46;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/x64/inst.isle line 1866"
    )
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 1943.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1953.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1958.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1963.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1968.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1973.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1980.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: &GprMemImm,
    arg3: Gpr,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src: arg2.clone(),
        dst: arg3,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src/isa/x64/inst.isle line 1988.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1997.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: u32,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = RegMemImm::Imm { simm32: arg1 };
    let v5 = &C::gpr_mem_imm_new(ctx, &v4);
    let v6 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, v5, arg2);
    // Rule at src/isa/x64/inst.isle line 2002.
    return v6.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
    arg2: Xmm,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 2007.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        F32 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &C::xmm_to_xmm_mem(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v7 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2013.
            return v7.clone();
        }
        F64 => {
            let v4 = constructor_put_in_xmm(ctx, arg0);
            let v5 = &C::xmm_to_xmm_mem(ctx, v4);
            let v6 = constructor_put_in_xmm(ctx, arg1);
            let v9 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, v5, v6);
            // Rule at src/isa/x64/inst.isle line 2017.
            return v9.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_ucomis", "src/isa/x64/inst.isle line 2012"
    )
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &GprMemImm,
    arg2: Gpr,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2022.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: Xmm) -> ProducesFlags {
    let v3 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2027.
    return v3.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2034.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &XmmMem,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2042.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src/isa/x64/inst.isle line 2073.
                        return v28.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src/isa/x64/inst.isle line 2052.
                            return v25;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = &C::put_in_xmm_mem(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src/isa/x64/inst.isle line 2076.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_from_values", "src/isa/x64/inst.isle line 2051"
    )
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src/isa/x64/inst.isle line 2083.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &XmmMem,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src/isa/x64/inst.isle line 2095.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src/isa/x64/inst.isle line 2128.
                        return v39.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src/isa/x64/inst.isle line 2109.
                            return v36;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = &C::put_in_xmm_mem(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src/isa/x64/inst.isle line 2131.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_or_from_values", "src/isa/x64/inst.isle line 2108"
    )
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2136.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2145.
    return v4;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SseOpcode,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmR {
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2153.
    return v7;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Paddb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2160.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Paddw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2165.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I32X4, &SseOpcode::Paddd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2170.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I64X2, &SseOpcode::Paddq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2175.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Paddsb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2180.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Paddsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2185.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Paddusb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2190.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Paddusw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2195.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Psubb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2200.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Psubw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2205.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I32X4, &SseOpcode::Psubd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2210.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I64X2, &SseOpcode::Psubq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2215.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Psubsb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2220.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Psubsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2225.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Psubusb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2230.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Psubusw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2235.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pavgb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2240.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pavgw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2245.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Pand, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2250.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Andps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2255.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64X2, &SseOpcode::Andpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2260.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Por, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2265.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Orps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2270.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64X2, &SseOpcode::Orpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2275.
    return v4;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pxor, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2280.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Xorps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2285.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64X2, &SseOpcode::Xorpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2290.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmullw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2295.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmulld, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2300.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmulhw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2305.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmulhrsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2310.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmulhuw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2315.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pmuldq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2320.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I64X2, &SseOpcode::Pmuludq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2325.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Punpckhwd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2330.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Punpcklwd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2335.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Unpcklps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2340.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32X4, &SseOpcode::Andnps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2345.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64X2, &SseOpcode::Andnpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2350.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64X2, &SseOpcode::Pandn, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2355.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Addss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2360.
    return v4;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2365.
    return v4;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Addps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2370.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Addpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2375.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Subss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2380.
    return v4;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2385.
    return v4;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Subps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2390.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Subpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2395.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2400.
    return v4;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2405.
    return v4;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Mulps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2410.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Mulpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2415.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Divss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2420.
    return v4;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F64, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2425.
    return v4;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Divps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2430.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, F32, &SseOpcode::Divpd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2435.
    return v4;
}

// Generated as internal constructor for term sse_blend_op.
pub fn constructor_sse_blend_op<C: Context>(ctx: &mut C, arg0: Type) -> SseOpcode {
    match arg0 {
        F32X4 => {
            // Rule at src/isa/x64/inst.isle line 2439.
            return SseOpcode::Blendvps;
        }
        F64X2 => {
            // Rule at src/isa/x64/inst.isle line 2440.
            return SseOpcode::Blendvpd;
        }
        _ => {}
    }
    let v3 = C::multi_lane(ctx, arg0);
    if let Some(v4) = v3 {
        // Rule at src/isa/x64/inst.isle line 2443.
        return SseOpcode::Pblendvb;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_blend_op", "src/isa/x64/inst.isle line 2438"
    )
}

// Generated as internal constructor for term sse_mov_op.
pub fn constructor_sse_mov_op<C: Context>(ctx: &mut C, arg0: Type) -> SseOpcode {
    match arg0 {
        F32X4 => {
            // Rule at src/isa/x64/inst.isle line 2446.
            return SseOpcode::Movaps;
        }
        F64X2 => {
            // Rule at src/isa/x64/inst.isle line 2447.
            return SseOpcode::Movapd;
        }
        _ => {}
    }
    let v3 = C::multi_lane(ctx, arg0);
    if let Some(v4) = v3 {
        // Rule at src/isa/x64/inst.isle line 2450.
        return SseOpcode::Movdqa;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_mov_op", "src/isa/x64/inst.isle line 2445"
    )
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2453.
    return v7;
}

// Generated as internal constructor for term x64_blend.
pub fn constructor_x64_blend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = &constructor_sse_blend_op(ctx, arg0);
    let v5 = constructor_xmm_rm_r_blend(ctx, v4, arg3, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 2460.
    return v5;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v4 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2465.
    return v4;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2470.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Movlhps, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2475.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2480.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2481.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2482.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxs", "src/isa/x64/inst.isle line 2479"
    )
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxsb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2485.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2487.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2489.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2493.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2494.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2495.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmins", "src/isa/x64/inst.isle line 2492"
    )
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pminsb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2498.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pminsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2500.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I32X4, &SseOpcode::Pminsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2502.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2506.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2507.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2508.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxu", "src/isa/x64/inst.isle line 2505"
    )
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxub, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2511.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxuw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2513.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaxud, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2515.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2519.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2520.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2521.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pminu", "src/isa/x64/inst.isle line 2518"
    )
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pminub, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2524.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pminuw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2526.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pminud, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2528.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Punpcklbw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2532.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Punpckhbw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2537.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Packsswb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2542.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Packssdw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2547.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Packuswb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2552.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Packusdw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2557.
    return v4;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src/isa/x64/inst.isle line 2562.
    return v9;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
    arg3: &OperandSize,
) -> Xmm {
    let v5 = C::xmm_to_reg(ctx, arg0);
    let v6 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v5, v6, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 2574.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2583.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2584.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_cmpp", "src/isa/x64/inst.isle line 2582"
    )
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2587.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2598.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2607.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2616.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
    arg3: &OperandSize,
) -> Xmm {
    let v5 = C::xmm_to_reg(ctx, arg0);
    let v6 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v5, v6, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 2625.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2634.
    return v6;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = C::encode_round_imm(ctx, arg1);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2641.
    return v4;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = C::encode_round_imm(ctx, arg1);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2646.
    return v4;
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = C::encode_round_imm(ctx, arg1);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2651.
    return v4;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v3 = C::encode_round_imm(ctx, arg1);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 2656.
    return v4;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: SseOpcode::Pmaddwd,
        src1: arg0,
        src2: arg1.clone(),
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2661.
    return v6;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pmaddubsw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2670.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(
        ctx,
        &SseOpcode::Insertps,
        v4,
        v5,
        arg2,
        &OperandSize::Size32,
    );
    // Rule at src/isa/x64/inst.isle line 2675.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = constructor_writable_xmm_to_r_reg(ctx, v3);
    let v6 = &C::xmm_mem_to_reg_mem(ctx, arg0);
    let v7 = C::writable_xmm_to_reg(ctx, v3);
    let v8 = MInst::XmmRmRImm {
        op: SseOpcode::Pshufd,
        src1: v5,
        src2: v6.clone(),
        dst: v7,
        imm: arg1,
        size: arg2.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2684.
    return v10;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: SseOpcode::Pshufb,
        src1: arg0,
        src2: arg1.clone(),
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2696.
    return v6;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2706.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &XmmMem) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2715.
    return v5;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, arg0);
    // Rule at src/isa/x64/inst.isle line 2722.
    return v2;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, arg0);
    // Rule at src/isa/x64/inst.isle line 2727.
    return v2;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, arg0);
    // Rule at src/isa/x64/inst.isle line 2732.
    return v2;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2737.
    return v5;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src/isa/x64/inst.isle line 2744.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src/isa/x64/inst.isle line 2749.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src/isa/x64/inst.isle line 2754.
    return v2;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2759.
    return v6;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: Xmm) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2771.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm, arg2: Xmm) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v6 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: v5.clone(),
        src2: arg1,
        src3: arg2,
        dst: v3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2780.
    return v8;
}

// Generated as internal constructor for term mul_hi.
pub fn constructor_mul_hi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::MulHi {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src/isa/x64/inst.isle line 2793.
    return v11;
}

// Generated as internal constructor for term mulhi_u.
pub fn constructor_mulhi_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> ValueRegs {
    let v4 = constructor_mul_hi(ctx, arg0, false, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2808.
    return v4;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2813.
    return v6;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2823.
    return v3;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2828.
    return v3;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2833.
    return v3;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2838.
    return v3;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2843.
    return v3;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2848.
    return v3;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2853.
    return v3;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v3 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2858.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: u8) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = C::xmm_to_reg(ctx, arg1);
    let v7 = &constructor_xmm_to_reg_mem(ctx, v6);
    let v8 = &C::xmm_mem_to_reg_mem(ctx, v7);
    let v9 = C::writable_gpr_to_reg(ctx, v3);
    let v10 = C::lane_type(ctx, arg0);
    let v11 = &C::operand_size_of_type_32_64(ctx, v10);
    let v12 = MInst::XmmRmRImm {
        op: SseOpcode::Pextrb,
        src1: v5,
        src2: v8.clone(),
        dst: v9,
        imm: arg2,
        size: v11.clone(),
    };
    let v13 = C::emit(ctx, &v12);
    let v14 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2863.
    return v14;
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: u8) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = C::xmm_to_reg(ctx, arg1);
    let v7 = &constructor_xmm_to_reg_mem(ctx, v6);
    let v8 = &C::xmm_mem_to_reg_mem(ctx, v7);
    let v9 = C::writable_gpr_to_reg(ctx, v3);
    let v10 = C::lane_type(ctx, arg0);
    let v11 = &C::operand_size_of_type_32_64(ctx, v10);
    let v12 = MInst::XmmRmRImm {
        op: SseOpcode::Pextrw,
        src1: v5,
        src2: v8.clone(),
        dst: v9,
        imm: arg2,
        size: v11.clone(),
    };
    let v13 = C::emit(ctx, &v12);
    let v14 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2875.
    return v14;
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: u8) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = C::xmm_to_reg(ctx, arg1);
    let v7 = &constructor_xmm_to_reg_mem(ctx, v6);
    let v8 = &C::xmm_mem_to_reg_mem(ctx, v7);
    let v9 = C::writable_gpr_to_reg(ctx, v3);
    let v10 = C::lane_type(ctx, arg0);
    let v11 = &C::operand_size_of_type_32_64(ctx, v10);
    let v12 = MInst::XmmRmRImm {
        op: SseOpcode::Pextrd,
        src1: v5,
        src2: v8.clone(),
        dst: v9,
        imm: arg2,
        size: v11.clone(),
    };
    let v13 = C::emit(ctx, &v12);
    let v14 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2887.
    return v14;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2899.
    return v6;
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 2906.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 2911.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 2916.
    return v3;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2921.
    return v6;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2928.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2936.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 2944.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::LoadEffectiveAddress {
        addr: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2951.
    return v4;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 2958.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Hlt };
    // Rule at src/isa/x64/inst.isle line 2963.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Lzcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2968.
    return v8;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Tzcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2976.
    return v8;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2984.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 2993.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 3004.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 3013.
    return v11;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Popcnt,
        src: v5.clone(),
        dst: v2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3024.
    return v8;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3032.
    return v8;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Minss,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3040.
    return v7;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Minsd,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3047.
    return v7;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Minps,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3055.
    return v7;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Minpd,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3062.
    return v7;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Maxss,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3069.
    return v7;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Maxsd,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3076.
    return v7;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Maxps,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3083.
    return v7;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmRmR {
        op: SseOpcode::Maxpd,
        src1: arg0,
        src2: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3090.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex.
pub fn constructor_xmm_rmr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3098.
    return v7;
}

// Generated as internal constructor for term x64_vfmadd213ss.
pub fn constructor_x64_vfmadd213ss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v5 = constructor_xmm_rmr_vex(ctx, &AvxOpcode::Vfmadd213ss, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 3111.
    return v5;
}

// Generated as internal constructor for term x64_vfmadd213sd.
pub fn constructor_x64_vfmadd213sd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v5 = constructor_xmm_rmr_vex(ctx, &AvxOpcode::Vfmadd213sd, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 3118.
    return v5;
}

// Generated as internal constructor for term x64_vfmadd213ps.
pub fn constructor_x64_vfmadd213ps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v5 = constructor_xmm_rmr_vex(ctx, &AvxOpcode::Vfmadd213ps, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 3125.
    return v5;
}

// Generated as internal constructor for term x64_vfmadd213pd.
pub fn constructor_x64_vfmadd213pd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v5 = constructor_xmm_rmr_vex(ctx, &AvxOpcode::Vfmadd213pd, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 3132.
    return v5;
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Sqrtss,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3138.
    return v6;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Sqrtsd,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3145.
    return v6;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Sqrtps,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3152.
    return v6;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Sqrtpd,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3159.
    return v6;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtss2sd,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3166.
    return v6;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtsd2ss,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3173.
    return v6;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtdq2ps,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3180.
    return v6;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtps2pd,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3187.
    return v6;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v1 = C::temp_writable_xmm(ctx);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v4 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtpd2ps,
        src: v3.clone(),
        dst: v1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3194.
    return v6;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v5 = MInst::XmmUnaryRmR {
        op: SseOpcode::Cvtdq2pd,
        src: v4.clone(),
        dst: v2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3201.
    return v7;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::GprToXmm {
        op: SseOpcode::Cvtsi2ss,
        src: arg1.clone(),
        dst: v2,
        src_size: v3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3208.
    return v7;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::GprToXmm {
        op: SseOpcode::Cvtsi2sd,
        src: arg1.clone(),
        dst: v2,
        src_size: v3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3216.
    return v7;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(ctx: &mut C, arg0: Type, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, arg1);
    // Rule at src/isa/x64/inst.isle line 3224.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, arg0);
    // Rule at src/isa/x64/inst.isle line 3229.
    return v2;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 3233.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 3242.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 3254.
    return v12;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3272.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3273.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3274.
            return v5;
        }
        I64X2 => {
            let v6 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3275.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpeq", "src/isa/x64/inst.isle line 3271"
    )
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pcmpeqb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3278.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pcmpeqw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3280.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I32X4, &SseOpcode::Pcmpeqd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3282.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I64X2, &SseOpcode::Pcmpeqq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3284.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3288.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3289.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3290.
            return v5;
        }
        I64X2 => {
            let v6 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3291.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpgt", "src/isa/x64/inst.isle line 3287"
    )
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I8X16, &SseOpcode::Pcmpgtb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3294.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I16X8, &SseOpcode::Pcmpgtw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3296.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I32X4, &SseOpcode::Pcmpgtd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3298.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = constructor_xmm_rm_r(ctx, I64X2, &SseOpcode::Pcmpgtq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3300.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    // Rule at src/isa/x64/inst.isle line 3304.
    return v7;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3309.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3313.
    return v4.clone();
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3317.
    return v4.clone();
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3321.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3325.
    return v4.clone();
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: &TrapCode) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 3330.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 3335.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 3340.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/x64/inst.isle line 3344.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_icmp", "src/isa/x64/inst.isle line 3343"
    )
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src/isa/x64/inst.isle line 3348.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src/isa/x64/inst.isle line 3350.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src/isa/x64/inst.isle line 3352.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_fcmp", "src/isa/x64/inst.isle line 3347"
    )
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown { dst: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 3359.
    return v2;
}

// Generated as internal constructor for term jmp_if.
pub fn constructor_jmp_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel) -> ConsumesFlags {
    let v2 = MInst::JmpIf {
        cc: arg0.clone(),
        taken: arg1,
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 3363.
    return v3;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/x64/inst.isle line 3368.
    return v4;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/x64/inst.isle line 3373.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_icmp", "src/isa/x64/inst.isle line 3372"
    )
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src/isa/x64/inst.isle line 3378.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &constructor_jmp_if(ctx, v10, arg2);
            let v12 = &C::cc_invert(ctx, v9);
            let v13 = &constructor_jmp_cond(ctx, v12, arg2, arg1);
            let v14 = &constructor_consumes_flags_concat(ctx, v11, v13);
            let v15 = &constructor_with_flags_side_effect(ctx, v7, v14);
            // Rule at src/isa/x64/inst.isle line 3380.
            return v15.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v16,
            cc1: ref v17,
            cc2: ref v18,
        } => {
            let v19 = &constructor_jmp_if(ctx, v17, arg1);
            let v20 = &constructor_jmp_cond(ctx, v18, arg1, arg2);
            let v21 = &constructor_consumes_flags_concat(ctx, v19, v20);
            let v22 = &constructor_with_flags_side_effect(ctx, v16, v21);
            // Rule at src/isa/x64/inst.isle line 3385.
            return v22.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_fcmp", "src/isa/x64/inst.isle line 3377"
    )
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = C::jump_table_size(ctx, arg3);
    let v8 = RegMemImm::Imm { simm32: v7 };
    let v9 = &C::gpr_mem_imm_new(ctx, &v8);
    let v10 = &constructor_x64_cmp(ctx, v6, v9, arg1);
    let v11 = C::gpr_to_reg(ctx, arg1);
    let v12 = C::writable_gpr_to_reg(ctx, v4);
    let v13 = C::writable_gpr_to_reg(ctx, v5);
    let v14 = MInst::JmpTableSeq {
        idx: v11,
        tmp1: v12,
        tmp2: v13,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v15 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v14 };
    let v16 = &constructor_with_flags_side_effect(ctx, v10, &v15);
    // Rule at src/isa/x64/inst.isle line 3405.
    return v16.clone();
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 3449.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 3452.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_icmp_cond_result", "src/isa/x64/inst.isle line 3451"
    )
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 3457.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_bool", "src/isa/x64/inst.isle line 3456"
    )
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6
            {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src/isa/x64/inst.isle line 3466.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src/isa/x64/inst.isle line 3470.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_icmp", "src/isa/x64/inst.isle line 3461"
    )
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v17 = C::put_in_regs(ctx, arg1);
                let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
                let v20 = C::put_in_regs(ctx, arg1);
                let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
                let v23 = C::put_in_regs(ctx, arg2);
                let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
                let v25 = C::put_in_regs(ctx, arg2);
                let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
                let v28 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                let v29 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v28, v19);
                let v31 = &constructor_x64_setcc(ctx, &CC::Z);
                let v32 = constructor_with_flags_reg(ctx, v29, v31);
                let v33 = &C::gpr_to_gpr_mem_imm(ctx, v26);
                let v34 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v33, v22);
                let v35 = &constructor_x64_setcc(ctx, &CC::Z);
                let v36 = constructor_with_flags_reg(ctx, v34, v35);
                let v38 = C::gpr_new(ctx, v32);
                let v39 = &constructor_reg_to_gpr_mem_imm(ctx, v36);
                let v40 = constructor_x64_and(ctx, I64, v38, v39);
                let v41 = C::gpr_to_reg(ctx, v40);
                let v43 = RegMemImm::Imm { simm32: 0x1 };
                let v44 = &C::gpr_mem_imm_new(ctx, &v43);
                let v45 = C::gpr_new(ctx, v41);
                let v46 = &constructor_x64_test(ctx, &OperandSize::Size64, v44, v45);
                let v48 = &constructor_icmp_cond_result(ctx, v46, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 3491.
                return v48.clone();
            }
            &IntCC::NotEqual => {
                let v17 = C::put_in_regs(ctx, arg1);
                let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
                let v20 = C::put_in_regs(ctx, arg1);
                let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
                let v23 = C::put_in_regs(ctx, arg2);
                let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
                let v25 = C::put_in_regs(ctx, arg2);
                let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
                let v28 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                let v29 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v28, v19);
                let v49 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v50 = constructor_with_flags_reg(ctx, v29, v49);
                let v33 = &C::gpr_to_gpr_mem_imm(ctx, v26);
                let v34 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v33, v22);
                let v51 = &constructor_x64_setcc(ctx, &CC::NZ);
                let v52 = constructor_with_flags_reg(ctx, v34, v51);
                let v53 = C::gpr_new(ctx, v50);
                let v54 = &constructor_reg_to_gpr_mem_imm(ctx, v52);
                let v55 = constructor_x64_or(ctx, I64, v53, v54);
                let v56 = C::gpr_to_reg(ctx, v55);
                let v43 = RegMemImm::Imm { simm32: 0x1 };
                let v44 = &C::gpr_mem_imm_new(ctx, &v43);
                let v57 = C::gpr_new(ctx, v56);
                let v58 = &constructor_x64_test(ctx, &OperandSize::Size64, v44, v57);
                let v59 = &constructor_icmp_cond_result(ctx, v58, &CC::NZ);
                // Rule at src/isa/x64/inst.isle line 3512.
                return v59.clone();
            }
            _ => {}
        }
        let v17 = C::put_in_regs(ctx, arg1);
        let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x0);
        let v20 = C::put_in_regs(ctx, arg1);
        let v22 = constructor_value_regs_get_gpr(ctx, v20, 0x1);
        let v23 = C::put_in_regs(ctx, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::put_in_regs(ctx, arg2);
        let v26 = constructor_value_regs_get_gpr(ctx, v25, 0x1);
        let v60 = &C::gpr_to_gpr_mem_imm(ctx, v26);
        let v61 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v60, v22);
        let v62 = &C::intcc_without_eq(ctx, arg0);
        let v63 = &C::intcc_to_cc(ctx, v62);
        let v64 = &constructor_x64_setcc(ctx, v63);
        let v65 = &constructor_x64_setcc(ctx, &CC::Z);
        let v66 = &constructor_consumes_flags_concat(ctx, v64, v65);
        let v67 = constructor_with_flags(ctx, v61, v66);
        let v68 = C::value_regs_get(ctx, v67, 0x0);
        let v69 = C::value_regs_get(ctx, v67, 0x1);
        let v70 = &C::gpr_to_gpr_mem_imm(ctx, v24);
        let v71 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v70, v19);
        let v72 = &C::intcc_unsigned(ctx, arg0);
        let v73 = &C::intcc_to_cc(ctx, v72);
        let v74 = &constructor_x64_setcc(ctx, v73);
        let v75 = constructor_with_flags_reg(ctx, v71, v74);
        let v76 = C::gpr_new(ctx, v69);
        let v77 = &constructor_reg_to_gpr_mem_imm(ctx, v75);
        let v78 = constructor_x64_and(ctx, I64, v76, v77);
        let v79 = C::gpr_to_reg(ctx, v78);
        let v80 = C::gpr_new(ctx, v68);
        let v81 = &constructor_reg_to_gpr_mem_imm(ctx, v79);
        let v82 = constructor_x64_or(ctx, I64, v80, v81);
        let v83 = C::gpr_to_reg(ctx, v82);
        let v43 = RegMemImm::Imm { simm32: 0x1 };
        let v84 = &C::gpr_mem_imm_new(ctx, &v43);
        let v85 = C::gpr_new(ctx, v83);
        let v86 = &constructor_x64_test(ctx, &OperandSize::Size64, v84, v85);
        let v87 = &constructor_icmp_cond_result(ctx, v86, &CC::NZ);
        // Rule at src/isa/x64/inst.isle line 3527.
        return v87.clone();
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v11, v12);
        let v14 = &C::intcc_reverse(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src/isa/x64/inst.isle line 3485.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v6 = constructor_put_in_gpr(ctx, arg1);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src/isa/x64/inst.isle line 3478.
    return v9.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(ctx: &mut C, arg0: &FcmpCondResult) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src/isa/x64/inst.isle line 3562.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 3565.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src/isa/x64/inst.isle line 3574.
            return v33;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp_bool", "src/isa/x64/inst.isle line 3560"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v9 = FcmpCondResult::AndCondition {
                    producer: v6.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 3601.
                return v9;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v18 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 3617.
                return v18;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v20 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 3619.
                return v20;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v26 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 3629.
                return v26;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v27 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 3632.
                return v27;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v12 = FcmpCondResult::OrCondition {
                    producer: v6.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 3604.
                return v12;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v13 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NP,
                };
                // Rule at src/isa/x64/inst.isle line 3609.
                return v13;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v15 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 3613.
                return v15;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v14 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::P,
                };
                // Rule at src/isa/x64/inst.isle line 3611.
                return v14;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v16 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 3615.
                return v16;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v28 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 3635.
                return v28;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v25 = &constructor_x64_ucomis(ctx, arg1, arg2);
                let v29 = FcmpCondResult::Condition {
                    producer: v25.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 3638.
                return v29;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v22 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 3621.
                return v22;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = &constructor_x64_ucomis(ctx, arg2, arg1);
                let v24 = FcmpCondResult::Condition {
                    producer: v6.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 3623.
                return v24;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src/isa/x64/inst.isle line 3599"
    )
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/x64/inst.isle line 3651.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3655.
    return v10;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MachAtomicRmwOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3661.
    return v11;
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Gpr {
    match arg0 {
        F32 => {
            let v4 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg1, &OperandSize::Size32);
            // Rule at src/isa/x64/inst.isle line 3676.
            return v4;
        }
        F64 => {
            let v7 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg1, &OperandSize::Size64);
            // Rule at src/isa/x64/inst.isle line 3678.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_xmm_to_gpr", "src/isa/x64/inst.isle line 3675"
    )
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    match arg0 {
        I32 => {
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v5 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, v3, &OperandSize::Size32);
            // Rule at src/isa/x64/inst.isle line 3682.
            return v5;
        }
        I64 => {
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v8 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, v3, &OperandSize::Size64);
            // Rule at src/isa/x64/inst.isle line 3684.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_gpr_to_xmm", "src/isa/x64/inst.isle line 3681"
    )
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3690.
    return v6;
}

// Generated as internal constructor for term div_or_rem.
pub fn constructor_div_or_rem<C: Context>(
    ctx: &mut C,
    arg0: &DivOrRemKind,
    arg1: Value,
    arg2: Value,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v7 = C::emit_div_or_rem(ctx, arg0, v2, v4, v5, v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3701.
    return v8;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(ctx: &mut C) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3709.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/x64/inst.isle line 3713.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3761.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3768.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3775.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3851.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg { reg: v2 };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src/isa/x64/inst.isle line 3854.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3858.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(ctx: &mut C, arg0: WritableGpr) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3861.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3864.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3867.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(ctx: &mut C, arg0: WritableXmm) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3870.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3873.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3880.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3878.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3883.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3886.
    return v2.clone();
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg { src: arg0, dst: v1 };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 3893.
    return v4;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/x64/inst.isle line 3899.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 3912.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 3916.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v1482,
            args: ref v1483,
            flags: v1484,
        } => {
            if let &Opcode::AtomicCas = v1482 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1457 = C::ty_int(ctx, v3);
                        if let Some(v1458) = v1457 {
                            let v1485 = C::unpack_value_array_3(ctx, v1483);
                            let v1489 = constructor_put_in_gpr(ctx, v1485.1);
                            let v1490 = constructor_put_in_gpr(ctx, v1485.2);
                            let v1491 = C::zero_offset(ctx);
                            let v1492 = &constructor_to_amode(ctx, v1484, v1485.0, v1491);
                            let v1493 = &C::amode_to_synthetic_amode(ctx, v1492);
                            let v1494 = constructor_x64_cmpxchg(ctx, v5, v1489, v1490, v1493);
                            let v1495 = constructor_output_gpr(ctx, v1494);
                            // Rule at src/isa/x64/lower.isle line 2871.
                            return Some(v1495);
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1496,
            args: ref v1497,
            flags: v1498,
            op: ref v1499,
        } => {
            if let &Opcode::AtomicRmw = v1496 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1457 = C::ty_int(ctx, v3);
                        if let Some(v1458) = v1457 {
                            let v1503 = &C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, v1499);
                            let v1459 = C::zero_offset(ctx);
                            let v1500 = C::unpack_value_array_2(ctx, v1497);
                            let v1504 = &constructor_to_amode(ctx, v1498, v1500.0, v1459);
                            let v1505 = &C::amode_to_synthetic_amode(ctx, v1504);
                            let v1506 = constructor_put_in_gpr(ctx, v1500.1);
                            let v1507 =
                                constructor_x64_atomic_rmw_seq(ctx, v5, v1503, v1505, v1506);
                            let v1508 = constructor_output_gpr(ctx, v1507);
                            // Rule at src/isa/x64/lower.isle line 2887.
                            return Some(v1508);
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } => {
            match v33 {
                &Opcode::Swizzle => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v472 = constructor_put_in_xmm(ctx, v35.1);
                    let v1922 = C::swizzle_zero_mask(ctx);
                    let v1923 = constructor_x64_xmm_load_const(ctx, I8X16, v1922);
                    let v1924 = &C::xmm_to_xmm_mem(ctx, v1923);
                    let v1925 = constructor_x64_paddusb(ctx, v472, v1924);
                    let v204 = constructor_put_in_xmm(ctx, v35.0);
                    let v1926 = &C::xmm_to_xmm_mem(ctx, v1925);
                    let v1927 = constructor_x64_pshufb(ctx, v204, v1926);
                    let v1928 = constructor_output_xmm(ctx, v1927);
                    // Rule at src/isa/x64/lower.isle line 3570.
                    return Some(v1928);
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v624 = constructor_x64_pminsb(ctx, v65, v66);
                                let v625 = constructor_output_xmm(ctx, v624);
                                // Rule at src/isa/x64/lower.isle line 1437.
                                return Some(v625);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v626 = constructor_x64_pminsw(ctx, v65, v66);
                                let v627 = constructor_output_xmm(ctx, v626);
                                // Rule at src/isa/x64/lower.isle line 1440.
                                return Some(v627);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v628 = constructor_x64_pminsd(ctx, v65, v66);
                                let v629 = constructor_output_xmm(ctx, v628);
                                // Rule at src/isa/x64/lower.isle line 1443.
                                return Some(v629);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v613 = constructor_cmp_and_choose(ctx, v5, &CC::L, v35.0, v35.1);
                            let v614 = C::output(ctx, v613);
                            // Rule at src/isa/x64/lower.isle line 1418.
                            return Some(v614);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v636 = constructor_x64_pminub(ctx, v65, v66);
                                let v637 = constructor_output_xmm(ctx, v636);
                                // Rule at src/isa/x64/lower.isle line 1459.
                                return Some(v637);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v638 = constructor_x64_pminuw(ctx, v65, v66);
                                let v639 = constructor_output_xmm(ctx, v638);
                                // Rule at src/isa/x64/lower.isle line 1462.
                                return Some(v639);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v640 = constructor_x64_pminud(ctx, v65, v66);
                                let v641 = constructor_output_xmm(ctx, v640);
                                // Rule at src/isa/x64/lower.isle line 1465.
                                return Some(v641);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v607 = constructor_cmp_and_choose(ctx, v5, &CC::B, v35.0, v35.1);
                            let v608 = C::output(ctx, v607);
                            // Rule at src/isa/x64/lower.isle line 1412.
                            return Some(v608);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v618 = constructor_x64_pmaxsb(ctx, v65, v66);
                                let v619 = constructor_output_xmm(ctx, v618);
                                // Rule at src/isa/x64/lower.isle line 1426.
                                return Some(v619);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v620 = constructor_x64_pmaxsw(ctx, v65, v66);
                                let v621 = constructor_output_xmm(ctx, v620);
                                // Rule at src/isa/x64/lower.isle line 1429.
                                return Some(v621);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v622 = constructor_x64_pmaxsd(ctx, v65, v66);
                                let v623 = constructor_output_xmm(ctx, v622);
                                // Rule at src/isa/x64/lower.isle line 1432.
                                return Some(v623);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v616 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v35.0, v35.1);
                            let v617 = C::output(ctx, v616);
                            // Rule at src/isa/x64/lower.isle line 1421.
                            return Some(v617);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v630 = constructor_x64_pmaxub(ctx, v65, v66);
                                let v631 = constructor_output_xmm(ctx, v630);
                                // Rule at src/isa/x64/lower.isle line 1448.
                                return Some(v631);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v632 = constructor_x64_pmaxuw(ctx, v65, v66);
                                let v633 = constructor_output_xmm(ctx, v632);
                                // Rule at src/isa/x64/lower.isle line 1451.
                                return Some(v633);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v634 = constructor_x64_pmaxud(ctx, v65, v66);
                                let v635 = constructor_output_xmm(ctx, v634);
                                // Rule at src/isa/x64/lower.isle line 1454.
                                return Some(v635);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v610 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v35.0, v35.1);
                            let v611 = C::output(ctx, v610);
                            // Rule at src/isa/x64/lower.isle line 1415.
                            return Some(v611);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v331 = constructor_x64_pavgb(ctx, v65, v66);
                                        let v332 = constructor_output_xmm(ctx, v331);
                                        // Rule at src/isa/x64/lower.isle line 800.
                                        return Some(v332);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v333 = constructor_x64_pavgw(ctx, v65, v66);
                                        let v334 = constructor_output_xmm(ctx, v333);
                                        // Rule at src/isa/x64/lower.isle line 804.
                                        return Some(v334);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v105 = constructor_x64_paddusb(ctx, v65, v66);
                                        let v106 = constructor_output_xmm(ctx, v105);
                                        // Rule at src/isa/x64/lower.isle line 130.
                                        return Some(v106);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v107 = constructor_x64_paddusw(ctx, v65, v66);
                                        let v108 = constructor_output_xmm(ctx, v107);
                                        // Rule at src/isa/x64/lower.isle line 134.
                                        return Some(v108);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v101 = constructor_x64_paddsb(ctx, v65, v66);
                                        let v102 = constructor_output_xmm(ctx, v101);
                                        // Rule at src/isa/x64/lower.isle line 120.
                                        return Some(v102);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v103 = constructor_x64_paddsw(ctx, v65, v66);
                                        let v104 = constructor_output_xmm(ctx, v103);
                                        // Rule at src/isa/x64/lower.isle line 124.
                                        return Some(v104);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v131 = constructor_x64_psubusb(ctx, v65, v66);
                                        let v132 = constructor_output_xmm(ctx, v131);
                                        // Rule at src/isa/x64/lower.isle line 202.
                                        return Some(v132);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v133 = constructor_x64_psubusw(ctx, v65, v66);
                                        let v134 = constructor_output_xmm(ctx, v133);
                                        // Rule at src/isa/x64/lower.isle line 206.
                                        return Some(v134);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v127 = constructor_x64_psubsb(ctx, v65, v66);
                                        let v128 = constructor_output_xmm(ctx, v127);
                                        // Rule at src/isa/x64/lower.isle line 192.
                                        return Some(v128);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v129 = constructor_x64_psubsw(ctx, v65, v66);
                                        let v130 = constructor_output_xmm(ctx, v129);
                                        // Rule at src/isa/x64/lower.isle line 196.
                                        return Some(v130);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v77 = constructor_value_regs_get_gpr(ctx, v75, 0x0);
                            let v79 = constructor_value_regs_get_gpr(ctx, v75, 0x1);
                            let v80 = C::put_in_regs(ctx, v35.1);
                            let v81 = constructor_value_regs_get_gpr(ctx, v80, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v80, 0x1);
                            let v83 = &C::gpr_to_gpr_mem_imm(ctx, v81);
                            let v84 = &constructor_x64_add_with_flags_paired(ctx, I64, v77, v83);
                            let v85 = &C::gpr_to_gpr_mem_imm(ctx, v82);
                            let v86 = &constructor_x64_adc_paired(ctx, I64, v79, v85);
                            let v87 = constructor_with_flags(ctx, v84, v86);
                            let v88 = C::output(ctx, v87);
                            // Rule at src/isa/x64/lower.isle line 92.
                            return Some(v88);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v67 = constructor_x64_paddb(ctx, v65, v66);
                                        let v68 = constructor_output_xmm(ctx, v67);
                                        // Rule at src/isa/x64/lower.isle line 75.
                                        return Some(v68);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v69 = constructor_x64_paddw(ctx, v65, v66);
                                        let v70 = constructor_output_xmm(ctx, v69);
                                        // Rule at src/isa/x64/lower.isle line 79.
                                        return Some(v70);
                                    }
                                }
                                0x20 => {
                                    if v62.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v71 = constructor_x64_paddd(ctx, v65, v66);
                                        let v72 = constructor_output_xmm(ctx, v71);
                                        // Rule at src/isa/x64/lower.isle line 83.
                                        return Some(v72);
                                    }
                                }
                                0x40 => {
                                    if v62.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v73 = constructor_x64_paddq(ctx, v65, v66);
                                        let v74 = constructor_output_xmm(ctx, v73);
                                        // Rule at src/isa/x64/lower.isle line 87.
                                        return Some(v74);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v57) = v56 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v58 = &constructor_sink_load_to_gpr_mem_imm(ctx, v57);
                                let v59 = constructor_x64_add(ctx, v5, v48, v58);
                                let v60 = constructor_output_gpr(ctx, v59);
                                // Rule at src/isa/x64/lower.isle line 67.
                                return Some(v60);
                            }
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v54 = constructor_x64_add(ctx, v5, v38, v53);
                                let v55 = constructor_output_gpr(ctx, v54);
                                // Rule at src/isa/x64/lower.isle line 61.
                                return Some(v55);
                            }
                            let v46 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v47) = v46 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v49 = constructor_x64_add(ctx, v5, v48, v47);
                                let v50 = constructor_output_gpr(ctx, v49);
                                // Rule at src/isa/x64/lower.isle line 55.
                                return Some(v50);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v44 = constructor_x64_add(ctx, v5, v38, v43);
                                let v45 = constructor_output_gpr(ctx, v44);
                                // Rule at src/isa/x64/lower.isle line 51.
                                return Some(v45);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v40 = constructor_x64_add(ctx, v5, v38, v39);
                            let v41 = constructor_output_gpr(ctx, v40);
                            // Rule at src/isa/x64/lower.isle line 45.
                            return Some(v41);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v77 = constructor_value_regs_get_gpr(ctx, v75, 0x0);
                            let v79 = constructor_value_regs_get_gpr(ctx, v75, 0x1);
                            let v80 = C::put_in_regs(ctx, v35.1);
                            let v81 = constructor_value_regs_get_gpr(ctx, v80, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v80, 0x1);
                            let v83 = &C::gpr_to_gpr_mem_imm(ctx, v81);
                            let v123 = &constructor_x64_sub_with_flags_paired(ctx, I64, v77, v83);
                            let v85 = &C::gpr_to_gpr_mem_imm(ctx, v82);
                            let v124 = &constructor_x64_sbb_paired(ctx, I64, v79, v85);
                            let v125 = constructor_with_flags(ctx, v123, v124);
                            let v126 = C::output(ctx, v125);
                            // Rule at src/isa/x64/lower.isle line 177.
                            return Some(v126);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v115 = constructor_x64_psubb(ctx, v65, v66);
                                        let v116 = constructor_output_xmm(ctx, v115);
                                        // Rule at src/isa/x64/lower.isle line 160.
                                        return Some(v116);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v117 = constructor_x64_psubw(ctx, v65, v66);
                                        let v118 = constructor_output_xmm(ctx, v117);
                                        // Rule at src/isa/x64/lower.isle line 164.
                                        return Some(v118);
                                    }
                                }
                                0x20 => {
                                    if v62.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v119 = constructor_x64_psubd(ctx, v65, v66);
                                        let v120 = constructor_output_xmm(ctx, v119);
                                        // Rule at src/isa/x64/lower.isle line 168.
                                        return Some(v120);
                                    }
                                }
                                0x40 => {
                                    if v62.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v121 = constructor_x64_psubq(ctx, v65, v66);
                                        let v122 = constructor_output_xmm(ctx, v121);
                                        // Rule at src/isa/x64/lower.isle line 172.
                                        return Some(v122);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v113 = constructor_x64_sub(ctx, v5, v38, v53);
                                let v114 = constructor_output_gpr(ctx, v113);
                                // Rule at src/isa/x64/lower.isle line 153.
                                return Some(v114);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v111 = constructor_x64_sub(ctx, v5, v38, v43);
                                let v112 = constructor_output_gpr(ctx, v111);
                                // Rule at src/isa/x64/lower.isle line 148.
                                return Some(v112);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v109 = constructor_x64_sub(ctx, v5, v38, v39);
                            let v110 = constructor_output_gpr(ctx, v109);
                            // Rule at src/isa/x64/lower.isle line 143.
                            return Some(v110);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            if v62.0 == 0x40 {
                                if v62.1 == 0x2 {
                                    let v363 = C::avx512vl_enabled(ctx, v3);
                                    if v363 == true {
                                        let v364 = C::avx512dq_enabled(ctx, v3);
                                        if v364 == true {
                                            let v35 = C::unpack_value_array_2(ctx, v34);
                                            let v365 = &C::put_in_xmm_mem(ctx, v35.0);
                                            let v366 = constructor_put_in_xmm(ctx, v35.1);
                                            let v367 = constructor_x64_vpmullq(ctx, v365, v366);
                                            let v368 = constructor_output_xmm(ctx, v367);
                                            // Rule at src/isa/x64/lower.isle line 889.
                                            return Some(v368);
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v77 = constructor_value_regs_get_gpr(ctx, v75, 0x0);
                            let v79 = constructor_value_regs_get_gpr(ctx, v75, 0x1);
                            let v80 = C::put_in_regs(ctx, v35.1);
                            let v81 = constructor_value_regs_get_gpr(ctx, v80, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v80, 0x1);
                            let v345 = &C::gpr_to_gpr_mem_imm(ctx, v82);
                            let v346 = constructor_x64_mul(ctx, I64, v77, v345);
                            let v347 = &C::gpr_to_gpr_mem_imm(ctx, v81);
                            let v348 = constructor_x64_mul(ctx, I64, v79, v347);
                            let v349 = &C::gpr_to_gpr_mem_imm(ctx, v348);
                            let v350 = constructor_x64_add(ctx, I64, v346, v349);
                            let v351 = &C::gpr_to_gpr_mem(ctx, v81);
                            let v352 = constructor_mulhi_u(ctx, I64, v77, v351);
                            let v353 = constructor_value_regs_get_gpr(ctx, v352, 0x0);
                            let v354 = constructor_value_regs_get_gpr(ctx, v352, 0x1);
                            let v355 = &C::gpr_to_gpr_mem_imm(ctx, v354);
                            let v356 = constructor_x64_add(ctx, I64, v350, v355);
                            let v357 = constructor_value_gprs(ctx, v353, v356);
                            let v358 = C::output(ctx, v357);
                            // Rule at src/isa/x64/lower.isle line 854.
                            return Some(v358);
                        }
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v388 = C::def_inst(ctx, v35.0);
                                        if let Some(v389) = v388 {
                                            let v390 = &C::inst_data(ctx, v389);
                                            if let &InstructionData::Unary {
                                                opcode: ref v391,
                                                arg: v392,
                                            } = v390
                                            {
                                                match v391 {
                                                    &Opcode::SwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x8 {
                                                                if v395.1 == 0x10 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x8 {
                                                                                        if v405.1 == 0x10 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v439 = constructor_x64_pmovsxbw(ctx, v431);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v440 = constructor_x64_pmovsxbw(ctx, v434);
                                                                                            let v441 = &C::xmm_to_xmm_mem(ctx, v440);
                                                                                            let v442 = constructor_x64_pmullw(ctx, v439, v441);
                                                                                            let v443 = constructor_output_xmm(ctx, v442);
                                                                                            // Rule at src/isa/x64/lower.isle line 977.
                                                                                            return Some(v443);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x8 {
                                                                if v395.1 == 0x10 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x8 {
                                                                                        if v405.1 == 0x10 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v409 = &C::xmm_to_xmm_mem(ctx, v408);
                                                                                            let v412 = constructor_x64_palignr(ctx, v408, v409, 0x8, &OperandSize::Size32);
                                                                                            let v413 = &C::xmm_to_xmm_mem(ctx, v412);
                                                                                            let v414 = constructor_x64_pmovsxbw(ctx, v413);
                                                                                            let v415 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v416 = &C::xmm_to_xmm_mem(ctx, v415);
                                                                                            let v417 = constructor_x64_palignr(ctx, v415, v416, 0x8, &OperandSize::Size32);
                                                                                            let v418 = &C::xmm_to_xmm_mem(ctx, v417);
                                                                                            let v419 = constructor_x64_pmovsxbw(ctx, v418);
                                                                                            let v420 = &C::xmm_to_xmm_mem(ctx, v419);
                                                                                            let v421 = constructor_x64_pmullw(ctx, v414, v420);
                                                                                            let v422 = constructor_output_xmm(ctx, v421);
                                                                                            // Rule at src/isa/x64/lower.isle line 937.
                                                                                            return Some(v422);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x8 {
                                                                if v395.1 == 0x10 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x8 {
                                                                                        if v405.1 == 0x10 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v463 = constructor_x64_pmovzxbw(ctx, v431);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v464 = constructor_x64_pmovzxbw(ctx, v434);
                                                                                            let v465 = &C::xmm_to_xmm_mem(ctx, v464);
                                                                                            let v466 = constructor_x64_pmullw(ctx, v463, v465);
                                                                                            let v467 = constructor_output_xmm(ctx, v466);
                                                                                            // Rule at src/isa/x64/lower.isle line 1053.
                                                                                            return Some(v467);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x8 {
                                                                if v395.1 == 0x10 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x8 {
                                                                                        if v405.1 == 0x10 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v409 = &C::xmm_to_xmm_mem(ctx, v408);
                                                                                            let v412 = constructor_x64_palignr(ctx, v408, v409, 0x8, &OperandSize::Size32);
                                                                                            let v413 = &C::xmm_to_xmm_mem(ctx, v412);
                                                                                            let v452 = constructor_x64_pmovzxbw(ctx, v413);
                                                                                            let v415 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v416 = &C::xmm_to_xmm_mem(ctx, v415);
                                                                                            let v417 = constructor_x64_palignr(ctx, v415, v416, 0x8, &OperandSize::Size32);
                                                                                            let v418 = &C::xmm_to_xmm_mem(ctx, v417);
                                                                                            let v453 = constructor_x64_pmovzxbw(ctx, v418);
                                                                                            let v454 = &C::xmm_to_xmm_mem(ctx, v453);
                                                                                            let v455 = constructor_x64_pmullw(ctx, v452, v454);
                                                                                            let v456 = constructor_output_xmm(ctx, v455);
                                                                                            // Rule at src/isa/x64/lower.isle line 1013.
                                                                                            return Some(v456);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v359 = constructor_x64_pmullw(ctx, v65, v66);
                                        let v360 = constructor_output_xmm(ctx, v359);
                                        // Rule at src/isa/x64/lower.isle line 881.
                                        return Some(v360);
                                    }
                                }
                                0x20 => {
                                    if v62.1 == 0x4 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v388 = C::def_inst(ctx, v35.0);
                                        if let Some(v389) = v388 {
                                            let v390 = &C::inst_data(ctx, v389);
                                            if let &InstructionData::Unary {
                                                opcode: ref v391,
                                                arg: v392,
                                            } = v390
                                            {
                                                match v391 {
                                                    &Opcode::SwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x10 {
                                                                if v395.1 == 0x8 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x10 {
                                                                                        if v405.1 == 0x8 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v423 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v425 = constructor_x64_pmullw(ctx, v408, v424);
                                                                                            let v426 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v427 = constructor_x64_pmulhw(ctx, v408, v426);
                                                                                            let v428 = &C::xmm_to_xmm_mem(ctx, v427);
                                                                                            let v444 = constructor_x64_punpcklwd(ctx, v425, v428);
                                                                                            let v445 = constructor_output_xmm(ctx, v444);
                                                                                            // Rule at src/isa/x64/lower.isle line 987.
                                                                                            return Some(v445);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x10 {
                                                                if v395.1 == 0x8 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x10 {
                                                                                        if v405.1 == 0x8 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v423 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v425 = constructor_x64_pmullw(ctx, v408, v424);
                                                                                            let v426 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v427 = constructor_x64_pmulhw(ctx, v408, v426);
                                                                                            let v428 = &C::xmm_to_xmm_mem(ctx, v427);
                                                                                            let v429 = constructor_x64_punpckhwd(ctx, v425, v428);
                                                                                            let v430 = constructor_output_xmm(ctx, v429);
                                                                                            // Rule at src/isa/x64/lower.isle line 951.
                                                                                            return Some(v430);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x10 {
                                                                if v395.1 == 0x8 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x10 {
                                                                                        if v405.1 == 0x8 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v423 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v425 = constructor_x64_pmullw(ctx, v408, v424);
                                                                                            let v426 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v457 = constructor_x64_pmulhuw(ctx, v408, v426);
                                                                                            let v458 = &C::xmm_to_xmm_mem(ctx, v457);
                                                                                            let v468 = constructor_x64_punpcklwd(ctx, v425, v458);
                                                                                            let v469 = constructor_output_xmm(ctx, v468);
                                                                                            // Rule at src/isa/x64/lower.isle line 1063.
                                                                                            return Some(v469);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x10 {
                                                                if v395.1 == 0x8 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x10 {
                                                                                        if v405.1 == 0x8 {
                                                                                            let v408 = constructor_put_in_xmm(ctx, v392);
                                                                                            let v423 = constructor_put_in_xmm(ctx, v402);
                                                                                            let v424 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v425 = constructor_x64_pmullw(ctx, v408, v424);
                                                                                            let v426 = &C::xmm_to_xmm_mem(ctx, v423);
                                                                                            let v457 = constructor_x64_pmulhuw(ctx, v408, v426);
                                                                                            let v458 = &C::xmm_to_xmm_mem(ctx, v457);
                                                                                            let v459 = constructor_x64_punpckhwd(ctx, v425, v458);
                                                                                            let v460 = constructor_output_xmm(ctx, v459);
                                                                                            // Rule at src/isa/x64/lower.isle line 1027.
                                                                                            return Some(v460);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                        let v361 = constructor_x64_pmulld(ctx, v65, v66);
                                        let v362 = constructor_output_xmm(ctx, v361);
                                        // Rule at src/isa/x64/lower.isle line 884.
                                        return Some(v362);
                                    }
                                }
                                0x40 => {
                                    if v62.1 == 0x2 {
                                        let v35 = C::unpack_value_array_2(ctx, v34);
                                        let v388 = C::def_inst(ctx, v35.0);
                                        if let Some(v389) = v388 {
                                            let v390 = &C::inst_data(ctx, v389);
                                            if let &InstructionData::Unary {
                                                opcode: ref v391,
                                                arg: v392,
                                            } = v390
                                            {
                                                match v391 {
                                                    &Opcode::SwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x20 {
                                                                if v395.1 == 0x4 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x20 {
                                                                                        if v405.1 == 0x4 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v447 = constructor_x64_pshufd(ctx, v431, 0x50, &OperandSize::Size32);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v448 = constructor_x64_pshufd(ctx, v434, 0x50, &OperandSize::Size32);
                                                                                            let v449 = &C::xmm_to_xmm_mem(ctx, v448);
                                                                                            let v450 = constructor_x64_pmuldq(ctx, v447, v449);
                                                                                            let v451 = constructor_output_xmm(ctx, v450);
                                                                                            // Rule at src/isa/x64/lower.isle line 999.
                                                                                            return Some(v451);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x20 {
                                                                if v395.1 == 0x4 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::SwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x20 {
                                                                                        if v405.1 == 0x4 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v433 = constructor_x64_pshufd(ctx, v431, 0xFA, &OperandSize::Size32);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v435 = constructor_x64_pshufd(ctx, v434, 0xFA, &OperandSize::Size32);
                                                                                            let v436 = &C::xmm_to_xmm_mem(ctx, v435);
                                                                                            let v437 = constructor_x64_pmuldq(ctx, v433, v436);
                                                                                            let v438 = constructor_output_xmm(ctx, v437);
                                                                                            // Rule at src/isa/x64/lower.isle line 963.
                                                                                            return Some(v438);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x20 {
                                                                if v395.1 == 0x4 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenLow = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x20 {
                                                                                        if v405.1 == 0x4 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v447 = constructor_x64_pshufd(ctx, v431, 0x50, &OperandSize::Size32);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v448 = constructor_x64_pshufd(ctx, v434, 0x50, &OperandSize::Size32);
                                                                                            let v449 = &C::xmm_to_xmm_mem(ctx, v448);
                                                                                            let v470 = constructor_x64_pmuludq(ctx, v447, v449);
                                                                                            let v471 = constructor_output_xmm(ctx, v470);
                                                                                            // Rule at src/isa/x64/lower.isle line 1075.
                                                                                            return Some(v471);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v393 = C::value_type(ctx, v392);
                                                        let v394 = C::multi_lane(ctx, v393);
                                                        if let Some(v395) = v394 {
                                                            if v395.0 == 0x20 {
                                                                if v395.1 == 0x4 {
                                                                    let v398 =
                                                                        C::def_inst(ctx, v35.1);
                                                                    if let Some(v399) = v398 {
                                                                        let v400 = &C::inst_data(
                                                                            ctx, v399,
                                                                        );
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v401,
                                                                            arg: v402,
                                                                        } = v400 {
                                                                            if let &Opcode::UwidenHigh = v401 {
                                                                                let v403 = C::value_type(ctx, v402);
                                                                                let v404 = C::multi_lane(ctx, v403);
                                                                                if let Some(v405) = v404 {
                                                                                    if v405.0 == 0x20 {
                                                                                        if v405.1 == 0x4 {
                                                                                            let v431 = &C::put_in_xmm_mem(ctx, v392);
                                                                                            let v433 = constructor_x64_pshufd(ctx, v431, 0xFA, &OperandSize::Size32);
                                                                                            let v434 = &C::put_in_xmm_mem(ctx, v402);
                                                                                            let v435 = constructor_x64_pshufd(ctx, v434, 0xFA, &OperandSize::Size32);
                                                                                            let v436 = &C::xmm_to_xmm_mem(ctx, v435);
                                                                                            let v461 = constructor_x64_pmuludq(ctx, v433, v436);
                                                                                            let v462 = constructor_output_xmm(ctx, v461);
                                                                                            // Rule at src/isa/x64/lower.isle line 1039.
                                                                                            return Some(v462);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                                        let v366 = constructor_put_in_xmm(ctx, v35.1);
                                        let v370 = RegMemImm::Imm { simm32: 0x20 };
                                        let v371 = &constructor_mov_rmi_to_xmm(ctx, &v370);
                                        let v372 = constructor_x64_psrlq(ctx, v65, v371);
                                        let v373 = &C::xmm_to_xmm_mem(ctx, v366);
                                        let v374 = constructor_x64_pmuludq(ctx, v372, v373);
                                        let v375 = &constructor_mov_rmi_to_xmm(ctx, &v370);
                                        let v376 = constructor_x64_psrlq(ctx, v366, v375);
                                        let v377 = &C::xmm_to_xmm_mem(ctx, v376);
                                        let v378 = constructor_x64_pmuludq(ctx, v65, v377);
                                        let v379 = &C::xmm_to_xmm_mem(ctx, v378);
                                        let v380 = constructor_x64_paddq(ctx, v374, v379);
                                        let v381 = &constructor_mov_rmi_to_xmm(ctx, &v370);
                                        let v382 = constructor_x64_psllq(ctx, v380, v381);
                                        let v383 = &C::xmm_to_xmm_mem(ctx, v366);
                                        let v384 = constructor_x64_pmuludq(ctx, v65, v383);
                                        let v385 = &C::xmm_to_xmm_mem(ctx, v382);
                                        let v386 = constructor_x64_paddq(ctx, v384, v385);
                                        let v387 = constructor_output_xmm(ctx, v386);
                                        // Rule at src/isa/x64/lower.isle line 915.
                                        return Some(v387);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v56 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v57) = v56 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v58 = &constructor_sink_load_to_gpr_mem_imm(ctx, v57);
                                let v343 = constructor_x64_mul(ctx, v5, v48, v58);
                                let v344 = constructor_output_gpr(ctx, v343);
                                // Rule at src/isa/x64/lower.isle line 834.
                                return Some(v344);
                            }
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v341 = constructor_x64_mul(ctx, v5, v38, v53);
                                let v342 = constructor_output_gpr(ctx, v341);
                                // Rule at src/isa/x64/lower.isle line 828.
                                return Some(v342);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v337 = constructor_x64_mul(ctx, v5, v38, v43);
                                let v338 = constructor_output_gpr(ctx, v337);
                                // Rule at src/isa/x64/lower.isle line 818.
                                return Some(v338);
                            }
                            let v46 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v47) = v46 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v339 = constructor_x64_mul(ctx, v5, v48, v47);
                                let v340 = constructor_output_gpr(ctx, v339);
                                // Rule at src/isa/x64/lower.isle line 822.
                                return Some(v340);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v335 = constructor_x64_mul(ctx, v5, v38, v39);
                            let v336 = constructor_output_gpr(ctx, v335);
                            // Rule at src/isa/x64/lower.isle line 813.
                            return Some(v336);
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1714 = C::value_type(ctx, v35.0);
                    match v1714 {
                        I16 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1850 = constructor_mul_hi(ctx, I16, false, v38, v1849);
                            let v1851 = constructor_value_regs_get_gpr(ctx, v1850, 0x1);
                            let v1852 = constructor_output_gpr(ctx, v1851);
                            // Rule at src/isa/x64/lower.isle line 3481.
                            return Some(v1852);
                        }
                        I32 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1853 = constructor_mul_hi(ctx, I32, false, v38, v1849);
                            let v1854 = constructor_value_regs_get_gpr(ctx, v1853, 0x1);
                            let v1855 = constructor_output_gpr(ctx, v1854);
                            // Rule at src/isa/x64/lower.isle line 3486.
                            return Some(v1855);
                        }
                        I64 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1856 = constructor_mul_hi(ctx, I64, false, v38, v1849);
                            let v1857 = constructor_value_regs_get_gpr(ctx, v1856, 0x1);
                            let v1858 = constructor_output_gpr(ctx, v1857);
                            // Rule at src/isa/x64/lower.isle line 3491.
                            return Some(v1858);
                        }
                        _ => {}
                    }
                }
                &Opcode::Smulhi => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1714 = C::value_type(ctx, v35.0);
                    match v1714 {
                        I16 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1859 = constructor_mul_hi(ctx, I16, true, v38, v1849);
                            let v1860 = constructor_value_regs_get_gpr(ctx, v1859, 0x1);
                            let v1861 = constructor_output_gpr(ctx, v1860);
                            // Rule at src/isa/x64/lower.isle line 3498.
                            return Some(v1861);
                        }
                        I32 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1862 = constructor_mul_hi(ctx, I32, true, v38, v1849);
                            let v1863 = constructor_value_regs_get_gpr(ctx, v1862, 0x1);
                            let v1864 = constructor_output_gpr(ctx, v1863);
                            // Rule at src/isa/x64/lower.isle line 3503.
                            return Some(v1864);
                        }
                        I64 => {
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v1849 = &constructor_put_in_gpr_mem(ctx, v35.1);
                            let v1865 = constructor_mul_hi(ctx, I64, true, v38, v1849);
                            let v1866 = constructor_value_regs_get_gpr(ctx, v1865, 0x1);
                            let v1867 = constructor_output_gpr(ctx, v1866);
                            // Rule at src/isa/x64/lower.isle line 3508.
                            return Some(v1867);
                        }
                        _ => {}
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1714 = C::value_type(ctx, v35.0);
                    if v1714 == I16X8 {
                        let v65 = constructor_put_in_xmm(ctx, v35.0);
                        let v366 = constructor_put_in_xmm(ctx, v35.1);
                        let v2031 = C::sqmul_round_sat_mask(ctx);
                        let v2032 = constructor_x64_xmm_load_const(ctx, I16X8, v2031);
                        let v373 = &C::xmm_to_xmm_mem(ctx, v366);
                        let v2033 = constructor_x64_pmulhrsw(ctx, v65, v373);
                        let v2034 = &C::xmm_to_xmm_mem(ctx, v2033);
                        let v2035 = constructor_x64_pcmpeqw(ctx, v2032, v2034);
                        let v2036 = &C::xmm_to_xmm_mem(ctx, v2035);
                        let v2037 = constructor_x64_pxor(ctx, v2033, v2036);
                        let v2038 = constructor_output_xmm(ctx, v2037);
                        // Rule at src/isa/x64/lower.isle line 3744.
                        return Some(v2038);
                    }
                }
                &Opcode::Udiv => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1838 =
                        constructor_div_or_rem(ctx, &DivOrRemKind::UnsignedDiv, v35.0, v35.1);
                    let v1839 = constructor_output_gpr(ctx, v1838);
                    // Rule at src/isa/x64/lower.isle line 3461.
                    return Some(v1839);
                }
                &Opcode::Sdiv => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1841 = constructor_div_or_rem(ctx, &DivOrRemKind::SignedDiv, v35.0, v35.1);
                    let v1842 = constructor_output_gpr(ctx, v1841);
                    // Rule at src/isa/x64/lower.isle line 3466.
                    return Some(v1842);
                }
                &Opcode::Urem => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1844 =
                        constructor_div_or_rem(ctx, &DivOrRemKind::UnsignedRem, v35.0, v35.1);
                    let v1845 = constructor_output_gpr(ctx, v1844);
                    // Rule at src/isa/x64/lower.isle line 3471.
                    return Some(v1845);
                }
                &Opcode::Srem => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1847 = constructor_div_or_rem(ctx, &DivOrRemKind::SignedRem, v35.0, v35.1);
                    let v1848 = constructor_output_gpr(ctx, v1847);
                    // Rule at src/isa/x64/lower.isle line 3476.
                    return Some(v1848);
                }
                &Opcode::IaddCout => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v89 = C::value_type(ctx, v35.1);
                    let v90 = C::ty_32_or_64(ctx, v89);
                    if let Some(v91) = v90 {
                        let v38 = constructor_put_in_gpr(ctx, v35.0);
                        let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                        let v92 = &constructor_x64_add_with_flags_paired(ctx, v91, v38, v39);
                        let v94 = &constructor_x64_setcc_paired(ctx, &CC::O);
                        let v95 = constructor_with_flags(ctx, v92, v94);
                        let v96 = C::value_regs_get(ctx, v95, 0x0);
                        let v97 = C::value_reg(ctx, v96);
                        let v98 = C::value_regs_get(ctx, v95, 0x1);
                        let v99 = C::value_reg(ctx, v98);
                        let v100 = C::output_pair(ctx, v97, v99);
                        // Rule at src/isa/x64/lower.isle line 112.
                        return Some(v100);
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v77 = constructor_value_regs_get_gpr(ctx, v75, 0x0);
                            let v79 = constructor_value_regs_get_gpr(ctx, v75, 0x1);
                            let v80 = C::put_in_regs(ctx, v35.1);
                            let v81 = constructor_value_regs_get_gpr(ctx, v80, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v80, 0x1);
                            let v83 = &C::gpr_to_gpr_mem_imm(ctx, v81);
                            let v153 = constructor_x64_and(ctx, I64, v77, v83);
                            let v85 = &C::gpr_to_gpr_mem_imm(ctx, v82);
                            let v154 = constructor_x64_and(ctx, I64, v79, v85);
                            let v155 = constructor_value_gprs(ctx, v153, v154);
                            let v156 = C::output(ctx, v155);
                            // Rule at src/isa/x64/lower.isle line 262.
                            return Some(v156);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v151 = constructor_sse_and(ctx, v3, v65, v66);
                            let v152 = constructor_output_xmm(ctx, v151);
                            // Rule at src/isa/x64/lower.isle line 256.
                            return Some(v152);
                        }
                        let v147 = C::ty_scalar_float(ctx, v3);
                        if let Some(v148) = v147 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v149 = constructor_sse_and(ctx, v148, v65, v66);
                            let v150 = constructor_output_xmm(ctx, v149);
                            // Rule at src/isa/x64/lower.isle line 244.
                            return Some(v150);
                        }
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v46 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v47) = v46 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v145 = constructor_x64_and(ctx, v3, v48, v47);
                                let v146 = constructor_output_gpr(ctx, v145);
                                // Rule at src/isa/x64/lower.isle line 238.
                                return Some(v146);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v143 = constructor_x64_and(ctx, v3, v38, v43);
                                let v144 = constructor_output_gpr(ctx, v143);
                                // Rule at src/isa/x64/lower.isle line 234.
                                return Some(v144);
                            }
                            let v56 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v57) = v56 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v58 = &constructor_sink_load_to_gpr_mem_imm(ctx, v57);
                                let v141 = constructor_x64_and(ctx, v3, v48, v58);
                                let v142 = constructor_output_gpr(ctx, v141);
                                // Rule at src/isa/x64/lower.isle line 226.
                                return Some(v142);
                            }
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v139 = constructor_x64_and(ctx, v3, v38, v53);
                                let v140 = constructor_output_gpr(ctx, v139);
                                // Rule at src/isa/x64/lower.isle line 221.
                                return Some(v140);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v137 = constructor_x64_and(ctx, v3, v38, v39);
                            let v138 = constructor_output_gpr(ctx, v137);
                            // Rule at src/isa/x64/lower.isle line 215.
                            return Some(v138);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v171 = C::put_in_regs(ctx, v35.1);
                            let v172 = constructor_or_i128(ctx, v75, v171);
                            let v173 = C::output(ctx, v172);
                            // Rule at src/isa/x64/lower.isle line 332.
                            return Some(v173);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v169 = constructor_sse_or(ctx, v3, v65, v66);
                            let v170 = constructor_output_xmm(ctx, v169);
                            // Rule at src/isa/x64/lower.isle line 317.
                            return Some(v170);
                        }
                        let v147 = C::ty_scalar_float(ctx, v3);
                        if let Some(v148) = v147 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v167 = constructor_sse_or(ctx, v148, v65, v66);
                            let v168 = constructor_output_xmm(ctx, v167);
                            // Rule at src/isa/x64/lower.isle line 305.
                            return Some(v168);
                        }
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v46 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v47) = v46 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v165 = constructor_x64_or(ctx, v3, v48, v47);
                                let v166 = constructor_output_gpr(ctx, v165);
                                // Rule at src/isa/x64/lower.isle line 299.
                                return Some(v166);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v163 = constructor_x64_or(ctx, v3, v38, v43);
                                let v164 = constructor_output_gpr(ctx, v163);
                                // Rule at src/isa/x64/lower.isle line 295.
                                return Some(v164);
                            }
                            let v56 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v57) = v56 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v58 = &constructor_sink_load_to_gpr_mem_imm(ctx, v57);
                                let v161 = constructor_x64_or(ctx, v3, v48, v58);
                                let v162 = constructor_output_gpr(ctx, v161);
                                // Rule at src/isa/x64/lower.isle line 288.
                                return Some(v162);
                            }
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v159 = constructor_x64_or(ctx, v3, v38, v53);
                                let v160 = constructor_output_gpr(ctx, v159);
                                // Rule at src/isa/x64/lower.isle line 283.
                                return Some(v160);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v157 = constructor_x64_or(ctx, v3, v38, v39);
                            let v158 = constructor_output_gpr(ctx, v157);
                            // Rule at src/isa/x64/lower.isle line 277.
                            return Some(v158);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v77 = constructor_value_regs_get_gpr(ctx, v75, 0x0);
                            let v79 = constructor_value_regs_get_gpr(ctx, v75, 0x1);
                            let v80 = C::put_in_regs(ctx, v35.1);
                            let v81 = constructor_value_regs_get_gpr(ctx, v80, 0x0);
                            let v82 = constructor_value_regs_get_gpr(ctx, v80, 0x1);
                            let v83 = &C::gpr_to_gpr_mem_imm(ctx, v81);
                            let v188 = constructor_x64_xor(ctx, I64, v77, v83);
                            let v85 = &C::gpr_to_gpr_mem_imm(ctx, v82);
                            let v189 = constructor_x64_xor(ctx, I64, v79, v85);
                            let v190 = constructor_value_gprs(ctx, v188, v189);
                            let v191 = C::output(ctx, v190);
                            // Rule at src/isa/x64/lower.isle line 378.
                            return Some(v191);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v186 = constructor_sse_xor(ctx, v3, v65, v66);
                            let v187 = constructor_output_xmm(ctx, v186);
                            // Rule at src/isa/x64/lower.isle line 373.
                            return Some(v187);
                        }
                        let v147 = C::ty_scalar_float(ctx, v3);
                        if let Some(v148) = v147 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v184 = constructor_sse_xor(ctx, v148, v65, v66);
                            let v185 = constructor_output_xmm(ctx, v184);
                            // Rule at src/isa/x64/lower.isle line 368.
                            return Some(v185);
                        }
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v46 = &C::simm32_from_value(ctx, v35.0);
                            if let Some(v47) = v46 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v182 = constructor_x64_xor(ctx, v3, v48, v47);
                                let v183 = constructor_output_gpr(ctx, v182);
                                // Rule at src/isa/x64/lower.isle line 362.
                                return Some(v183);
                            }
                            let v42 = &C::simm32_from_value(ctx, v35.1);
                            if let Some(v43) = v42 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v180 = constructor_x64_xor(ctx, v3, v38, v43);
                                let v181 = constructor_output_gpr(ctx, v180);
                                // Rule at src/isa/x64/lower.isle line 358.
                                return Some(v181);
                            }
                            let v56 = &C::sinkable_load(ctx, v35.0);
                            if let Some(v57) = v56 {
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v58 = &constructor_sink_load_to_gpr_mem_imm(ctx, v57);
                                let v178 = constructor_x64_xor(ctx, v3, v48, v58);
                                let v179 = constructor_output_gpr(ctx, v178);
                                // Rule at src/isa/x64/lower.isle line 351.
                                return Some(v179);
                            }
                            let v51 = &C::sinkable_load(ctx, v35.1);
                            if let Some(v52) = v51 {
                                let v38 = constructor_put_in_gpr(ctx, v35.0);
                                let v53 = &constructor_sink_load_to_gpr_mem_imm(ctx, v52);
                                let v176 = constructor_x64_xor(ctx, v3, v38, v53);
                                let v177 = constructor_output_gpr(ctx, v176);
                                // Rule at src/isa/x64/lower.isle line 346.
                                return Some(v177);
                            }
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v39 = &constructor_put_in_gpr_mem_imm(ctx, v35.1);
                            let v174 = constructor_x64_xor(ctx, v3, v38, v39);
                            let v175 = constructor_output_gpr(ctx, v174);
                            // Rule at src/isa/x64/lower.isle line 340.
                            return Some(v175);
                        }
                    }
                }
                &Opcode::BandNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v476 = C::use_bmi1(ctx, v3);
                            match v476 {
                                true => {
                                    let v35 = C::unpack_value_array_2(ctx, v34);
                                    let v48 = constructor_put_in_gpr(ctx, v35.1);
                                    let v481 = constructor_put_in_gpr(ctx, v35.0);
                                    let v482 = constructor_x64_andn(ctx, v3, v48, v481);
                                    let v483 = constructor_output_gpr(ctx, v482);
                                    // Rule at src/isa/x64/lower.isle line 1112.
                                    return Some(v483);
                                }
                                false => {
                                    let v35 = C::unpack_value_array_2(ctx, v34);
                                    let v38 = constructor_put_in_gpr(ctx, v35.0);
                                    let v246 = constructor_put_in_gpr(ctx, v35.1);
                                    let v477 = constructor_x64_not(ctx, v3, v246);
                                    let v478 = &C::gpr_to_gpr_mem_imm(ctx, v477);
                                    let v479 = constructor_x64_and(ctx, v3, v38, v478);
                                    let v480 = constructor_output_gpr(ctx, v479);
                                    // Rule at src/isa/x64/lower.isle line 1106.
                                    return Some(v480);
                                }
                                _ => {}
                            }
                        }
                        let v35 = C::unpack_value_array_2(ctx, v34);
                        let v472 = constructor_put_in_xmm(ctx, v35.1);
                        let v473 = &C::put_in_xmm_mem(ctx, v35.0);
                        let v474 = constructor_sse_and_not(ctx, v3, v472, v473);
                        let v475 = constructor_output_xmm(ctx, v474);
                        // Rule at src/isa/x64/lower.isle line 1102.
                        return Some(v475);
                    }
                }
                &Opcode::BorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v246 = constructor_put_in_gpr(ctx, v35.1);
                            let v477 = constructor_x64_not(ctx, v3, v246);
                            let v478 = &C::gpr_to_gpr_mem_imm(ctx, v477);
                            let v486 = constructor_x64_or(ctx, v3, v38, v478);
                            let v487 = constructor_output_gpr(ctx, v486);
                            // Rule at src/isa/x64/lower.isle line 1128.
                            return Some(v487);
                        }
                    }
                }
                &Opcode::BxorNot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v246 = constructor_put_in_gpr(ctx, v35.1);
                            let v477 = constructor_x64_not(ctx, v3, v246);
                            let v478 = &C::gpr_to_gpr_mem_imm(ctx, v477);
                            let v484 = constructor_x64_xor(ctx, v3, v38, v478);
                            let v485 = constructor_output_gpr(ctx, v484);
                            // Rule at src/isa/x64/lower.isle line 1120.
                            return Some(v485);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v280 = constructor_lo_gpr(ctx, v35.1);
                            let v281 = constructor_shl_i128(ctx, v75, v280);
                            let v283 = constructor_imm(ctx, I64, 0x80);
                            let v284 = C::gpr_new(ctx, v283);
                            let v285 = &C::gpr_to_gpr_mem_imm(ctx, v280);
                            let v286 = constructor_x64_sub(ctx, I64, v284, v285);
                            let v287 = constructor_shr_i128(ctx, v75, v286);
                            let v288 = constructor_or_i128(ctx, v281, v287);
                            let v289 = C::output(ctx, v288);
                            // Rule at src/isa/x64/lower.isle line 737.
                            return Some(v289);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v192 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v278 = constructor_x64_rotl(ctx, v5, v38, v192);
                            let v279 = constructor_output_gpr(ctx, v278);
                            // Rule at src/isa/x64/lower.isle line 731.
                            return Some(v279);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v75 = C::put_in_regs(ctx, v35.0);
                            let v280 = constructor_lo_gpr(ctx, v35.1);
                            let v292 = constructor_shr_i128(ctx, v75, v280);
                            let v283 = constructor_imm(ctx, I64, 0x80);
                            let v284 = C::gpr_new(ctx, v283);
                            let v285 = &C::gpr_to_gpr_mem_imm(ctx, v280);
                            let v286 = constructor_x64_sub(ctx, I64, v284, v285);
                            let v293 = constructor_shl_i128(ctx, v75, v286);
                            let v294 = constructor_or_i128(ctx, v292, v293);
                            let v295 = C::output(ctx, v294);
                            // Rule at src/isa/x64/lower.isle line 758.
                            return Some(v295);
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v192 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v290 = constructor_x64_rotr(ctx, v5, v38, v192);
                            let v291 = constructor_output_gpr(ctx, v290);
                            // Rule at src/isa/x64/lower.isle line 752.
                            return Some(v291);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v195 = constructor_lo_gpr(ctx, v35.1);
                                let v196 = C::put_in_regs(ctx, v35.0);
                                let v197 = constructor_shl_i128(ctx, v196, v195);
                                let v198 = C::output(ctx, v197);
                                // Rule at src/isa/x64/lower.isle line 431.
                                return Some(v198);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v207 = constructor_x64_psllw(ctx, v204, v206);
                                let v208 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v209 = &constructor_ishl_i8x16_mask(ctx, v208);
                                let v212 = constructor_x64_load(ctx, I8X16, v209, &ExtKind::None);
                                let v213 = RegMem::Reg { reg: v212 };
                                let v214 = &C::reg_mem_to_xmm_mem(ctx, &v213);
                                let v215 = constructor_sse_and(ctx, I8X16, v207, v214);
                                let v216 = constructor_output_xmm(ctx, v215);
                                // Rule at src/isa/x64/lower.isle line 443.
                                return Some(v216);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v207 = constructor_x64_psllw(ctx, v204, v206);
                                let v217 = constructor_output_xmm(ctx, v207);
                                // Rule at src/isa/x64/lower.isle line 487.
                                return Some(v217);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v218 = constructor_x64_pslld(ctx, v204, v206);
                                let v219 = constructor_output_xmm(ctx, v218);
                                // Rule at src/isa/x64/lower.isle line 491.
                                return Some(v219);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v220 = constructor_x64_psllq(ctx, v204, v206);
                                let v221 = constructor_output_xmm(ctx, v220);
                                // Rule at src/isa/x64/lower.isle line 495.
                                return Some(v221);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v38 = constructor_put_in_gpr(ctx, v35.0);
                            let v192 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v193 = constructor_x64_shl(ctx, v5, v38, v192);
                            let v194 = constructor_output_gpr(ctx, v193);
                            // Rule at src/isa/x64/lower.isle line 392.
                            return Some(v194);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v195 = constructor_lo_gpr(ctx, v35.1);
                                let v196 = C::put_in_regs(ctx, v35.0);
                                let v226 = constructor_shr_i128(ctx, v196, v195);
                                let v227 = C::output(ctx, v226);
                                // Rule at src/isa/x64/lower.isle line 540.
                                return Some(v227);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v228 = constructor_x64_psrlw(ctx, v204, v206);
                                let v208 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v229 = &constructor_ushr_i8x16_mask(ctx, v208);
                                let v230 = constructor_x64_load(ctx, I8X16, v229, &ExtKind::None);
                                let v231 = RegMem::Reg { reg: v230 };
                                let v232 = &C::reg_mem_to_xmm_mem(ctx, &v231);
                                let v233 = constructor_sse_and(ctx, I8X16, v228, v232);
                                let v234 = constructor_output_xmm(ctx, v233);
                                // Rule at src/isa/x64/lower.isle line 550.
                                return Some(v234);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v228 = constructor_x64_psrlw(ctx, v204, v206);
                                let v235 = constructor_output_xmm(ctx, v228);
                                // Rule at src/isa/x64/lower.isle line 597.
                                return Some(v235);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v236 = constructor_x64_psrld(ctx, v204, v206);
                                let v237 = constructor_output_xmm(ctx, v236);
                                // Rule at src/isa/x64/lower.isle line 601.
                                return Some(v237);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v238 = constructor_x64_psrlq(ctx, v204, v206);
                                let v239 = constructor_output_xmm(ctx, v238);
                                // Rule at src/isa/x64/lower.isle line 605.
                                return Some(v239);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v223 = constructor_extend_to_gpr(ctx, v35.0, v5, &ExtendKind::Zero);
                            let v192 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v224 = constructor_x64_shr(ctx, v5, v223, v192);
                            let v225 = constructor_output_gpr(ctx, v224);
                            // Rule at src/isa/x64/lower.isle line 503.
                            return Some(v225);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v195 = constructor_lo_gpr(ctx, v35.1);
                                let v196 = C::put_in_regs(ctx, v35.0);
                                let v244 = constructor_sar_i128(ctx, v196, v195);
                                let v245 = C::output(ctx, v244);
                                // Rule at src/isa/x64/lower.isle line 650.
                                return Some(v245);
                            }
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v246 = constructor_put_in_gpr(ctx, v35.1);
                                let v247 = C::shift_mask(ctx, v3);
                                let v248 = RegMemImm::Imm { simm32: v247 };
                                let v249 = &C::gpr_mem_imm_new(ctx, &v248);
                                let v250 = constructor_x64_and(ctx, I64, v246, v249);
                                let v251 = C::gpr_to_reg(ctx, v250);
                                let v252 = &C::xmm_to_xmm_mem(ctx, v65);
                                let v253 = constructor_x64_punpcklbw(ctx, v65, v252);
                                let v254 = &C::xmm_to_xmm_mem(ctx, v65);
                                let v255 = constructor_x64_punpckhbw(ctx, v65, v254);
                                let v256 = &C::reg_to_reg_mem_imm(ctx, v251);
                                let v89 = C::value_type(ctx, v35.1);
                                let v257 = &constructor_sshr_i8x16_bigger_shift(ctx, v89, v256);
                                let v258 = constructor_x64_psraw(ctx, v253, v257);
                                let v259 = constructor_x64_psraw(ctx, v255, v257);
                                let v260 = &C::xmm_to_xmm_mem(ctx, v259);
                                let v261 = constructor_x64_packsswb(ctx, v258, v260);
                                let v262 = constructor_output_xmm(ctx, v261);
                                // Rule at src/isa/x64/lower.isle line 671.
                                return Some(v262);
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v263 = constructor_x64_psraw(ctx, v204, v206);
                                let v264 = constructor_output_xmm(ctx, v263);
                                // Rule at src/isa/x64/lower.isle line 700.
                                return Some(v264);
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v48 = constructor_put_in_gpr(ctx, v35.1);
                                let v199 = C::shift_mask(ctx, v3);
                                let v200 = RegMemImm::Imm { simm32: v199 };
                                let v201 = &C::gpr_mem_imm_new(ctx, &v200);
                                let v202 = constructor_x64_and(ctx, I64, v48, v201);
                                let v203 = C::gpr_to_reg(ctx, v202);
                                let v204 = constructor_put_in_xmm(ctx, v35.0);
                                let v205 = &C::reg_to_reg_mem_imm(ctx, v203);
                                let v206 = &constructor_mov_rmi_to_xmm(ctx, v205);
                                let v265 = constructor_x64_psrad(ctx, v204, v206);
                                let v266 = constructor_output_xmm(ctx, v265);
                                // Rule at src/isa/x64/lower.isle line 704.
                                return Some(v266);
                            }
                            I64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v268 = constructor_x64_pextrd(ctx, I64, v65, 0x0);
                                let v270 = constructor_x64_pextrd(ctx, I64, v65, 0x1);
                                let v271 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, I64);
                                let v272 = constructor_x64_sar(ctx, I64, v268, v271);
                                let v273 = constructor_x64_sar(ctx, I64, v270, v271);
                                let v274 = &C::gpr_to_gpr_mem(ctx, v272);
                                let v275 = &C::gpr_to_gpr_mem(ctx, v273);
                                let v276 = constructor_make_i64x2_from_lanes(ctx, v274, v275);
                                let v277 = constructor_output_xmm(ctx, v276);
                                // Rule at src/isa/x64/lower.isle line 716.
                                return Some(v277);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v241 = constructor_extend_to_gpr(ctx, v35.0, v5, &ExtendKind::Sign);
                            let v192 = &constructor_put_masked_in_imm8_gpr(ctx, v35.1, v5);
                            let v242 = constructor_x64_sar(ctx, v5, v241, v192);
                            let v243 = constructor_output_gpr(ctx, v242);
                            // Rule at src/isa/x64/lower.isle line 613.
                            return Some(v243);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1100 = constructor_x64_addss(ctx, v65, v66);
                                let v1101 = constructor_output_xmm(ctx, v1100);
                                // Rule at src/isa/x64/lower.isle line 2281.
                                return Some(v1101);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1102 = constructor_x64_addsd(ctx, v65, v66);
                                let v1103 = constructor_output_xmm(ctx, v1102);
                                // Rule at src/isa/x64/lower.isle line 2283.
                                return Some(v1103);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1104 = constructor_x64_addps(ctx, v65, v66);
                                let v1105 = constructor_output_xmm(ctx, v1104);
                                // Rule at src/isa/x64/lower.isle line 2285.
                                return Some(v1105);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1106 = constructor_x64_addpd(ctx, v65, v66);
                                let v1107 = constructor_output_xmm(ctx, v1106);
                                // Rule at src/isa/x64/lower.isle line 2287.
                                return Some(v1107);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1108 = constructor_x64_subss(ctx, v65, v66);
                                let v1109 = constructor_output_xmm(ctx, v1108);
                                // Rule at src/isa/x64/lower.isle line 2292.
                                return Some(v1109);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1110 = constructor_x64_subsd(ctx, v65, v66);
                                let v1111 = constructor_output_xmm(ctx, v1110);
                                // Rule at src/isa/x64/lower.isle line 2294.
                                return Some(v1111);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1112 = constructor_x64_subps(ctx, v65, v66);
                                let v1113 = constructor_output_xmm(ctx, v1112);
                                // Rule at src/isa/x64/lower.isle line 2296.
                                return Some(v1113);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1114 = constructor_x64_subpd(ctx, v65, v66);
                                let v1115 = constructor_output_xmm(ctx, v1114);
                                // Rule at src/isa/x64/lower.isle line 2298.
                                return Some(v1115);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1116 = constructor_x64_mulss(ctx, v65, v66);
                                let v1117 = constructor_output_xmm(ctx, v1116);
                                // Rule at src/isa/x64/lower.isle line 2303.
                                return Some(v1117);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1118 = constructor_x64_mulsd(ctx, v65, v66);
                                let v1119 = constructor_output_xmm(ctx, v1118);
                                // Rule at src/isa/x64/lower.isle line 2305.
                                return Some(v1119);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1120 = constructor_x64_mulps(ctx, v65, v66);
                                let v1121 = constructor_output_xmm(ctx, v1120);
                                // Rule at src/isa/x64/lower.isle line 2307.
                                return Some(v1121);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1122 = constructor_x64_mulpd(ctx, v65, v66);
                                let v1123 = constructor_output_xmm(ctx, v1122);
                                // Rule at src/isa/x64/lower.isle line 2309.
                                return Some(v1123);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1124 = constructor_x64_divss(ctx, v65, v66);
                                let v1125 = constructor_output_xmm(ctx, v1124);
                                // Rule at src/isa/x64/lower.isle line 2314.
                                return Some(v1125);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1126 = constructor_x64_divsd(ctx, v65, v66);
                                let v1127 = constructor_output_xmm(ctx, v1126);
                                // Rule at src/isa/x64/lower.isle line 2316.
                                return Some(v1127);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1128 = constructor_x64_divps(ctx, v65, v66);
                                let v1129 = constructor_output_xmm(ctx, v1128);
                                // Rule at src/isa/x64/lower.isle line 2318.
                                return Some(v1129);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                let v1130 = constructor_x64_divpd(ctx, v65, v66);
                                let v1131 = constructor_output_xmm(ctx, v1130);
                                // Rule at src/isa/x64/lower.isle line 2320.
                                return Some(v1131);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == F32 {
                                    let v1755 = constructor_imm(ctx, F32, 0x80000000);
                                    let v1756 = C::xmm_new(ctx, v1755);
                                    let v1757 = &C::put_in_xmm_mem(ctx, v35.0);
                                    let v1758 = constructor_x64_andnps(ctx, v1756, v1757);
                                    let v1759 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1760 = constructor_x64_andps(ctx, v1756, v1759);
                                    let v1761 = &C::xmm_to_xmm_mem(ctx, v1760);
                                    let v1762 = constructor_x64_orps(ctx, v1758, v1761);
                                    let v1763 = constructor_output_xmm(ctx, v1762);
                                    // Rule at src/isa/x64/lower.isle line 3362.
                                    return Some(v1763);
                                }
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == F64 {
                                    let v1764 = constructor_imm(ctx, F64, 0x8000000000000000);
                                    let v1765 = C::xmm_new(ctx, v1764);
                                    let v1757 = &C::put_in_xmm_mem(ctx, v35.0);
                                    let v1766 = constructor_x64_andnpd(ctx, v1765, v1757);
                                    let v1759 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1767 = constructor_x64_andpd(ctx, v1765, v1759);
                                    let v1768 = &C::xmm_to_xmm_mem(ctx, v1767);
                                    let v1769 = constructor_x64_orpd(ctx, v1766, v1768);
                                    let v1770 = constructor_output_xmm(ctx, v1769);
                                    // Rule at src/isa/x64/lower.isle line 3368.
                                    return Some(v1770);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1149 = constructor_xmm_min_max_seq(ctx, F32, true, v65, v366);
                                let v1150 = constructor_output_xmm(ctx, v1149);
                                // Rule at src/isa/x64/lower.isle line 2351.
                                return Some(v1150);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1151 = constructor_xmm_min_max_seq(ctx, F64, true, v65, v366);
                                let v1152 = constructor_output_xmm(ctx, v1151);
                                // Rule at src/isa/x64/lower.isle line 2353.
                                return Some(v1152);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1153 = constructor_x64_minps(ctx, v65, v366);
                                let v1154 = constructor_put_in_xmm(ctx, v35.1);
                                let v1155 = constructor_put_in_xmm(ctx, v35.0);
                                let v1156 = constructor_x64_minps(ctx, v1154, v1155);
                                let v1157 = &C::xmm_to_xmm_mem(ctx, v1156);
                                let v1158 = constructor_x64_orps(ctx, v1153, v1157);
                                let v1159 = &C::xmm_to_xmm_mem(ctx, v1156);
                                let v1160 =
                                    constructor_x64_cmpps(ctx, v1158, v1159, &FcmpImm::Unordered);
                                let v1161 = &C::xmm_to_xmm_mem(ctx, v1160);
                                let v1162 = constructor_x64_orps(ctx, v1158, v1161);
                                let v1164 = RegMemImm::Imm { simm32: 0xA };
                                let v1165 = &constructor_mov_rmi_to_xmm(ctx, &v1164);
                                let v1166 = constructor_x64_psrld(ctx, v1160, v1165);
                                let v1167 = &C::xmm_to_xmm_mem(ctx, v1162);
                                let v1168 = constructor_x64_andnps(ctx, v1166, v1167);
                                let v1169 = constructor_output_xmm(ctx, v1168);
                                // Rule at src/isa/x64/lower.isle line 2368.
                                return Some(v1169);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1170 = constructor_x64_minpd(ctx, v65, v366);
                                let v1154 = constructor_put_in_xmm(ctx, v35.1);
                                let v1155 = constructor_put_in_xmm(ctx, v35.0);
                                let v1171 = constructor_x64_minpd(ctx, v1154, v1155);
                                let v1172 = &C::xmm_to_xmm_mem(ctx, v1171);
                                let v1173 = constructor_x64_orpd(ctx, v1170, v1172);
                                let v1174 = &C::xmm_to_xmm_mem(ctx, v1171);
                                let v1175 =
                                    constructor_x64_cmppd(ctx, v1170, v1174, &FcmpImm::Unordered);
                                let v1176 = &C::xmm_to_xmm_mem(ctx, v1175);
                                let v1177 = constructor_x64_orpd(ctx, v1173, v1176);
                                let v1179 = RegMemImm::Imm { simm32: 0xD };
                                let v1180 = &constructor_mov_rmi_to_xmm(ctx, &v1179);
                                let v1181 = constructor_x64_psrlq(ctx, v1175, v1180);
                                let v1182 = &C::xmm_to_xmm_mem(ctx, v1177);
                                let v1183 = constructor_x64_andnpd(ctx, v1181, v1182);
                                let v1184 = constructor_output_xmm(ctx, v1183);
                                // Rule at src/isa/x64/lower.isle line 2411.
                                return Some(v1184);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FminPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1221 = constructor_x64_minss(ctx, v472, v1220);
                                let v1222 = constructor_output_xmm(ctx, v1221);
                                // Rule at src/isa/x64/lower.isle line 2520.
                                return Some(v1222);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1223 = constructor_x64_minsd(ctx, v472, v1220);
                                let v1224 = constructor_output_xmm(ctx, v1223);
                                // Rule at src/isa/x64/lower.isle line 2522.
                                return Some(v1224);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1225 = constructor_x64_minps(ctx, v472, v1220);
                                let v1226 = constructor_output_xmm(ctx, v1225);
                                // Rule at src/isa/x64/lower.isle line 2524.
                                return Some(v1226);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1227 = constructor_x64_minpd(ctx, v472, v1220);
                                let v1228 = constructor_output_xmm(ctx, v1227);
                                // Rule at src/isa/x64/lower.isle line 2526.
                                return Some(v1228);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1186 = constructor_xmm_min_max_seq(ctx, F32, false, v65, v366);
                                let v1187 = constructor_output_xmm(ctx, v1186);
                                // Rule at src/isa/x64/lower.isle line 2423.
                                return Some(v1187);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1188 = constructor_xmm_min_max_seq(ctx, F64, false, v65, v366);
                                let v1189 = constructor_output_xmm(ctx, v1188);
                                // Rule at src/isa/x64/lower.isle line 2425.
                                return Some(v1189);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1190 = constructor_x64_maxps(ctx, v65, v366);
                                let v1154 = constructor_put_in_xmm(ctx, v35.1);
                                let v1155 = constructor_put_in_xmm(ctx, v35.0);
                                let v1191 = constructor_x64_maxps(ctx, v1154, v1155);
                                let v1192 = &C::xmm_to_xmm_mem(ctx, v1191);
                                let v1193 = constructor_x64_xorps(ctx, v1190, v1192);
                                let v1194 = &C::xmm_to_xmm_mem(ctx, v1193);
                                let v1195 = constructor_x64_orps(ctx, v1190, v1194);
                                let v1196 = &C::xmm_to_xmm_mem(ctx, v1193);
                                let v1197 = constructor_x64_subps(ctx, v1195, v1196);
                                let v1198 = &C::xmm_to_xmm_mem(ctx, v1195);
                                let v1199 =
                                    constructor_x64_cmpps(ctx, v1195, v1198, &FcmpImm::Unordered);
                                let v1164 = RegMemImm::Imm { simm32: 0xA };
                                let v1200 = &constructor_mov_rmi_to_xmm(ctx, &v1164);
                                let v1201 = constructor_x64_psrld(ctx, v1199, v1200);
                                let v1202 = &C::xmm_to_xmm_mem(ctx, v1197);
                                let v1203 = constructor_x64_andnps(ctx, v1201, v1202);
                                let v1204 = constructor_output_xmm(ctx, v1203);
                                // Rule at src/isa/x64/lower.isle line 2431.
                                return Some(v1204);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v65 = constructor_put_in_xmm(ctx, v35.0);
                                let v366 = constructor_put_in_xmm(ctx, v35.1);
                                let v1205 = constructor_x64_maxpd(ctx, v65, v366);
                                let v1154 = constructor_put_in_xmm(ctx, v35.1);
                                let v1155 = constructor_put_in_xmm(ctx, v35.0);
                                let v1206 = constructor_x64_maxpd(ctx, v1154, v1155);
                                let v1207 = &C::xmm_to_xmm_mem(ctx, v1206);
                                let v1208 = constructor_x64_xorpd(ctx, v1205, v1207);
                                let v1209 = &C::xmm_to_xmm_mem(ctx, v1208);
                                let v1210 = constructor_x64_orpd(ctx, v1205, v1209);
                                let v1211 = &C::xmm_to_xmm_mem(ctx, v1208);
                                let v1212 = constructor_x64_subpd(ctx, v1210, v1211);
                                let v1213 = &C::xmm_to_xmm_mem(ctx, v1210);
                                let v1214 =
                                    constructor_x64_cmppd(ctx, v1210, v1213, &FcmpImm::Unordered);
                                let v1179 = RegMemImm::Imm { simm32: 0xD };
                                let v1215 = &constructor_mov_rmi_to_xmm(ctx, &v1179);
                                let v1216 = constructor_x64_psrlq(ctx, v1214, v1215);
                                let v1217 = &C::xmm_to_xmm_mem(ctx, v1212);
                                let v1218 = constructor_x64_andnpd(ctx, v1216, v1217);
                                let v1219 = constructor_output_xmm(ctx, v1218);
                                // Rule at src/isa/x64/lower.isle line 2474.
                                return Some(v1219);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FmaxPseudo => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1229 = constructor_x64_maxss(ctx, v472, v1220);
                                let v1230 = constructor_output_xmm(ctx, v1229);
                                // Rule at src/isa/x64/lower.isle line 2531.
                                return Some(v1230);
                            }
                            F64 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1231 = constructor_x64_maxsd(ctx, v472, v1220);
                                let v1232 = constructor_output_xmm(ctx, v1231);
                                // Rule at src/isa/x64/lower.isle line 2533.
                                return Some(v1232);
                            }
                            F32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1233 = constructor_x64_maxps(ctx, v472, v1220);
                                let v1234 = constructor_output_xmm(ctx, v1233);
                                // Rule at src/isa/x64/lower.isle line 2535.
                                return Some(v1234);
                            }
                            F64X2 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v472 = constructor_put_in_xmm(ctx, v35.1);
                                let v1220 = constructor_put_in_xmm(ctx, v35.0);
                                let v1235 = constructor_x64_maxpd(ctx, v472, v1220);
                                let v1236 = constructor_output_xmm(ctx, v1235);
                                // Rule at src/isa/x64/lower.isle line 2537.
                                return Some(v1236);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == I16X8 {
                                    let v65 = constructor_put_in_xmm(ctx, v35.0);
                                    let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1715 = constructor_x64_packsswb(ctx, v65, v66);
                                    let v1716 = constructor_output_xmm(ctx, v1715);
                                    // Rule at src/isa/x64/lower.isle line 3295.
                                    return Some(v1716);
                                }
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == I32X4 {
                                    let v65 = constructor_put_in_xmm(ctx, v35.0);
                                    let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1717 = constructor_x64_packssdw(ctx, v65, v66);
                                    let v1718 = constructor_output_xmm(ctx, v1717);
                                    // Rule at src/isa/x64/lower.isle line 3298.
                                    return Some(v1718);
                                }
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v388 = C::def_inst(ctx, v35.0);
                                if let Some(v389) = v388 {
                                    let v390 = &C::inst_data(ctx, v389);
                                    if let &InstructionData::Unary {
                                        opcode: ref v391,
                                        arg: v392,
                                    } = v390
                                    {
                                        if let &Opcode::FcvtToSintSat = v391 {
                                            let v398 = C::def_inst(ctx, v35.1);
                                            if let Some(v399) = v398 {
                                                let v400 = &C::inst_data(ctx, v399);
                                                if let &InstructionData::UnaryConst {
                                                    opcode: ref v1722,
                                                    constant_handle: v1723,
                                                } = v400
                                                {
                                                    if let &Opcode::Vconst = v1722 {
                                                        let v1719 = C::first_result(ctx, v389);
                                                        if let Some(v1720) = v1719 {
                                                            let v1721 = C::value_type(ctx, v1720);
                                                            if v1721 == I64X2 {
                                                                let v1724 = C::u128_from_constant(
                                                                    ctx, v1723,
                                                                );
                                                                if let Some(v1725) = v1724 {
                                                                    if v1725 == 0x0 {
                                                                        let v408 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v392,
                                                                            );
                                                                        let v409 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v408,
                                                                            );
                                                                        let v1726 =
                                                                            constructor_x64_cmppd(
                                                                                ctx,
                                                                                v408,
                                                                                v409,
                                                                                &FcmpImm::Equal,
                                                                            );
                                                                        let v1728 =
                                                                            C::snarrow_umax_mask(
                                                                                ctx,
                                                                            );
                                                                        let v1729 = constructor_x64_xmm_load_const(ctx, F64X2, v1728);
                                                                        let v1730 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v1729,
                                                                            );
                                                                        let v1731 =
                                                                            constructor_x64_andps(
                                                                                ctx, v1726, v1730,
                                                                            );
                                                                        let v1732 =
                                                                            constructor_x64_minpd(
                                                                                ctx, v408, v1731,
                                                                            );
                                                                        let v1733 =
                                                                            &C::xmm_to_xmm_mem(
                                                                                ctx, v1732,
                                                                            );
                                                                        let v1734 = constructor_x64_cvttpd2dq(ctx, v1733);
                                                                        let v1735 =
                                                                            constructor_output_xmm(
                                                                                ctx, v1734,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 3307.
                                                                        return Some(v1735);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == I16X8 {
                                    let v65 = constructor_put_in_xmm(ctx, v35.0);
                                    let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1736 = constructor_x64_packuswb(ctx, v65, v66);
                                    let v1737 = constructor_output_xmm(ctx, v1736);
                                    // Rule at src/isa/x64/lower.isle line 3329.
                                    return Some(v1737);
                                }
                            }
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v1714 = C::value_type(ctx, v35.0);
                                if v1714 == I32X4 {
                                    let v65 = constructor_put_in_xmm(ctx, v35.0);
                                    let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                                    let v1738 = constructor_x64_packusdw(ctx, v65, v66);
                                    let v1739 = constructor_output_xmm(ctx, v1738);
                                    // Rule at src/isa/x64/lower.isle line 3332.
                                    return Some(v1739);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v388 = C::def_inst(ctx, v35.0);
                    if let Some(v389) = v388 {
                        let v390 = &C::inst_data(ctx, v389);
                        if let &InstructionData::Unary {
                            opcode: ref v391,
                            arg: v392,
                        } = v390
                        {
                            if let &Opcode::FcvtToUintSat = v391 {
                                let v393 = C::value_type(ctx, v392);
                                if v393 == F64X2 {
                                    let v398 = C::def_inst(ctx, v35.1);
                                    if let Some(v399) = v398 {
                                        let v400 = &C::inst_data(ctx, v399);
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v1722,
                                            constant_handle: v1723,
                                        } = v400
                                        {
                                            if let &Opcode::Vconst = v1722 {
                                                let v1724 = C::u128_from_constant(ctx, v1723);
                                                if let Some(v1725) = v1724 {
                                                    if v1725 == 0x0 {
                                                        let v408 =
                                                            constructor_put_in_xmm(ctx, v392);
                                                        let v409 = &C::xmm_to_xmm_mem(ctx, v408);
                                                        let v2039 =
                                                            constructor_x64_xorpd(ctx, v408, v409);
                                                        let v2040 =
                                                            constructor_x64_maxpd(ctx, v408, v2039);
                                                        let v2041 = C::uunarrow_umax_mask(ctx);
                                                        let v2042 = constructor_x64_xmm_load_const(
                                                            ctx, F64X2, v2041,
                                                        );
                                                        let v2043 = constructor_x64_minpd(
                                                            ctx, v2040, v2042,
                                                        );
                                                        let v2044 = &C::xmm_to_xmm_mem(ctx, v2043);
                                                        let v2045 = constructor_x64_roundpd(
                                                            ctx,
                                                            v2044,
                                                            &RoundImm::RoundZero,
                                                        );
                                                        let v2046 = C::uunarrow_uint_mask(ctx);
                                                        let v2047 = constructor_x64_xmm_load_const(
                                                            ctx, F64X2, v2046,
                                                        );
                                                        let v2048 = &C::xmm_to_xmm_mem(ctx, v2047);
                                                        let v2049 = constructor_x64_addpd(
                                                            ctx, v2045, v2048,
                                                        );
                                                        let v2050 = &C::xmm_to_xmm_mem(ctx, v2039);
                                                        let v2052 = constructor_x64_shufps(
                                                            ctx, v2049, v2050, 0x88,
                                                        );
                                                        let v2053 =
                                                            constructor_output_xmm(ctx, v2052);
                                                        // Rule at src/isa/x64/lower.isle line 3767.
                                                        return Some(v2053);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v388 = C::def_inst(ctx, v35.0);
                                if let Some(v389) = v388 {
                                    let v390 = &C::inst_data(ctx, v389);
                                    if let &InstructionData::Unary {
                                        opcode: ref v391,
                                        arg: v392,
                                    } = v390
                                    {
                                        match v391 {
                                            &Opcode::SwidenLow => {
                                                let v393 = C::value_type(ctx, v392);
                                                if v393 == I8X16 {
                                                    let v398 = C::def_inst(ctx, v35.1);
                                                    if let Some(v399) = v398 {
                                                        let v400 = &C::inst_data(ctx, v399);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v401,
                                                            arg: v402,
                                                        } = v400
                                                        {
                                                            if let &Opcode::SwidenHigh = v401 {
                                                                if v392 == v402 {
                                                                    let v1658 = C::iadd_pairwise_mul_const_16(ctx);
                                                                    let v1659 = constructor_x64_xmm_load_const(ctx, I8X16, v1658);
                                                                    let v1660 = &C::put_in_xmm_mem(
                                                                        ctx, v392,
                                                                    );
                                                                    let v1661 =
                                                                        constructor_x64_pmaddubsw(
                                                                            ctx, v1659, v1660,
                                                                        );
                                                                    let v1662 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1661,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3211.
                                                                    return Some(v1662);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v393 = C::value_type(ctx, v392);
                                                if v393 == I8X16 {
                                                    let v398 = C::def_inst(ctx, v35.1);
                                                    if let Some(v399) = v398 {
                                                        let v400 = &C::inst_data(ctx, v399);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v401,
                                                            arg: v402,
                                                        } = v400
                                                        {
                                                            if let &Opcode::UwidenHigh = v401 {
                                                                if v392 == v402 {
                                                                    let v1658 = C::iadd_pairwise_mul_const_16(ctx);
                                                                    let v1659 = constructor_x64_xmm_load_const(ctx, I8X16, v1658);
                                                                    let v1665 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v392,
                                                                        );
                                                                    let v1669 = &C::xmm_to_xmm_mem(
                                                                        ctx, v1659,
                                                                    );
                                                                    let v1670 =
                                                                        constructor_x64_pmaddubsw(
                                                                            ctx, v1665, v1669,
                                                                        );
                                                                    let v1671 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1670,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3225.
                                                                    return Some(v1671);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v35 = C::unpack_value_array_2(ctx, v34);
                                let v388 = C::def_inst(ctx, v35.0);
                                if let Some(v389) = v388 {
                                    let v390 = &C::inst_data(ctx, v389);
                                    if let &InstructionData::Unary {
                                        opcode: ref v391,
                                        arg: v392,
                                    } = v390
                                    {
                                        match v391 {
                                            &Opcode::SwidenLow => {
                                                let v393 = C::value_type(ctx, v392);
                                                if v393 == I16X8 {
                                                    let v398 = C::def_inst(ctx, v35.1);
                                                    if let Some(v399) = v398 {
                                                        let v400 = &C::inst_data(ctx, v399);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v401,
                                                            arg: v402,
                                                        } = v400
                                                        {
                                                            if let &Opcode::SwidenHigh = v401 {
                                                                if v392 == v402 {
                                                                    let v1663 = C::iadd_pairwise_mul_const_32(ctx);
                                                                    let v1664 = constructor_x64_xmm_load_const(ctx, I16X8, v1663);
                                                                    let v1665 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v392,
                                                                        );
                                                                    let v1666 = &C::xmm_to_xmm_mem(
                                                                        ctx, v1664,
                                                                    );
                                                                    let v1667 =
                                                                        constructor_x64_pmaddwd(
                                                                            ctx, v1665, v1666,
                                                                        );
                                                                    let v1668 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1667,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3218.
                                                                    return Some(v1668);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v393 = C::value_type(ctx, v392);
                                                if v393 == I16X8 {
                                                    let v398 = C::def_inst(ctx, v35.1);
                                                    if let Some(v399) = v398 {
                                                        let v400 = &C::inst_data(ctx, v399);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v401,
                                                            arg: v402,
                                                        } = v400
                                                        {
                                                            if let &Opcode::UwidenHigh = v401 {
                                                                if v392 == v402 {
                                                                    let v1672 = C::iadd_pairwise_xor_const_32(ctx);
                                                                    let v1673 = constructor_x64_xmm_load_const(ctx, I16X8, v1672);
                                                                    let v1665 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v392,
                                                                        );
                                                                    let v1674 = &C::xmm_to_xmm_mem(
                                                                        ctx, v1673,
                                                                    );
                                                                    let v1675 =
                                                                        constructor_x64_pxor(
                                                                            ctx, v1665, v1674,
                                                                        );
                                                                    let v1676 = C::iadd_pairwise_mul_const_32(ctx);
                                                                    let v1677 = constructor_x64_xmm_load_const(ctx, I16X8, v1676);
                                                                    let v1678 = &C::xmm_to_xmm_mem(
                                                                        ctx, v1677,
                                                                    );
                                                                    let v1679 =
                                                                        constructor_x64_pmaddwd(
                                                                            ctx, v1675, v1678,
                                                                        );
                                                                    let v1680 = C::iadd_pairwise_addd_const_32(ctx);
                                                                    let v1681 = constructor_x64_xmm_load_const(ctx, I16X8, v1680);
                                                                    let v1682 = &C::xmm_to_xmm_mem(
                                                                        ctx, v1681,
                                                                    );
                                                                    let v1683 =
                                                                        constructor_x64_paddd(
                                                                            ctx, v1679, v1682,
                                                                        );
                                                                    let v1684 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1683,
                                                                        );
                                                                    // Rule at src/isa/x64/lower.isle line 3232.
                                                                    return Some(v1684);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::WideningPairwiseDotProductS => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v35 = C::unpack_value_array_2(ctx, v34);
                            let v65 = constructor_put_in_xmm(ctx, v35.0);
                            let v66 = &C::put_in_xmm_mem(ctx, v35.1);
                            let v1098 = constructor_x64_pmaddwd(ctx, v65, v66);
                            let v1099 = constructor_output_xmm(ctx, v1098);
                            // Rule at src/isa/x64/lower.isle line 2271.
                            return Some(v1099);
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v35 = C::unpack_value_array_2(ctx, v34);
                    let v1714 = C::value_type(ctx, v35.0);
                    if v1714 == I64 {
                        let v2015 = C::put_in_reg(ctx, v35.0);
                        let v2016 = C::put_in_reg(ctx, v35.1);
                        let v2017 = C::value_regs(ctx, v2015, v2016);
                        let v2018 = C::output(ctx, v2017);
                        // Rule at src/isa/x64/lower.isle line 3720.
                        return Some(v2018);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1929,
            arg: v1930,
            imm: v1931,
        } => {
            if let &Opcode::Extractlane = v1929 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1932 = C::u8_from_uimm8(ctx, v1931);
                    match v1932 {
                        0x0 => {
                            let v3 = C::value_type(ctx, v2);
                            let v147 = C::ty_scalar_float(ctx, v3);
                            if let Some(v148) = v147 {
                                let v1933 = constructor_output_value(ctx, v1930);
                                // Rule at src/isa/x64/lower.isle line 3581.
                                return Some(v1933);
                            }
                        }
                        0x1 => {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == F64 {
                                let v1934 = C::value_type(ctx, v1930);
                                let v1935 = C::ty_vec128(ctx, v1934);
                                if let Some(v1936) = v1935 {
                                    let v1937 = &C::put_in_xmm_mem(ctx, v1930);
                                    let v1940 = constructor_x64_pshufd(
                                        ctx,
                                        v1937,
                                        0xEE,
                                        &OperandSize::Size32,
                                    );
                                    let v1941 = constructor_output_xmm(ctx, v1940);
                                    // Rule at src/isa/x64/lower.isle line 3590.
                                    return Some(v1941);
                                }
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    if v3 == F32 {
                        let v1934 = C::value_type(ctx, v1930);
                        let v1935 = C::ty_vec128(ctx, v1934);
                        if let Some(v1936) = v1935 {
                            let v1937 = &C::put_in_xmm_mem(ctx, v1930);
                            let v1938 =
                                constructor_x64_pshufd(ctx, v1937, v1932, &OperandSize::Size32);
                            let v1939 = constructor_output_xmm(ctx, v1938);
                            // Rule at src/isa/x64/lower.isle line 3585.
                            return Some(v1939);
                        }
                    }
                }
                let v1934 = C::value_type(ctx, v1930);
                let v1942 = C::multi_lane(ctx, v1934);
                if let Some(v1943) = v1942 {
                    match v1943.0 {
                        0x8 => {
                            if v1943.1 == 0x10 {
                                let v1946 = constructor_put_in_xmm(ctx, v1930);
                                let v1932 = C::u8_from_uimm8(ctx, v1931);
                                let v1947 = constructor_x64_pextrb(ctx, v1934, v1946, v1932);
                                let v1948 = constructor_output_gpr(ctx, v1947);
                                // Rule at src/isa/x64/lower.isle line 3595.
                                return Some(v1948);
                            }
                        }
                        0x10 => {
                            if v1943.1 == 0x8 {
                                let v1946 = constructor_put_in_xmm(ctx, v1930);
                                let v1932 = C::u8_from_uimm8(ctx, v1931);
                                let v1949 = constructor_x64_pextrw(ctx, v1934, v1946, v1932);
                                let v1950 = constructor_output_gpr(ctx, v1949);
                                // Rule at src/isa/x64/lower.isle line 3598.
                                return Some(v1950);
                            }
                        }
                        0x20 => {
                            if v1943.1 == 0x4 {
                                let v1946 = constructor_put_in_xmm(ctx, v1930);
                                let v1932 = C::u8_from_uimm8(ctx, v1931);
                                let v1951 = constructor_x64_pextrd(ctx, v1934, v1946, v1932);
                                let v1952 = constructor_output_gpr(ctx, v1951);
                                // Rule at src/isa/x64/lower.isle line 3601.
                                return Some(v1952);
                            }
                        }
                        0x40 => {
                            if v1943.1 == 0x2 {
                                let v1946 = constructor_put_in_xmm(ctx, v1930);
                                let v1932 = C::u8_from_uimm8(ctx, v1931);
                                let v1951 = constructor_x64_pextrd(ctx, v1934, v1946, v1932);
                                let v1952 = constructor_output_gpr(ctx, v1951);
                                // Rule at src/isa/x64/lower.isle line 3604.
                                return Some(v1952);
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v1509,
            args: v1510,
            func_ref: v1511,
        } => {
            if let &Opcode::Call = v1509 {
                let v1513 = C::func_ref_data(ctx, v1511);
                let v1512 = C::value_list_slice(ctx, v1510);
                let v1517 = C::gen_call(ctx, v1513.0, v1513.1, v1513.2, v1512);
                // Rule at src/isa/x64/lower.isle line 2893.
                return Some(v1517);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1518,
            args: v1519,
            sig_ref: v1520,
        } => {
            if let &Opcode::CallIndirect = v1518 {
                let v1521 = C::value_list_slice(ctx, v1519);
                let v1522 = C::value_slice_unwrap(ctx, v1521);
                if let Some(v1523) = v1522 {
                    let v1526 = C::gen_call_indirect(ctx, v1520, v1523.0, v1523.1);
                    // Rule at src/isa/x64/lower.isle line 2896.
                    return Some(v1526);
                }
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v794,
            args: ref v795,
            cond: ref v796,
        } => {
            if let &Opcode::Fcmp = v794 {
                match v796 {
                    &FloatCC::Equal => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v811 = constructor_x64_cmpp(ctx, v807, v808, v809, &FcmpImm::Equal);
                            let v812 = constructor_output_xmm(ctx, v811);
                            // Rule at src/isa/x64/lower.isle line 1656.
                            return Some(v812);
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v834 = constructor_put_in_xmm(ctx, v797.1);
                            let v835 = &C::put_in_xmm_mem(ctx, v797.0);
                            let v836 =
                                constructor_x64_cmpp(ctx, v807, v834, v835, &FcmpImm::LessThan);
                            let v837 = constructor_output_xmm(ctx, v836);
                            // Rule at src/isa/x64/lower.isle line 1676.
                            return Some(v837);
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v834 = constructor_put_in_xmm(ctx, v797.1);
                            let v835 = &C::put_in_xmm_mem(ctx, v797.0);
                            let v838 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v834,
                                v835,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v839 = constructor_output_xmm(ctx, v838);
                            // Rule at src/isa/x64/lower.isle line 1678.
                            return Some(v839);
                        }
                    }
                    &FloatCC::LessThan => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v817 =
                                constructor_x64_cmpp(ctx, v807, v808, v809, &FcmpImm::LessThan);
                            let v818 = constructor_output_xmm(ctx, v817);
                            // Rule at src/isa/x64/lower.isle line 1660.
                            return Some(v818);
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v820 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v808,
                                v809,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v821 = constructor_output_xmm(ctx, v820);
                            // Rule at src/isa/x64/lower.isle line 1662.
                            return Some(v821);
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v814 =
                                constructor_x64_cmpp(ctx, v807, v808, v809, &FcmpImm::NotEqual);
                            let v815 = constructor_output_xmm(ctx, v814);
                            // Rule at src/isa/x64/lower.isle line 1658.
                            return Some(v815);
                        }
                    }
                    &FloatCC::Ordered => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v823 =
                                constructor_x64_cmpp(ctx, v807, v808, v809, &FcmpImm::Ordered);
                            let v824 = constructor_output_xmm(ctx, v823);
                            // Rule at src/isa/x64/lower.isle line 1664.
                            return Some(v824);
                        }
                    }
                    &FloatCC::Unordered => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v826 =
                                constructor_x64_cmpp(ctx, v807, v808, v809, &FcmpImm::Unordered);
                            let v827 = constructor_output_xmm(ctx, v826);
                            // Rule at src/isa/x64/lower.isle line 1666.
                            return Some(v827);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v829 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v808,
                                v809,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v830 = constructor_output_xmm(ctx, v829);
                            // Rule at src/isa/x64/lower.isle line 1668.
                            return Some(v830);
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v808 = constructor_put_in_xmm(ctx, v797.0);
                            let v809 = &C::put_in_xmm_mem(ctx, v797.1);
                            let v832 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v808,
                                v809,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v833 = constructor_output_xmm(ctx, v832);
                            // Rule at src/isa/x64/lower.isle line 1670.
                            return Some(v833);
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v834 = constructor_put_in_xmm(ctx, v797.1);
                            let v835 = &C::put_in_xmm_mem(ctx, v797.0);
                            let v840 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v834,
                                v835,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v841 = constructor_output_xmm(ctx, v840);
                            // Rule at src/isa/x64/lower.isle line 1680.
                            return Some(v841);
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v797 = C::unpack_value_array_2(ctx, v795);
                        let v800 = C::value_type(ctx, v797.0);
                        let v806 = C::ty_vec128(ctx, v800);
                        if let Some(v807) = v806 {
                            let v834 = constructor_put_in_xmm(ctx, v797.1);
                            let v835 = &C::put_in_xmm_mem(ctx, v797.0);
                            let v842 = constructor_x64_cmpp(
                                ctx,
                                v807,
                                v834,
                                v835,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v843 = constructor_output_xmm(ctx, v842);
                            // Rule at src/isa/x64/lower.isle line 1682.
                            return Some(v843);
                        }
                    }
                    _ => {}
                }
                let v797 = C::unpack_value_array_2(ctx, v795);
                let v800 = C::value_type(ctx, v797.0);
                let v801 = C::ty_scalar_float(ctx, v800);
                if let Some(v802) = v801 {
                    let v803 = &constructor_emit_fcmp(ctx, v796, v797.0, v797.1);
                    let v804 = constructor_lower_fcmp_bool(ctx, v803);
                    let v805 = C::output(ctx, v804);
                    // Rule at src/isa/x64/lower.isle line 1649.
                    return Some(v805);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1432,
            func_ref: v1433,
        } => {
            if let &Opcode::FuncAddr = v1432 {
                let v1434 = C::func_ref_data(ctx, v1433);
                let v1439 = constructor_load_ext_name(ctx, v1434.1, 0x0);
                let v1440 = constructor_output_reg(ctx, v1439);
                // Rule at src/isa/x64/lower.isle line 2835.
                return Some(v1440);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v646,
            args: ref v647,
            code: ref v648,
        } => {
            if let &Opcode::UaddOverflowTrap = v646 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v649 = C::unpack_value_array_2(ctx, v647);
                        let v676 = &C::sinkable_load(ctx, v649.0);
                        if let Some(v677) = v676 {
                            let v666 = constructor_put_in_gpr(ctx, v649.1);
                            let v678 = &constructor_sink_load_to_gpr_mem_imm(ctx, v677);
                            let v679 = &constructor_x64_add_with_flags_paired(ctx, v5, v666, v678);
                            let v655 = &constructor_trap_if(ctx, &CC::B, v648);
                            let v680 = constructor_with_flags(ctx, v679, v655);
                            let v681 = C::output(ctx, v680);
                            // Rule at src/isa/x64/lower.isle line 1502.
                            return Some(v681);
                        }
                        let v670 = &C::sinkable_load(ctx, v649.1);
                        if let Some(v671) = v670 {
                            let v652 = constructor_put_in_gpr(ctx, v649.0);
                            let v672 = &constructor_sink_load_to_gpr_mem_imm(ctx, v671);
                            let v673 = &constructor_x64_add_with_flags_paired(ctx, v5, v652, v672);
                            let v655 = &constructor_trap_if(ctx, &CC::B, v648);
                            let v674 = constructor_with_flags(ctx, v673, v655);
                            let v675 = C::output(ctx, v674);
                            // Rule at src/isa/x64/lower.isle line 1496.
                            return Some(v675);
                        }
                        let v664 = &C::simm32_from_value(ctx, v649.0);
                        if let Some(v665) = v664 {
                            let v666 = constructor_put_in_gpr(ctx, v649.1);
                            let v667 = &constructor_x64_add_with_flags_paired(ctx, v5, v666, v665);
                            let v661 = &constructor_trap_if(ctx, &CC::B, v648);
                            let v668 = constructor_with_flags(ctx, v667, v661);
                            let v669 = C::output(ctx, v668);
                            // Rule at src/isa/x64/lower.isle line 1488.
                            return Some(v669);
                        }
                        let v658 = &C::simm32_from_value(ctx, v649.1);
                        if let Some(v659) = v658 {
                            let v652 = constructor_put_in_gpr(ctx, v649.0);
                            let v660 = &constructor_x64_add_with_flags_paired(ctx, v5, v652, v659);
                            let v661 = &constructor_trap_if(ctx, &CC::B, v648);
                            let v662 = constructor_with_flags(ctx, v660, v661);
                            let v663 = C::output(ctx, v662);
                            // Rule at src/isa/x64/lower.isle line 1482.
                            return Some(v663);
                        }
                        let v652 = constructor_put_in_gpr(ctx, v649.0);
                        let v653 = &constructor_put_in_gpr_mem_imm(ctx, v649.1);
                        let v654 = &constructor_x64_add_with_flags_paired(ctx, v5, v652, v653);
                        let v655 = &constructor_trap_if(ctx, &CC::B, v648);
                        let v656 = constructor_with_flags(ctx, v654, v655);
                        let v657 = C::output(ctx, v656);
                        // Rule at src/isa/x64/lower.isle line 1475.
                        return Some(v657);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v688,
            args: ref v689,
            cond: ref v690,
        } => {
            if let &Opcode::Icmp = v688 {
                match v690 {
                    &IntCC::Equal => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v746 = constructor_x64_pcmpeq(ctx, v743, v744, v745);
                            let v747 = constructor_output_xmm(ctx, v746);
                            // Rule at src/isa/x64/lower.isle line 1564.
                            return Some(v747);
                        }
                    }
                    &IntCC::NotEqual => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v746 = constructor_x64_pcmpeq(ctx, v743, v744, v745);
                            let v748 = constructor_vector_all_ones(ctx);
                            let v749 = &C::xmm_to_xmm_mem(ctx, v748);
                            let v750 = constructor_x64_pxor(ctx, v746, v749);
                            let v751 = constructor_output_xmm(ctx, v750);
                            // Rule at src/isa/x64/lower.isle line 1569.
                            return Some(v751);
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v691 = C::unpack_value_array_2(ctx, v689);
                                let v712 = C::def_inst(ctx, v691.0);
                                if let Some(v713) = v712 {
                                    let v714 = &C::inst_data(ctx, v713);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v715,
                                        imm: v716,
                                    } = v714
                                    {
                                        if let &Opcode::Iconst = v715 {
                                            let v717 = C::u64_from_imm64(ctx, v716);
                                            if v717 == 0x0 {
                                                let v718 = C::value_type(ctx, v691.1);
                                                match v718 {
                                                    I32 => {
                                                        let v719 =
                                                            constructor_put_in_gpr(ctx, v691.1);
                                                        let v731 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v732 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v731);
                                                        let v735 = constructor_x64_shr(
                                                            ctx, I32, v719, v732,
                                                        );
                                                        let v736 =
                                                            constructor_output_gpr(ctx, v735);
                                                        // Rule at src/isa/x64/lower.isle line 1548.
                                                        return Some(v736);
                                                    }
                                                    I64 => {
                                                        let v719 =
                                                            constructor_put_in_gpr(ctx, v691.1);
                                                        let v708 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v709 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v708);
                                                        let v720 = constructor_x64_shr(
                                                            ctx, I64, v719, v709,
                                                        );
                                                        let v721 =
                                                            constructor_output_gpr(ctx, v720);
                                                        // Rule at src/isa/x64/lower.isle line 1532.
                                                        return Some(v721);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v752 = constructor_x64_pcmpgt(ctx, v743, v744, v745);
                            let v753 = constructor_output_xmm(ctx, v752);
                            // Rule at src/isa/x64/lower.isle line 1576.
                            return Some(v753);
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        match v694 {
                            I32 => {
                                let v1 = C::first_result(ctx, arg0);
                                if let Some(v2) = v1 {
                                    let v3 = C::value_type(ctx, v2);
                                    if v3 == I8 {
                                        let v700 = C::def_inst(ctx, v691.1);
                                        if let Some(v701) = v700 {
                                            let v702 = &C::inst_data(ctx, v701);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v703,
                                                imm: v704,
                                            } = v702
                                            {
                                                if let &Opcode::Iconst = v703 {
                                                    let v705 = C::u64_from_imm64(ctx, v704);
                                                    if v705 == 0x0 {
                                                        let v706 =
                                                            constructor_put_in_gpr(ctx, v691.0);
                                                        let v726 =
                                                            constructor_x64_not(ctx, I64, v706);
                                                        let v731 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v737 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v731);
                                                        let v740 = constructor_x64_shr(
                                                            ctx, I32, v726, v737,
                                                        );
                                                        let v741 =
                                                            constructor_output_gpr(ctx, v740);
                                                        // Rule at src/isa/x64/lower.isle line 1556.
                                                        return Some(v741);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v1 = C::first_result(ctx, arg0);
                                if let Some(v2) = v1 {
                                    let v3 = C::value_type(ctx, v2);
                                    if v3 == I8 {
                                        let v700 = C::def_inst(ctx, v691.1);
                                        if let Some(v701) = v700 {
                                            let v702 = &C::inst_data(ctx, v701);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v703,
                                                imm: v704,
                                            } = v702
                                            {
                                                if let &Opcode::Iconst = v703 {
                                                    let v705 = C::u64_from_imm64(ctx, v704);
                                                    if v705 == 0x0 {
                                                        let v706 =
                                                            constructor_put_in_gpr(ctx, v691.0);
                                                        let v726 =
                                                            constructor_x64_not(ctx, I64, v706);
                                                        let v708 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v723 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v708);
                                                        let v727 = constructor_x64_shr(
                                                            ctx, I64, v726, v723,
                                                        );
                                                        let v728 =
                                                            constructor_output_gpr(ctx, v727);
                                                        // Rule at src/isa/x64/lower.isle line 1540.
                                                        return Some(v728);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v754 = constructor_put_in_xmm(ctx, v691.1);
                                let v755 = &C::put_in_xmm_mem(ctx, v691.0);
                                let v788 = constructor_x64_pcmpgt(ctx, I64X2, v754, v755);
                                let v748 = constructor_vector_all_ones(ctx);
                                let v749 = &C::xmm_to_xmm_mem(ctx, v748);
                                let v789 = constructor_x64_pxor(ctx, v788, v749);
                                let v790 = constructor_output_xmm(ctx, v789);
                                // Rule at src/isa/x64/lower.isle line 1616.
                                return Some(v790);
                            }
                            _ => {}
                        }
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v771 = constructor_x64_pmaxs(ctx, v743, v744, v745);
                            let v772 = constructor_put_in_xmm(ctx, v691.0);
                            let v773 = &C::xmm_to_xmm_mem(ctx, v771);
                            let v774 = constructor_x64_pcmpeq(ctx, v743, v772, v773);
                            let v775 = constructor_output_xmm(ctx, v774);
                            // Rule at src/isa/x64/lower.isle line 1601.
                            return Some(v775);
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v691 = C::unpack_value_array_2(ctx, v689);
                                let v694 = C::value_type(ctx, v691.0);
                                match v694 {
                                    I32 => {
                                        let v700 = C::def_inst(ctx, v691.1);
                                        if let Some(v701) = v700 {
                                            let v702 = &C::inst_data(ctx, v701);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v703,
                                                imm: v704,
                                            } = v702
                                            {
                                                if let &Opcode::Iconst = v703 {
                                                    let v705 = C::u64_from_imm64(ctx, v704);
                                                    if v705 == 0x0 {
                                                        let v706 =
                                                            constructor_put_in_gpr(ctx, v691.0);
                                                        let v731 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v732 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v731);
                                                        let v733 = constructor_x64_shr(
                                                            ctx, I32, v706, v732,
                                                        );
                                                        let v734 =
                                                            constructor_output_gpr(ctx, v733);
                                                        // Rule at src/isa/x64/lower.isle line 1544.
                                                        return Some(v734);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v700 = C::def_inst(ctx, v691.1);
                                        if let Some(v701) = v700 {
                                            let v702 = &C::inst_data(ctx, v701);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v703,
                                                imm: v704,
                                            } = v702
                                            {
                                                if let &Opcode::Iconst = v703 {
                                                    let v705 = C::u64_from_imm64(ctx, v704);
                                                    if v705 == 0x0 {
                                                        let v706 =
                                                            constructor_put_in_gpr(ctx, v691.0);
                                                        let v708 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v709 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v708);
                                                        let v710 = constructor_x64_shr(
                                                            ctx, I64, v706, v709,
                                                        );
                                                        let v711 =
                                                            constructor_output_gpr(ctx, v710);
                                                        // Rule at src/isa/x64/lower.isle line 1528.
                                                        return Some(v711);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v754 = constructor_put_in_xmm(ctx, v691.1);
                            let v755 = &C::put_in_xmm_mem(ctx, v691.0);
                            let v756 = constructor_x64_pcmpgt(ctx, v743, v754, v755);
                            let v757 = constructor_output_xmm(ctx, v756);
                            // Rule at src/isa/x64/lower.isle line 1578.
                            return Some(v757);
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v691 = C::unpack_value_array_2(ctx, v689);
                                let v712 = C::def_inst(ctx, v691.0);
                                if let Some(v713) = v712 {
                                    let v714 = &C::inst_data(ctx, v713);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v715,
                                        imm: v716,
                                    } = v714
                                    {
                                        if let &Opcode::Iconst = v715 {
                                            let v717 = C::u64_from_imm64(ctx, v716);
                                            if v717 == 0x0 {
                                                let v718 = C::value_type(ctx, v691.1);
                                                match v718 {
                                                    I32 => {
                                                        let v719 =
                                                            constructor_put_in_gpr(ctx, v691.1);
                                                        let v722 =
                                                            constructor_x64_not(ctx, I64, v719);
                                                        let v731 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v737 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v731);
                                                        let v738 = constructor_x64_shr(
                                                            ctx, I32, v722, v737,
                                                        );
                                                        let v739 =
                                                            constructor_output_gpr(ctx, v738);
                                                        // Rule at src/isa/x64/lower.isle line 1552.
                                                        return Some(v739);
                                                    }
                                                    I64 => {
                                                        let v719 =
                                                            constructor_put_in_gpr(ctx, v691.1);
                                                        let v722 =
                                                            constructor_x64_not(ctx, I64, v719);
                                                        let v708 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v723 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v708);
                                                        let v724 = constructor_x64_shr(
                                                            ctx, I64, v722, v723,
                                                        );
                                                        let v725 =
                                                            constructor_output_gpr(ctx, v724);
                                                        // Rule at src/isa/x64/lower.isle line 1536.
                                                        return Some(v725);
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        if v694 == I64X2 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v791 = constructor_x64_pcmpgt(ctx, I64X2, v744, v745);
                            let v748 = constructor_vector_all_ones(ctx);
                            let v749 = &C::xmm_to_xmm_mem(ctx, v748);
                            let v792 = constructor_x64_pxor(ctx, v791, v749);
                            let v793 = constructor_output_xmm(ctx, v792);
                            // Rule at src/isa/x64/lower.isle line 1620.
                            return Some(v793);
                        }
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v776 = constructor_x64_pmins(ctx, v743, v744, v745);
                            let v772 = constructor_put_in_xmm(ctx, v691.0);
                            let v777 = &C::xmm_to_xmm_mem(ctx, v776);
                            let v778 = constructor_x64_pcmpeq(ctx, v743, v772, v777);
                            let v779 = constructor_output_xmm(ctx, v778);
                            // Rule at src/isa/x64/lower.isle line 1604.
                            return Some(v779);
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v758 = constructor_put_in_xmm(ctx, v691.1);
                            let v759 = &C::xmm_to_xmm_mem(ctx, v758);
                            let v760 = constructor_x64_pmaxu(ctx, v743, v744, v759);
                            let v761 = &C::xmm_to_xmm_mem(ctx, v758);
                            let v762 = constructor_x64_pcmpeq(ctx, v743, v760, v761);
                            let v763 = constructor_vector_all_ones(ctx);
                            let v764 = &C::xmm_to_xmm_mem(ctx, v763);
                            let v765 = constructor_x64_pxor(ctx, v762, v764);
                            let v766 = constructor_output_xmm(ctx, v765);
                            // Rule at src/isa/x64/lower.isle line 1580.
                            return Some(v766);
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v780 = constructor_x64_pmaxu(ctx, v743, v744, v745);
                            let v772 = constructor_put_in_xmm(ctx, v691.0);
                            let v781 = &C::xmm_to_xmm_mem(ctx, v780);
                            let v782 = constructor_x64_pcmpeq(ctx, v743, v772, v781);
                            let v783 = constructor_output_xmm(ctx, v782);
                            // Rule at src/isa/x64/lower.isle line 1607.
                            return Some(v783);
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v758 = constructor_put_in_xmm(ctx, v691.1);
                            let v759 = &C::xmm_to_xmm_mem(ctx, v758);
                            let v767 = constructor_x64_pminu(ctx, v743, v744, v759);
                            let v761 = &C::xmm_to_xmm_mem(ctx, v758);
                            let v768 = constructor_x64_pcmpeq(ctx, v743, v767, v761);
                            let v763 = constructor_vector_all_ones(ctx);
                            let v764 = &C::xmm_to_xmm_mem(ctx, v763);
                            let v769 = constructor_x64_pxor(ctx, v768, v764);
                            let v770 = constructor_output_xmm(ctx, v769);
                            // Rule at src/isa/x64/lower.isle line 1590.
                            return Some(v770);
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v691 = C::unpack_value_array_2(ctx, v689);
                        let v694 = C::value_type(ctx, v691.0);
                        let v742 = C::ty_vec128(ctx, v694);
                        if let Some(v743) = v742 {
                            let v744 = constructor_put_in_xmm(ctx, v691.0);
                            let v745 = &C::put_in_xmm_mem(ctx, v691.1);
                            let v784 = constructor_x64_pminu(ctx, v743, v744, v745);
                            let v772 = constructor_put_in_xmm(ctx, v691.0);
                            let v785 = &C::xmm_to_xmm_mem(ctx, v784);
                            let v786 = constructor_x64_pcmpeq(ctx, v743, v772, v785);
                            let v787 = constructor_output_xmm(ctx, v786);
                            // Rule at src/isa/x64/lower.isle line 1610.
                            return Some(v787);
                        }
                    }
                    _ => {}
                }
                let v691 = C::unpack_value_array_2(ctx, v689);
                let v694 = C::value_type(ctx, v691.0);
                if v694 == I128 {
                    let v697 = &constructor_emit_cmp(ctx, v690, v691.0, v691.1);
                    let v698 = constructor_lower_icmp_bool(ctx, v697);
                    let v699 = C::output(ctx, v698);
                    // Rule at src/isa/x64/lower.isle line 1524.
                    return Some(v699);
                }
                let v695 = C::fits_in_64(ctx, v694);
                if let Some(v696) = v695 {
                    let v697 = &constructor_emit_cmp(ctx, v690, v691.0, v691.1);
                    let v698 = constructor_lower_icmp_bool(ctx, v697);
                    let v699 = C::output(ctx, v698);
                    // Rule at src/isa/x64/lower.isle line 1521.
                    return Some(v699);
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1258,
            arg: v1259,
            flags: v1260,
            offset: v1261,
        } => {
            match v1258 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                                let v1291 = constructor_x64_movss_load(ctx, v1290);
                                let v1292 = constructor_output_xmm(ctx, v1291);
                                // Rule at src/isa/x64/lower.isle line 2589.
                                return Some(v1292);
                            }
                            F64 => {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                                let v1293 = constructor_x64_movsd_load(ctx, v1290);
                                let v1294 = constructor_output_xmm(ctx, v1293);
                                // Rule at src/isa/x64/lower.isle line 2591.
                                return Some(v1294);
                            }
                            F32X4 => {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                                let v1295 = constructor_x64_movups(ctx, v1290);
                                let v1296 = constructor_output_xmm(ctx, v1295);
                                // Rule at src/isa/x64/lower.isle line 2593.
                                return Some(v1296);
                            }
                            F64X2 => {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                                let v1297 = constructor_x64_movupd(ctx, v1290);
                                let v1298 = constructor_output_xmm(ctx, v1297);
                                // Rule at src/isa/x64/lower.isle line 2595.
                                return Some(v1298);
                            }
                            _ => {}
                        }
                        let v1269 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v1270) = v1269 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1272 = constructor_x64_mov(ctx, v1271);
                            let v1273 = constructor_output_reg(ctx, v1272);
                            // Rule at src/isa/x64/lower.isle line 2567.
                            return Some(v1273);
                        }
                        let v1299 = C::ty_vec128(ctx, v3);
                        if let Some(v1300) = v1299 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1301 = constructor_x64_movdqu(ctx, v1290);
                            let v1302 = constructor_output_xmm(ctx, v1301);
                            // Rule at src/isa/x64/lower.isle line 2597.
                            return Some(v1302);
                        }
                        if v3 == I128 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1304 = &C::amode_offset(ctx, v1271, 0x8);
                            let v1305 = constructor_x64_mov(ctx, v1271);
                            let v1306 = constructor_x64_mov(ctx, v1304);
                            let v1307 = C::value_regs(ctx, v1305, v1306);
                            let v1308 = C::output(ctx, v1307);
                            // Rule at src/isa/x64/lower.isle line 2601.
                            return Some(v1308);
                        }
                        let v1076 = C::fits_in_32(ctx, v3);
                        if let Some(v1077) = v1076 {
                            let v1255 = &C::type_register_class(ctx, v3);
                            if let Some(v1256) = v1255 {
                                if let &RegisterClass::Gpr {
                                    single_register: v1257,
                                } = v1256
                                {
                                    let v1262 = C::ty_bits_u16(ctx, v1077);
                                    let v1264 = &C::ext_mode(ctx, v1262, 0x40);
                                    let v1265 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                    let v1266 = &constructor_amode_to_gpr_mem(ctx, v1265);
                                    let v1267 = constructor_x64_movzx(ctx, v1264, v1266);
                                    let v1268 = constructor_output_gpr(ctx, v1267);
                                    // Rule at src/isa/x64/lower.isle line 2563.
                                    return Some(v1268);
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1276 = constructor_x64_movzx(ctx, &ExtMode::BQ, v1275);
                                let v1277 = constructor_output_gpr(ctx, v1276);
                                // Rule at src/isa/x64/lower.isle line 2572.
                                return Some(v1277);
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1278 = constructor_x64_movsx(ctx, &ExtMode::BQ, v1275);
                                let v1279 = constructor_output_gpr(ctx, v1278);
                                // Rule at src/isa/x64/lower.isle line 2574.
                                return Some(v1279);
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1281 = constructor_x64_movzx(ctx, &ExtMode::WQ, v1275);
                                let v1282 = constructor_output_gpr(ctx, v1281);
                                // Rule at src/isa/x64/lower.isle line 2576.
                                return Some(v1282);
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1283 = constructor_x64_movsx(ctx, &ExtMode::WQ, v1275);
                                let v1284 = constructor_output_gpr(ctx, v1283);
                                // Rule at src/isa/x64/lower.isle line 2578.
                                return Some(v1284);
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1286 = constructor_x64_movzx(ctx, &ExtMode::LQ, v1275);
                                let v1287 = constructor_output_gpr(ctx, v1286);
                                // Rule at src/isa/x64/lower.isle line 2580.
                                return Some(v1287);
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            if let &RegisterClass::Gpr {
                                single_register: v1257,
                            } = v1256
                            {
                                let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                                let v1275 = &constructor_amode_to_gpr_mem(ctx, v1271);
                                let v1288 = constructor_x64_movsx(ctx, &ExtMode::LQ, v1275);
                                let v1289 = constructor_output_gpr(ctx, v1288);
                                // Rule at src/isa/x64/lower.isle line 2582.
                                return Some(v1289);
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1311 = constructor_x64_pmovzxbw(ctx, v1290);
                            let v1312 = constructor_output_xmm(ctx, v1311);
                            // Rule at src/isa/x64/lower.isle line 2613.
                            return Some(v1312);
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1309 = constructor_x64_pmovsxbw(ctx, v1290);
                            let v1310 = constructor_output_xmm(ctx, v1309);
                            // Rule at src/isa/x64/lower.isle line 2611.
                            return Some(v1310);
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1315 = constructor_x64_pmovzxwd(ctx, v1290);
                            let v1316 = constructor_output_xmm(ctx, v1315);
                            // Rule at src/isa/x64/lower.isle line 2617.
                            return Some(v1316);
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1313 = constructor_x64_pmovsxwd(ctx, v1290);
                            let v1314 = constructor_output_xmm(ctx, v1313);
                            // Rule at src/isa/x64/lower.isle line 2615.
                            return Some(v1314);
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1319 = constructor_x64_pmovzxdq(ctx, v1290);
                            let v1320 = constructor_output_xmm(ctx, v1319);
                            // Rule at src/isa/x64/lower.isle line 2621.
                            return Some(v1320);
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1271 = &constructor_to_amode(ctx, v1260, v1259, v1261);
                            let v1290 = &constructor_amode_to_xmm_mem(ctx, v1271);
                            let v1317 = constructor_x64_pmovsxdq(ctx, v1290);
                            let v1318 = constructor_output_xmm(ctx, v1317);
                            // Rule at src/isa/x64/lower.isle line 2619.
                            return Some(v1318);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1450,
            arg: v1451,
            flags: v1452,
        } => {
            match v1450 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1255 = &C::type_register_class(ctx, v3);
                        if let Some(v1256) = v1255 {
                            match v1256 {
                                &RegisterClass::Gpr {
                                    single_register: v1257,
                                } => {
                                    let v1740 = C::value_type(ctx, v1451);
                                    let v1751 = &C::type_register_class(ctx, v1740);
                                    if let Some(v1752) = v1751 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v1753,
                                        } = v1752
                                        {
                                            let v1754 = constructor_output_value(ctx, v1451);
                                            // Rule at src/isa/x64/lower.isle line 3353.
                                            return Some(v1754);
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v1740 = C::value_type(ctx, v1451);
                                    let v1751 = &C::type_register_class(ctx, v1740);
                                    if let Some(v1752) = v1751 {
                                        if let &RegisterClass::Xmm = v1752 {
                                            let v1754 = constructor_output_value(ctx, v1451);
                                            // Rule at src/isa/x64/lower.isle line 3357.
                                            return Some(v1754);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1740 = C::value_type(ctx, v1451);
                                if v1740 == F32 {
                                    let v1741 = constructor_put_in_xmm(ctx, v1451);
                                    let v1742 = constructor_bitcast_xmm_to_gpr(ctx, F32, v1741);
                                    let v1743 = constructor_output_gpr(ctx, v1742);
                                    // Rule at src/isa/x64/lower.isle line 3340.
                                    return Some(v1743);
                                }
                            }
                            I64 => {
                                let v1740 = C::value_type(ctx, v1451);
                                if v1740 == F64 {
                                    let v1741 = constructor_put_in_xmm(ctx, v1451);
                                    let v1747 = constructor_bitcast_xmm_to_gpr(ctx, F64, v1741);
                                    let v1748 = constructor_output_gpr(ctx, v1747);
                                    // Rule at src/isa/x64/lower.isle line 3346.
                                    return Some(v1748);
                                }
                            }
                            F32 => {
                                let v1740 = C::value_type(ctx, v1451);
                                if v1740 == I32 {
                                    let v1744 = constructor_put_in_gpr(ctx, v1451);
                                    let v1745 = constructor_bitcast_gpr_to_xmm(ctx, I32, v1744);
                                    let v1746 = constructor_output_xmm(ctx, v1745);
                                    // Rule at src/isa/x64/lower.isle line 3343.
                                    return Some(v1746);
                                }
                            }
                            F64 => {
                                let v1740 = C::value_type(ctx, v1451);
                                if v1740 == I64 {
                                    let v1744 = constructor_put_in_gpr(ctx, v1451);
                                    let v1749 = constructor_bitcast_gpr_to_xmm(ctx, I64, v1744);
                                    let v1750 = constructor_output_xmm(ctx, v1749);
                                    // Rule at src/isa/x64/lower.isle line 3349.
                                    return Some(v1750);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v1453 = C::zero_offset(ctx);
                            let v1454 = &constructor_to_amode(ctx, v1452, v1451, v1453);
                            let v1455 = constructor_x64_mov(ctx, v1454);
                            let v1456 = constructor_output_reg(ctx, v1455);
                            // Rule at src/isa/x64/lower.isle line 2852.
                            return Some(v1456);
                        }
                        let v1076 = C::fits_in_32(ctx, v3);
                        if let Some(v1077) = v1076 {
                            let v1457 = C::ty_int(ctx, v3);
                            if let Some(v1458) = v1457 {
                                let v1262 = C::ty_bits_u16(ctx, v1077);
                                let v1264 = &C::ext_mode(ctx, v1262, 0x40);
                                let v1459 = C::zero_offset(ctx);
                                let v1460 = &constructor_to_amode(ctx, v1452, v1451, v1459);
                                let v1461 = &constructor_amode_to_gpr_mem(ctx, v1460);
                                let v1462 = constructor_x64_movzx(ctx, v1264, v1461);
                                let v1463 = constructor_output_gpr(ctx, v1462);
                                // Rule at src/isa/x64/lower.isle line 2854.
                                return Some(v1463);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v682,
            args: v683,
        } => {
            if let &Opcode::Return = v682 {
                let v684 = C::value_list_slice(ctx, v683);
                let v685 = C::value_slice_len(ctx, v684);
                let v686 = C::range(ctx, 0x0, v685);
                let v687 = constructor_lower_return(ctx, v686, v684);
                // Rule at src/isa/x64/lower.isle line 1516.
                return Some(v687);
            }
        }
        &InstructionData::NullAry { opcode: ref v30 } => {
            match v30 {
                &Opcode::Debugtrap => {
                    let v1096 = &constructor_x64_hlt(ctx);
                    let v1097 = constructor_side_effect(ctx, v1096);
                    // Rule at src/isa/x64/lower.isle line 2266.
                    return Some(v1097);
                }
                &Opcode::GetPinnedReg => {
                    let v1868 = constructor_read_pinned_gpr(ctx);
                    let v1869 = constructor_output_gpr(ctx, v1868);
                    // Rule at src/isa/x64/lower.isle line 3515.
                    return Some(v1869);
                }
                &Opcode::GetFramePointer => {
                    let v1527 = constructor_x64_rbp(ctx);
                    let v1528 = constructor_output_reg(ctx, v1527);
                    // Rule at src/isa/x64/lower.isle line 2901.
                    return Some(v1528);
                }
                &Opcode::GetStackPointer => {
                    let v1529 = constructor_x64_rsp(ctx);
                    let v1530 = constructor_output_reg(ctx, v1529);
                    // Rule at src/isa/x64/lower.isle line 2904.
                    return Some(v1530);
                }
                &Opcode::GetReturnAddress => {
                    let v1527 = constructor_x64_rbp(ctx);
                    let v1531 = C::mem_flags_trusted(ctx);
                    let v1532 = Amode::ImmReg {
                        simm32: 0x8,
                        base: v1527,
                        flags: v1531,
                    };
                    let v1533 = &C::amode_to_synthetic_amode(ctx, &v1532);
                    let v1534 = constructor_x64_load(ctx, I64, v1533, &ExtKind::None);
                    let v1535 = constructor_output_reg(ctx, v1534);
                    // Rule at src/isa/x64/lower.isle line 2907.
                    return Some(v1535);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v31 = constructor_imm(ctx, v3, 0x0);
                        let v32 = constructor_output_reg(ctx, v31);
                        // Rule at src/isa/x64/lower.isle line 37.
                        return Some(v32);
                    }
                }
                &Opcode::Nop => {
                    let v2054 = C::invalid_reg(ctx);
                    let v2055 = constructor_output_reg(ctx, v2054);
                    // Rule at src/isa/x64/lower.isle line 3793.
                    return Some(v2055);
                }
                &Opcode::Fence => {
                    let v1430 = &constructor_x64_mfence(ctx);
                    let v1431 = constructor_side_effect(ctx, v1430);
                    // Rule at src/isa/x64/lower.isle line 2830.
                    return Some(v1431);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1877,
            args: ref v1878,
            imm: v1879,
        } => {
            if let &Opcode::Shuffle = v1877 {
                let v1883 = &C::vec_mask_from_immediate(ctx, v1879);
                if let Some(v1884) = v1883 {
                    let v1880 = C::unpack_value_array_2(ctx, v1878);
                    if v1880.0 == v1880.1 {
                        let v1885 = constructor_put_in_xmm(ctx, v1880.0);
                        let v1886 = C::shuffle_0_31_mask(ctx, v1884);
                        let v1887 = constructor_x64_xmm_load_const(ctx, I8X16, v1886);
                        let v1888 = &C::xmm_to_xmm_mem(ctx, v1887);
                        let v1889 = constructor_x64_pshufb(ctx, v1885, v1888);
                        let v1890 = constructor_output_xmm(ctx, v1889);
                        // Rule at src/isa/x64/lower.isle line 3535.
                        return Some(v1890);
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v363 = C::avx512vl_enabled(ctx, v3);
                        if v363 == true {
                            let v1891 = C::avx512vbmi_enabled(ctx, v3);
                            if v1891 == true {
                                let v1892 = C::perm_from_mask_with_zeros(ctx, v1884);
                                if let Some(v1893) = v1892 {
                                    let v1896 = constructor_x64_xmm_load_const(ctx, I8X16, v1893.1);
                                    let v1897 = constructor_put_in_xmm(ctx, v1880.1);
                                    let v1898 = constructor_put_in_xmm(ctx, v1880.0);
                                    let v1899 = constructor_x64_xmm_load_const(ctx, I8X16, v1893.0);
                                    let v1900 = constructor_x64_vpermi2b(ctx, v1897, v1898, v1899);
                                    let v1901 = &C::xmm_to_xmm_mem(ctx, v1900);
                                    let v1902 = constructor_x64_andps(ctx, v1896, v1901);
                                    let v1903 = constructor_output_xmm(ctx, v1902);
                                    // Rule at src/isa/x64/lower.isle line 3541.
                                    return Some(v1903);
                                }
                                let v1904 = constructor_put_in_xmm(ctx, v1880.1);
                                let v1905 = constructor_put_in_xmm(ctx, v1880.0);
                                let v1906 = C::perm_from_mask(ctx, v1884);
                                let v1907 = constructor_x64_xmm_load_const(ctx, I8X16, v1906);
                                let v1908 = constructor_x64_vpermi2b(ctx, v1904, v1905, v1907);
                                let v1909 = constructor_output_xmm(ctx, v1908);
                                // Rule at src/isa/x64/lower.isle line 3550.
                                return Some(v1909);
                            }
                        }
                    }
                    let v1885 = constructor_put_in_xmm(ctx, v1880.0);
                    let v1910 = C::shuffle_0_15_mask(ctx, v1884);
                    let v1911 = constructor_x64_xmm_load_const(ctx, I8X16, v1910);
                    let v1912 = &C::xmm_to_xmm_mem(ctx, v1911);
                    let v1913 = constructor_x64_pshufb(ctx, v1885, v1912);
                    let v1914 = constructor_put_in_xmm(ctx, v1880.1);
                    let v1915 = C::shuffle_16_31_mask(ctx, v1884);
                    let v1916 = constructor_x64_xmm_load_const(ctx, I8X16, v1915);
                    let v1917 = &C::xmm_to_xmm_mem(ctx, v1916);
                    let v1918 = constructor_x64_pshufb(ctx, v1914, v1917);
                    let v1919 = &C::xmm_to_xmm_mem(ctx, v1918);
                    let v1920 = constructor_x64_por(ctx, v1913, v1919);
                    let v1921 = constructor_output_xmm(ctx, v1920);
                    // Rule at src/isa/x64/lower.isle line 3557.
                    return Some(v1921);
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1832,
            stack_slot: v1833,
            offset: v1834,
        } => {
            if let &Opcode::StackAddr = v1832 {
                let v1835 = constructor_stack_addr_impl(ctx, v1833, v1834);
                let v1836 = constructor_output_gpr(ctx, v1835);
                // Rule at src/isa/x64/lower.isle line 3456.
                return Some(v1836);
            }
        }
        &InstructionData::Store {
            opcode: ref v1321,
            args: ref v1322,
            flags: v1323,
            offset: v1324,
        } => {
            match v1321 {
                &Opcode::Store => {
                    let v1325 = C::unpack_value_array_2(ctx, v1322);
                    let v1373 = C::def_inst(ctx, v1325.0);
                    if let Some(v1374) = v1373 {
                        let v1375 = C::first_result(ctx, v1374);
                        if let Some(v1376) = v1375 {
                            let v1377 = C::value_type(ctx, v1376);
                            let v1378 = C::ty_32_or_64(ctx, v1377);
                            if let Some(v1379) = v1378 {
                                let v1380 = &C::inst_data(ctx, v1374);
                                if let &InstructionData::Binary {
                                    opcode: ref v1381,
                                    args: ref v1382,
                                } = v1380
                                {
                                    match v1381 {
                                        &Opcode::Iadd => {
                                            let v1383 = C::unpack_value_array_2(ctx, v1382);
                                            let v1386 = &C::sinkable_load(ctx, v1383.0);
                                            if let Some(v1387) = v1386 {
                                                let v1388 = C::def_inst(ctx, v1383.0);
                                                if let Some(v1389) = v1388 {
                                                    let v1390 = &C::inst_data(ctx, v1389);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1391,
                                                        arg: v1392,
                                                        flags: v1393,
                                                        offset: v1394,
                                                    } = v1390
                                                    {
                                                        if let &Opcode::Load = v1391 {
                                                            if v1323 == v1393 {
                                                                if v1324 == v1394 {
                                                                    if v1325.1 == v1392 {
                                                                        let v1395 = &C::sink_load(
                                                                            ctx, v1387,
                                                                        );
                                                                        let v1396 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1395);
                                                                        let v1397 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1393, v1392,
                                                                                v1394,
                                                                            );
                                                                        let v1398 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.1,
                                                                            );
                                                                        let v1399 = &constructor_x64_add_mem(ctx, v1379, v1397, v1398);
                                                                        let v1400 =
                                                                            constructor_side_effect(
                                                                                ctx, v1399,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2703.
                                                                        return Some(v1400);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1401 = &C::sinkable_load(ctx, v1383.1);
                                            if let Some(v1402) = v1401 {
                                                let v1403 = C::def_inst(ctx, v1383.1);
                                                if let Some(v1404) = v1403 {
                                                    let v1405 = &C::inst_data(ctx, v1404);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1406,
                                                        arg: v1407,
                                                        flags: v1408,
                                                        offset: v1409,
                                                    } = v1405
                                                    {
                                                        if let &Opcode::Load = v1406 {
                                                            if v1323 == v1408 {
                                                                if v1324 == v1409 {
                                                                    if v1325.1 == v1407 {
                                                                        let v1410 = &C::sink_load(
                                                                            ctx, v1402,
                                                                        );
                                                                        let v1411 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1410);
                                                                        let v1412 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1408, v1407,
                                                                                v1409,
                                                                            );
                                                                        let v1413 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.0,
                                                                            );
                                                                        let v1414 = &constructor_x64_add_mem(ctx, v1379, v1412, v1413);
                                                                        let v1415 =
                                                                            constructor_side_effect(
                                                                                ctx, v1414,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2717.
                                                                        return Some(v1415);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v1383 = C::unpack_value_array_2(ctx, v1382);
                                            let v1386 = &C::sinkable_load(ctx, v1383.0);
                                            if let Some(v1387) = v1386 {
                                                let v1388 = C::def_inst(ctx, v1383.0);
                                                if let Some(v1389) = v1388 {
                                                    let v1390 = &C::inst_data(ctx, v1389);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1391,
                                                        arg: v1392,
                                                        flags: v1393,
                                                        offset: v1394,
                                                    } = v1390
                                                    {
                                                        if let &Opcode::Load = v1391 {
                                                            if v1323 == v1393 {
                                                                if v1324 == v1394 {
                                                                    if v1325.1 == v1392 {
                                                                        let v1395 = &C::sink_load(
                                                                            ctx, v1387,
                                                                        );
                                                                        let v1396 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1395);
                                                                        let v1397 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1393, v1392,
                                                                                v1394,
                                                                            );
                                                                        let v1398 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.1,
                                                                            );
                                                                        let v1416 = &constructor_x64_sub_mem(ctx, v1379, v1397, v1398);
                                                                        let v1417 =
                                                                            constructor_side_effect(
                                                                                ctx, v1416,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2731.
                                                                        return Some(v1417);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v1383 = C::unpack_value_array_2(ctx, v1382);
                                            let v1386 = &C::sinkable_load(ctx, v1383.0);
                                            if let Some(v1387) = v1386 {
                                                let v1388 = C::def_inst(ctx, v1383.0);
                                                if let Some(v1389) = v1388 {
                                                    let v1390 = &C::inst_data(ctx, v1389);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1391,
                                                        arg: v1392,
                                                        flags: v1393,
                                                        offset: v1394,
                                                    } = v1390
                                                    {
                                                        if let &Opcode::Load = v1391 {
                                                            if v1323 == v1393 {
                                                                if v1324 == v1394 {
                                                                    if v1325.1 == v1392 {
                                                                        let v1395 = &C::sink_load(
                                                                            ctx, v1387,
                                                                        );
                                                                        let v1396 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1395);
                                                                        let v1397 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1393, v1392,
                                                                                v1394,
                                                                            );
                                                                        let v1398 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.1,
                                                                            );
                                                                        let v1418 = &constructor_x64_and_mem(ctx, v1379, v1397, v1398);
                                                                        let v1419 =
                                                                            constructor_side_effect(
                                                                                ctx, v1418,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2745.
                                                                        return Some(v1419);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1401 = &C::sinkable_load(ctx, v1383.1);
                                            if let Some(v1402) = v1401 {
                                                let v1403 = C::def_inst(ctx, v1383.1);
                                                if let Some(v1404) = v1403 {
                                                    let v1405 = &C::inst_data(ctx, v1404);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1406,
                                                        arg: v1407,
                                                        flags: v1408,
                                                        offset: v1409,
                                                    } = v1405
                                                    {
                                                        if let &Opcode::Load = v1406 {
                                                            if v1323 == v1408 {
                                                                if v1324 == v1409 {
                                                                    if v1325.1 == v1407 {
                                                                        let v1410 = &C::sink_load(
                                                                            ctx, v1402,
                                                                        );
                                                                        let v1411 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1410);
                                                                        let v1412 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1408, v1407,
                                                                                v1409,
                                                                            );
                                                                        let v1413 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.0,
                                                                            );
                                                                        let v1420 = &constructor_x64_and_mem(ctx, v1379, v1412, v1413);
                                                                        let v1421 =
                                                                            constructor_side_effect(
                                                                                ctx, v1420,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2759.
                                                                        return Some(v1421);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v1383 = C::unpack_value_array_2(ctx, v1382);
                                            let v1386 = &C::sinkable_load(ctx, v1383.0);
                                            if let Some(v1387) = v1386 {
                                                let v1388 = C::def_inst(ctx, v1383.0);
                                                if let Some(v1389) = v1388 {
                                                    let v1390 = &C::inst_data(ctx, v1389);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1391,
                                                        arg: v1392,
                                                        flags: v1393,
                                                        offset: v1394,
                                                    } = v1390
                                                    {
                                                        if let &Opcode::Load = v1391 {
                                                            if v1323 == v1393 {
                                                                if v1324 == v1394 {
                                                                    if v1325.1 == v1392 {
                                                                        let v1395 = &C::sink_load(
                                                                            ctx, v1387,
                                                                        );
                                                                        let v1396 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1395);
                                                                        let v1397 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1393, v1392,
                                                                                v1394,
                                                                            );
                                                                        let v1398 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.1,
                                                                            );
                                                                        let v1422 =
                                                                            &constructor_x64_or_mem(
                                                                                ctx, v1379, v1397,
                                                                                v1398,
                                                                            );
                                                                        let v1423 =
                                                                            constructor_side_effect(
                                                                                ctx, v1422,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2773.
                                                                        return Some(v1423);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1401 = &C::sinkable_load(ctx, v1383.1);
                                            if let Some(v1402) = v1401 {
                                                let v1403 = C::def_inst(ctx, v1383.1);
                                                if let Some(v1404) = v1403 {
                                                    let v1405 = &C::inst_data(ctx, v1404);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1406,
                                                        arg: v1407,
                                                        flags: v1408,
                                                        offset: v1409,
                                                    } = v1405
                                                    {
                                                        if let &Opcode::Load = v1406 {
                                                            if v1323 == v1408 {
                                                                if v1324 == v1409 {
                                                                    if v1325.1 == v1407 {
                                                                        let v1410 = &C::sink_load(
                                                                            ctx, v1402,
                                                                        );
                                                                        let v1411 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1410);
                                                                        let v1412 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1408, v1407,
                                                                                v1409,
                                                                            );
                                                                        let v1413 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.0,
                                                                            );
                                                                        let v1424 =
                                                                            &constructor_x64_or_mem(
                                                                                ctx, v1379, v1412,
                                                                                v1413,
                                                                            );
                                                                        let v1425 =
                                                                            constructor_side_effect(
                                                                                ctx, v1424,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2787.
                                                                        return Some(v1425);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v1383 = C::unpack_value_array_2(ctx, v1382);
                                            let v1386 = &C::sinkable_load(ctx, v1383.0);
                                            if let Some(v1387) = v1386 {
                                                let v1388 = C::def_inst(ctx, v1383.0);
                                                if let Some(v1389) = v1388 {
                                                    let v1390 = &C::inst_data(ctx, v1389);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1391,
                                                        arg: v1392,
                                                        flags: v1393,
                                                        offset: v1394,
                                                    } = v1390
                                                    {
                                                        if let &Opcode::Load = v1391 {
                                                            if v1323 == v1393 {
                                                                if v1324 == v1394 {
                                                                    if v1325.1 == v1392 {
                                                                        let v1395 = &C::sink_load(
                                                                            ctx, v1387,
                                                                        );
                                                                        let v1396 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1395);
                                                                        let v1397 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1393, v1392,
                                                                                v1394,
                                                                            );
                                                                        let v1398 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.1,
                                                                            );
                                                                        let v1426 = &constructor_x64_xor_mem(ctx, v1379, v1397, v1398);
                                                                        let v1427 =
                                                                            constructor_side_effect(
                                                                                ctx, v1426,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2801.
                                                                        return Some(v1427);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v1401 = &C::sinkable_load(ctx, v1383.1);
                                            if let Some(v1402) = v1401 {
                                                let v1403 = C::def_inst(ctx, v1383.1);
                                                if let Some(v1404) = v1403 {
                                                    let v1405 = &C::inst_data(ctx, v1404);
                                                    if let &InstructionData::Load {
                                                        opcode: ref v1406,
                                                        arg: v1407,
                                                        flags: v1408,
                                                        offset: v1409,
                                                    } = v1405
                                                    {
                                                        if let &Opcode::Load = v1406 {
                                                            if v1323 == v1408 {
                                                                if v1324 == v1409 {
                                                                    if v1325.1 == v1407 {
                                                                        let v1410 = &C::sink_load(
                                                                            ctx, v1402,
                                                                        );
                                                                        let v1411 = &constructor_reg_mem_to_reg_mem_imm(ctx, v1410);
                                                                        let v1412 =
                                                                            &constructor_to_amode(
                                                                                ctx, v1408, v1407,
                                                                                v1409,
                                                                            );
                                                                        let v1413 =
                                                                            constructor_put_in_gpr(
                                                                                ctx, v1383.0,
                                                                            );
                                                                        let v1428 = &constructor_x64_xor_mem(ctx, v1379, v1412, v1413);
                                                                        let v1429 =
                                                                            constructor_side_effect(
                                                                                ctx, v1428,
                                                                            );
                                                                        // Rule at src/isa/x64/lower.isle line 2815.
                                                                        return Some(v1429);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                    }
                    let v1328 = C::value_type(ctx, v1325.0);
                    match v1328 {
                        I128 => {
                            let v1362 = C::put_in_regs(ctx, v1325.0);
                            let v1363 = constructor_value_regs_get_gpr(ctx, v1362, 0x0);
                            let v1364 = constructor_value_regs_get_gpr(ctx, v1362, 0x1);
                            let v1365 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1366 = &C::amode_offset(ctx, v1365, 0x8);
                            let v1367 = &C::amode_to_synthetic_amode(ctx, v1365);
                            let v1368 = &constructor_x64_movrm(ctx, I64, v1367, v1363);
                            let v1369 = &C::amode_to_synthetic_amode(ctx, v1366);
                            let v1370 = &constructor_x64_movrm(ctx, I64, v1369, v1364);
                            let v1371 = &constructor_side_effect_concat(ctx, v1368, v1370);
                            let v1372 = constructor_side_effect(ctx, v1371);
                            // Rule at src/isa/x64/lower.isle line 2686.
                            return Some(v1372);
                        }
                        F32 => {
                            let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                            let v1345 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1346 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movss, v1333, v1345);
                            let v1347 = constructor_side_effect(ctx, v1346);
                            // Rule at src/isa/x64/lower.isle line 2646.
                            return Some(v1347);
                        }
                        F64 => {
                            let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                            let v1345 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1349 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movsd, v1333, v1345);
                            let v1350 = constructor_side_effect(ctx, v1349);
                            // Rule at src/isa/x64/lower.isle line 2654.
                            return Some(v1350);
                        }
                        F32X4 => {
                            let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                            let v1345 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1352 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movups, v1333, v1345);
                            let v1353 = constructor_side_effect(ctx, v1352);
                            // Rule at src/isa/x64/lower.isle line 2662.
                            return Some(v1353);
                        }
                        F64X2 => {
                            let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                            let v1345 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1355 =
                                &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movupd, v1333, v1345);
                            let v1356 = constructor_side_effect(ctx, v1355);
                            // Rule at src/isa/x64/lower.isle line 2670.
                            return Some(v1356);
                        }
                        _ => {}
                    }
                    let v1357 = C::ty_vec128_int(ctx, v1328);
                    if let Some(v1358) = v1357 {
                        let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                        let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                        let v1345 = constructor_put_in_xmm(ctx, v1325.0);
                        let v1360 =
                            &constructor_x64_xmm_movrm(ctx, &SseOpcode::Movdqu, v1333, v1345);
                        let v1361 = constructor_side_effect(ctx, v1360);
                        // Rule at src/isa/x64/lower.isle line 2678.
                        return Some(v1361);
                    }
                    let v1329 = &C::type_register_class(ctx, v1328);
                    if let Some(v1330) = v1329 {
                        if let &RegisterClass::Gpr {
                            single_register: v1331,
                        } = v1330
                        {
                            let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                            let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                            let v1334 = constructor_put_in_gpr(ctx, v1325.0);
                            let v1335 = &constructor_x64_movrm(ctx, v1328, v1333, v1334);
                            let v1336 = constructor_side_effect(ctx, v1335);
                            // Rule at src/isa/x64/lower.isle line 2627.
                            return Some(v1336);
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v1325 = C::unpack_value_array_2(ctx, v1322);
                    let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                    let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                    let v1334 = constructor_put_in_gpr(ctx, v1325.0);
                    let v1338 = &constructor_x64_movrm(ctx, I8, v1333, v1334);
                    let v1339 = constructor_side_effect(ctx, v1338);
                    // Rule at src/isa/x64/lower.isle line 2635.
                    return Some(v1339);
                }
                &Opcode::Istore16 => {
                    let v1325 = C::unpack_value_array_2(ctx, v1322);
                    let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                    let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                    let v1334 = constructor_put_in_gpr(ctx, v1325.0);
                    let v1340 = &constructor_x64_movrm(ctx, I16, v1333, v1334);
                    let v1341 = constructor_side_effect(ctx, v1340);
                    // Rule at src/isa/x64/lower.isle line 2638.
                    return Some(v1341);
                }
                &Opcode::Istore32 => {
                    let v1325 = C::unpack_value_array_2(ctx, v1322);
                    let v1332 = &constructor_to_amode(ctx, v1323, v1325.1, v1324);
                    let v1333 = &C::amode_to_synthetic_amode(ctx, v1332);
                    let v1334 = constructor_put_in_gpr(ctx, v1325.0);
                    let v1342 = &constructor_x64_movrm(ctx, I32, v1333, v1334);
                    let v1343 = constructor_side_effect(ctx, v1342);
                    // Rule at src/isa/x64/lower.isle line 2641.
                    return Some(v1343);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1464,
            args: ref v1465,
            flags: v1466,
        } => {
            if let &Opcode::AtomicStore = v1464 {
                let v1467 = C::unpack_value_array_2(ctx, v1465);
                let v1470 = C::value_type(ctx, v1467.0);
                let v1471 = C::fits_in_64(ctx, v1470);
                if let Some(v1472) = v1471 {
                    let v1473 = C::ty_int(ctx, v1470);
                    if let Some(v1474) = v1473 {
                        let v1453 = C::zero_offset(ctx);
                        let v1475 = &constructor_to_amode(ctx, v1466, v1467.1, v1453);
                        let v1476 = &C::amode_to_synthetic_amode(ctx, v1475);
                        let v1477 = constructor_put_in_gpr(ctx, v1467.0);
                        let v1478 = &constructor_x64_movrm(ctx, v1472, v1476, v1477);
                        let v1479 = &constructor_x64_mfence(ctx);
                        let v1480 = &constructor_side_effect_concat(ctx, v1478, v1479);
                        let v1481 = constructor_side_effect(ctx, v1480);
                        // Rule at src/isa/x64/lower.isle line 2862.
                        return Some(v1481);
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v573,
            args: ref v574,
        } => {
            match v573 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v575 = C::unpack_value_array_3(ctx, v574);
                        let v844 = C::maybe_uextend(ctx, v575.0);
                        if let Some(v845) = v844 {
                            let v846 = C::def_inst(ctx, v845);
                            if let Some(v847) = v846 {
                                let v848 = &C::inst_data(ctx, v847);
                                match v848 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v849,
                                        args: ref v850,
                                        cond: ref v851,
                                    } => {
                                        if let &Opcode::Fcmp = v849 {
                                            match v851 {
                                                &FloatCC::Equal => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v888 = &constructor_cmove_or_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NZ,
                                                        &CC::P,
                                                        v575.2,
                                                        v575.1,
                                                    );
                                                    let v889 =
                                                        constructor_with_flags(ctx, v878, v888);
                                                    let v890 = C::output(ctx, v889);
                                                    // Rule at src/isa/x64/lower.isle line 1770.
                                                    return Some(v890);
                                                }
                                                &FloatCC::GreaterThan => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v865 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NBE,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v866 =
                                                        constructor_with_flags(ctx, v855, v865);
                                                    let v867 = C::output(ctx, v866);
                                                    // Rule at src/isa/x64/lower.isle line 1722.
                                                    return Some(v867);
                                                }
                                                &FloatCC::GreaterThanOrEqual => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v868 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NB,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v869 =
                                                        constructor_with_flags(ctx, v855, v868);
                                                    let v870 = C::output(ctx, v869);
                                                    // Rule at src/isa/x64/lower.isle line 1725.
                                                    return Some(v870);
                                                }
                                                &FloatCC::LessThan => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v865 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NBE,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v879 =
                                                        constructor_with_flags(ctx, v878, v865);
                                                    let v880 = C::output(ctx, v879);
                                                    // Rule at src/isa/x64/lower.isle line 1745.
                                                    return Some(v880);
                                                }
                                                &FloatCC::LessThanOrEqual => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v868 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NB,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v881 =
                                                        constructor_with_flags(ctx, v878, v868);
                                                    let v882 = C::output(ctx, v881);
                                                    // Rule at src/isa/x64/lower.isle line 1748.
                                                    return Some(v882);
                                                }
                                                &FloatCC::NotEqual => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v891 = &constructor_cmove_or_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NZ,
                                                        &CC::P,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v892 =
                                                        constructor_with_flags(ctx, v878, v891);
                                                    let v893 = C::output(ctx, v892);
                                                    // Rule at src/isa/x64/lower.isle line 1773.
                                                    return Some(v893);
                                                }
                                                &FloatCC::Ordered => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v857 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::NP,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v858 =
                                                        constructor_with_flags(ctx, v855, v857);
                                                    let v859 = C::output(ctx, v858);
                                                    // Rule at src/isa/x64/lower.isle line 1716.
                                                    return Some(v859);
                                                }
                                                &FloatCC::Unordered => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v861 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::P,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v862 =
                                                        constructor_with_flags(ctx, v855, v861);
                                                    let v863 = C::output(ctx, v862);
                                                    // Rule at src/isa/x64/lower.isle line 1719.
                                                    return Some(v863);
                                                }
                                                &FloatCC::UnorderedOrGreaterThan => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v871 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::B,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v883 =
                                                        constructor_with_flags(ctx, v878, v871);
                                                    let v884 = C::output(ctx, v883);
                                                    // Rule at src/isa/x64/lower.isle line 1751.
                                                    return Some(v884);
                                                }
                                                &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v878 = &constructor_x64_ucomis(
                                                        ctx, v852.0, v852.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v875 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::BE,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v885 =
                                                        constructor_with_flags(ctx, v878, v875);
                                                    let v886 = C::output(ctx, v885);
                                                    // Rule at src/isa/x64/lower.isle line 1754.
                                                    return Some(v886);
                                                }
                                                &FloatCC::UnorderedOrLessThan => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v871 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::B,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v872 =
                                                        constructor_with_flags(ctx, v855, v871);
                                                    let v873 = C::output(ctx, v872);
                                                    // Rule at src/isa/x64/lower.isle line 1728.
                                                    return Some(v873);
                                                }
                                                &FloatCC::UnorderedOrLessThanOrEqual => {
                                                    let v852 = C::unpack_value_array_2(ctx, v850);
                                                    let v855 = &constructor_x64_ucomis(
                                                        ctx, v852.1, v852.0,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v875 = &constructor_cmove_from_values(
                                                        ctx,
                                                        v3,
                                                        &CC::BE,
                                                        v575.1,
                                                        v575.2,
                                                    );
                                                    let v876 =
                                                        constructor_with_flags(ctx, v855, v875);
                                                    let v877 = C::output(ctx, v876);
                                                    // Rule at src/isa/x64/lower.isle line 1731.
                                                    return Some(v877);
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v894,
                                        args: ref v895,
                                        cond: ref v896,
                                    } => {
                                        if let &Opcode::Icmp = v894 {
                                            let v897 = C::unpack_value_array_2(ctx, v895);
                                            let v900 = C::value_type(ctx, v897.0);
                                            let v901 = C::fits_in_64(ctx, v900);
                                            if let Some(v902) = v901 {
                                                let v903 = &C::raw_operand_size_of_type(ctx, v902);
                                                let v904 =
                                                    &constructor_put_in_gpr_mem_imm(ctx, v897.1);
                                                let v905 = constructor_put_in_gpr(ctx, v897.0);
                                                let v906 =
                                                    &constructor_x64_cmp(ctx, v903, v904, v905);
                                                let v907 = &C::intcc_to_cc(ctx, v896);
                                                let v3 = C::value_type(ctx, v2);
                                                let v908 = &constructor_cmove_from_values(
                                                    ctx, v3, v907, v575.1, v575.2,
                                                );
                                                let v909 = constructor_with_flags(ctx, v906, v908);
                                                let v910 = C::output(ctx, v909);
                                                // Rule at src/isa/x64/lower.isle line 1781.
                                                return Some(v910);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v911 = C::value_type(ctx, v575.0);
                        let v912 = C::fits_in_64(ctx, v911);
                        if let Some(v913) = v912 {
                            let v914 = &C::raw_operand_size_of_type(ctx, v913);
                            let v915 = constructor_put_in_gpr(ctx, v575.0);
                            let v916 = &C::gpr_to_gpr_mem_imm(ctx, v915);
                            let v917 = &constructor_x64_test(ctx, v914, v916, v915);
                            let v3 = C::value_type(ctx, v2);
                            let v918 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v575.1, v575.2);
                            let v919 = constructor_with_flags(ctx, v917, v918);
                            let v920 = C::output(ctx, v919);
                            // Rule at src/isa/x64/lower.isle line 1788.
                            return Some(v920);
                        }
                        if v911 == I128 {
                            let v922 = C::put_in_regs(ctx, v575.0);
                            let v923 = &constructor_cmp_zero_i128(ctx, &CC::Z, v922);
                            let v924 = constructor_select_icmp(ctx, v923, v575.1, v575.2);
                            let v925 = C::output(ctx, v924);
                            // Rule at src/isa/x64/lower.isle line 1795.
                            return Some(v925);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v575 = C::unpack_value_array_3(ctx, v574);
                    let v1536 = C::def_inst(ctx, v575.0);
                    if let Some(v1537) = v1536 {
                        let v1538 = &C::inst_data(ctx, v1537);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1539,
                            args: ref v1540,
                            cond: ref v1541,
                        } = v1538
                        {
                            if let &Opcode::Icmp = v1539 {
                                let v1542 = C::unpack_value_array_2(ctx, v1540);
                                let v1545 = &constructor_emit_cmp(ctx, v1541, v1542.0, v1542.1);
                                let v1546 = constructor_select_icmp(ctx, v1545, v575.1, v575.2);
                                let v1547 = C::output(ctx, v1546);
                                // Rule at src/isa/x64/lower.isle line 2966.
                                return Some(v1547);
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v911 = C::value_type(ctx, v575.0);
                        let v912 = C::fits_in_64(ctx, v911);
                        if let Some(v913) = v912 {
                            let v914 = &C::raw_operand_size_of_type(ctx, v913);
                            let v915 = constructor_put_in_gpr(ctx, v575.0);
                            let v916 = &C::gpr_to_gpr_mem_imm(ctx, v915);
                            let v917 = &constructor_x64_test(ctx, v914, v916, v915);
                            let v3 = C::value_type(ctx, v2);
                            let v918 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v575.1, v575.2);
                            let v919 = constructor_with_flags(ctx, v917, v918);
                            let v920 = C::output(ctx, v919);
                            // Rule at src/isa/x64/lower.isle line 2969.
                            return Some(v920);
                        }
                        if v911 == I128 {
                            let v922 = C::put_in_regs(ctx, v575.0);
                            let v923 = &constructor_cmp_zero_i128(ctx, &CC::Z, v922);
                            let v924 = constructor_select_icmp(ctx, v923, v575.1, v575.2);
                            let v925 = C::output(ctx, v924);
                            // Rule at src/isa/x64/lower.isle line 2974.
                            return Some(v925);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v575 = C::unpack_value_array_3(ctx, v574);
                            let v588 = constructor_all_ones_or_all_zeros(ctx, v575.0);
                            if let Some(v589) = v588 {
                                let v579 = constructor_put_in_xmm(ctx, v575.0);
                                let v590 = &C::put_in_xmm_mem(ctx, v575.1);
                                let v591 = constructor_put_in_xmm(ctx, v575.2);
                                let v592 = constructor_x64_blend(ctx, v3, v579, v590, v591);
                                let v593 = constructor_output_xmm(ctx, v592);
                                // Rule at src/isa/x64/lower.isle line 1305.
                                return Some(v593);
                            }
                            let v579 = constructor_put_in_xmm(ctx, v575.0);
                            let v580 = constructor_put_in_xmm(ctx, v575.1);
                            let v581 = &C::xmm_to_xmm_mem(ctx, v579);
                            let v582 = constructor_sse_and(ctx, v3, v580, v581);
                            let v583 = &C::put_in_xmm_mem(ctx, v575.2);
                            let v584 = constructor_sse_and_not(ctx, v3, v579, v583);
                            let v585 = &C::xmm_to_xmm_mem(ctx, v582);
                            let v586 = constructor_sse_or(ctx, v3, v584, v585);
                            let v587 = constructor_output_xmm(ctx, v586);
                            // Rule at src/isa/x64/lower.isle line 1291.
                            return Some(v587);
                        }
                    }
                }
                &Opcode::Vselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v575 = C::unpack_value_array_3(ctx, v574);
                            let v579 = constructor_put_in_xmm(ctx, v575.0);
                            let v590 = &C::put_in_xmm_mem(ctx, v575.1);
                            let v591 = constructor_put_in_xmm(ctx, v575.2);
                            let v592 = constructor_x64_blend(ctx, v3, v579, v590, v591);
                            let v593 = constructor_output_xmm(ctx, v592);
                            // Rule at src/isa/x64/lower.isle line 1325.
                            return Some(v593);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1246 = C::use_fma(ctx, v3);
                                if v1246 == true {
                                    let v575 = C::unpack_value_array_3(ctx, v574);
                                    let v579 = constructor_put_in_xmm(ctx, v575.0);
                                    let v580 = constructor_put_in_xmm(ctx, v575.1);
                                    let v591 = constructor_put_in_xmm(ctx, v575.2);
                                    let v1247 = constructor_x64_vfmadd213ss(ctx, v579, v580, v591);
                                    let v1248 = constructor_output_xmm(ctx, v1247);
                                    // Rule at src/isa/x64/lower.isle line 2546.
                                    return Some(v1248);
                                }
                                let v575 = C::unpack_value_array_3(ctx, v574);
                                let v1238 = C::put_in_reg(ctx, v575.0);
                                let v1239 = C::put_in_reg(ctx, v575.1);
                                let v1240 = C::put_in_reg(ctx, v575.2);
                                let v1241 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1238, v1239, v1240);
                                let v1242 = constructor_output_reg(ctx, v1241);
                                // Rule at src/isa/x64/lower.isle line 2542.
                                return Some(v1242);
                            }
                            F64 => {
                                let v1246 = C::use_fma(ctx, v3);
                                if v1246 == true {
                                    let v575 = C::unpack_value_array_3(ctx, v574);
                                    let v579 = constructor_put_in_xmm(ctx, v575.0);
                                    let v580 = constructor_put_in_xmm(ctx, v575.1);
                                    let v591 = constructor_put_in_xmm(ctx, v575.2);
                                    let v1249 = constructor_x64_vfmadd213sd(ctx, v579, v580, v591);
                                    let v1250 = constructor_output_xmm(ctx, v1249);
                                    // Rule at src/isa/x64/lower.isle line 2548.
                                    return Some(v1250);
                                }
                                let v575 = C::unpack_value_array_3(ctx, v574);
                                let v1238 = C::put_in_reg(ctx, v575.0);
                                let v1239 = C::put_in_reg(ctx, v575.1);
                                let v1240 = C::put_in_reg(ctx, v575.2);
                                let v1244 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1238, v1239, v1240);
                                let v1245 = constructor_output_reg(ctx, v1244);
                                // Rule at src/isa/x64/lower.isle line 2544.
                                return Some(v1245);
                            }
                            F32X4 => {
                                let v1246 = C::use_fma(ctx, v3);
                                if v1246 == true {
                                    let v575 = C::unpack_value_array_3(ctx, v574);
                                    let v579 = constructor_put_in_xmm(ctx, v575.0);
                                    let v580 = constructor_put_in_xmm(ctx, v575.1);
                                    let v591 = constructor_put_in_xmm(ctx, v575.2);
                                    let v1251 = constructor_x64_vfmadd213ps(ctx, v579, v580, v591);
                                    let v1252 = constructor_output_xmm(ctx, v1251);
                                    // Rule at src/isa/x64/lower.isle line 2550.
                                    return Some(v1252);
                                }
                            }
                            F64X2 => {
                                let v1246 = C::use_fma(ctx, v3);
                                if v1246 == true {
                                    let v575 = C::unpack_value_array_3(ctx, v574);
                                    let v579 = constructor_put_in_xmm(ctx, v575.0);
                                    let v580 = constructor_put_in_xmm(ctx, v575.1);
                                    let v591 = constructor_put_in_xmm(ctx, v575.2);
                                    let v1253 = constructor_x64_vfmadd213pd(ctx, v579, v580, v591);
                                    let v1254 = constructor_output_xmm(ctx, v1253);
                                    // Rule at src/isa/x64/lower.isle line 2552.
                                    return Some(v1254);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v594,
            args: ref v595,
            imm: v596,
        } => {
            if let &Opcode::Insertlane = v594 {
                let v597 = C::unpack_value_array_2(ctx, v595);
                let v602 = constructor_put_in_xmm(ctx, v597.0);
                let v603 = &C::put_in_reg_mem(ctx, v597.1);
                let v600 = C::value_type(ctx, v597.0);
                let v601 = C::u8_from_uimm8(ctx, v596);
                let v604 = constructor_vec_insert_lane(ctx, v600, v602, v603, v601);
                let v605 = constructor_output_xmm(ctx, v604);
                // Rule at src/isa/x64/lower.isle line 1334.
                return Some(v605);
            }
        }
        &InstructionData::Trap {
            opcode: ref v642,
            code: ref v643,
        } => {
            match v642 {
                &Opcode::Trap => {
                    let v644 = &constructor_x64_ud2(ctx, v643);
                    let v645 = constructor_side_effect(ctx, v644);
                    // Rule at src/isa/x64/lower.isle line 1470.
                    return Some(v645);
                }
                &Opcode::ResumableTrap => {
                    let v644 = &constructor_x64_ud2(ctx, v643);
                    let v645 = constructor_side_effect(ctx, v644);
                    // Rule at src/isa/x64/lower.isle line 1510.
                    return Some(v645);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v296,
            arg: v297,
        } => {
            match v296 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            match v62.0 {
                                0x8 => {
                                    if v62.1 == 0x10 {
                                        let v1966 = constructor_xmm_uninit_value(ctx);
                                        let v1967 = &C::put_in_reg_mem(ctx, v297);
                                        let v1968 = constructor_vec_insert_lane(
                                            ctx, I8X16, v1966, v1967, 0x0,
                                        );
                                        let v1969 = &C::xmm_to_xmm_mem(ctx, v1968);
                                        let v1970 = constructor_x64_pxor(ctx, v1968, v1969);
                                        let v1971 = &C::xmm_to_xmm_mem(ctx, v1970);
                                        let v1972 = constructor_x64_pshufb(ctx, v1968, v1971);
                                        let v1973 = constructor_output_xmm(ctx, v1972);
                                        // Rule at src/isa/x64/lower.isle line 3630.
                                        return Some(v1973);
                                    }
                                }
                                0x10 => {
                                    if v62.1 == 0x8 {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1975 = constructor_xmm_uninit_value(ctx);
                                        let v1974 = RegMem::Reg { reg: v1065 };
                                        let v1976 = constructor_vec_insert_lane(
                                            ctx, I16X8, v1975, &v1974, 0x0,
                                        );
                                        let v1977 = constructor_vec_insert_lane(
                                            ctx, I16X8, v1976, &v1974, 0x1,
                                        );
                                        let v1978 = &C::xmm_to_xmm_mem(ctx, v1977);
                                        let v1979 = constructor_x64_pshufd(
                                            ctx,
                                            v1978,
                                            0x0,
                                            &OperandSize::Size32,
                                        );
                                        let v1980 = constructor_output_xmm(ctx, v1979);
                                        // Rule at src/isa/x64/lower.isle line 3636.
                                        return Some(v1980);
                                    }
                                }
                                0x20 => {
                                    if v62.1 == 0x4 {
                                        let v561 = C::value_type(ctx, v297);
                                        let v1608 = C::ty_scalar_float(ctx, v561);
                                        if let Some(v1609) = v1608 {
                                            let v1981 =
                                                constructor_lower_splat_32x4(ctx, F32X4, v297);
                                            let v1982 = constructor_output_xmm(ctx, v1981);
                                            // Rule at src/isa/x64/lower.isle line 3645.
                                            return Some(v1982);
                                        }
                                        let v1983 = constructor_lower_splat_32x4(ctx, I32X4, v297);
                                        let v1984 = constructor_output_xmm(ctx, v1983);
                                        // Rule at src/isa/x64/lower.isle line 3648.
                                        return Some(v1984);
                                    }
                                }
                                0x40 => {
                                    if v62.1 == 0x2 {
                                        let v561 = C::value_type(ctx, v297);
                                        let v1608 = C::ty_scalar_float(ctx, v561);
                                        if let Some(v1609) = v1608 {
                                            let v1985 =
                                                constructor_lower_splat_64x2(ctx, F64X2, v297);
                                            let v1986 = constructor_output_xmm(ctx, v1985);
                                            // Rule at src/isa/x64/lower.isle line 3658.
                                            return Some(v1986);
                                        }
                                        let v1987 = constructor_lower_splat_64x2(ctx, I64X2, v297);
                                        let v1988 = constructor_output_xmm(ctx, v1987);
                                        // Rule at src/isa/x64/lower.isle line 3661.
                                        return Some(v1988);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v298 = constructor_put_in_gpr(ctx, v297);
                    let v1870 = &constructor_write_pinned_gpr(ctx, v298);
                    let v1871 = constructor_side_effect(ctx, v1870);
                    // Rule at src/isa/x64/lower.isle line 3520.
                    return Some(v1871);
                }
                &Opcode::VanyTrue => {
                    let v498 = constructor_put_in_xmm(ctx, v297);
                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                    let v1989 = &constructor_x64_ptest(ctx, v1618, v498);
                    let v1990 = &constructor_x64_setcc(ctx, &CC::NZ);
                    let v1991 = constructor_with_flags(ctx, v1989, v1990);
                    let v1992 = C::output(ctx, v1991);
                    // Rule at src/isa/x64/lower.isle line 3674.
                    return Some(v1992);
                }
                &Opcode::VallTrue => {
                    let v498 = constructor_put_in_xmm(ctx, v297);
                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                    let v1634 = constructor_x64_pxor(ctx, v498, v1618);
                    let v561 = C::value_type(ctx, v297);
                    let v1993 = constructor_vec_int_type(ctx, v561);
                    let v1636 = &C::xmm_to_xmm_mem(ctx, v1634);
                    let v1994 = constructor_x64_pcmpeq(ctx, v1993, v498, v1636);
                    let v1995 = &C::xmm_to_xmm_mem(ctx, v1994);
                    let v1996 = &constructor_x64_ptest(ctx, v1995, v1994);
                    let v1997 = &constructor_x64_setcc(ctx, &CC::Z);
                    let v1998 = constructor_with_flags(ctx, v1996, v1997);
                    let v1999 = C::output(ctx, v1998);
                    // Rule at src/isa/x64/lower.isle line 3680.
                    return Some(v1999);
                }
                &Opcode::VhighBits => {
                    let v561 = C::value_type(ctx, v297);
                    let v2000 = C::multi_lane(ctx, v561);
                    if let Some(v2001) = v2000 {
                        match v2001.0 {
                            0x8 => {
                                if v2001.1 == 0x10 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v2004 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v498);
                                    let v2005 = constructor_output_gpr(ctx, v2004);
                                    // Rule at src/isa/x64/lower.isle line 3697.
                                    return Some(v2005);
                                }
                            }
                            0x10 => {
                                if v2001.1 == 0x8 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                    let v2010 = constructor_x64_packsswb(ctx, v498, v1618);
                                    let v2011 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v2010);
                                    let v1041 = Imm8Reg::Imm8 { imm: 0x8 };
                                    let v2012 = &C::imm8_reg_to_imm8_gpr(ctx, &v1041);
                                    let v2013 = constructor_x64_shr(ctx, I64, v2011, v2012);
                                    let v2014 = constructor_output_gpr(ctx, v2013);
                                    // Rule at src/isa/x64/lower.isle line 3712.
                                    return Some(v2014);
                                }
                            }
                            0x20 => {
                                if v2001.1 == 0x4 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v2006 =
                                        constructor_x64_movmskps(ctx, &OperandSize::Size32, v498);
                                    let v2007 = constructor_output_gpr(ctx, v2006);
                                    // Rule at src/isa/x64/lower.isle line 3700.
                                    return Some(v2007);
                                }
                            }
                            0x40 => {
                                if v2001.1 == 0x2 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v2008 =
                                        constructor_x64_movmskpd(ctx, &OperandSize::Size32, v498);
                                    let v2009 = constructor_output_gpr(ctx, v2008);
                                    // Rule at src/isa/x64/lower.isle line 3703.
                                    return Some(v2009);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v311 = constructor_imm(ctx, I8X16, 0x0);
                                let v312 = C::xmm_new(ctx, v311);
                                let v313 = &C::put_in_xmm_mem(ctx, v297);
                                let v314 = constructor_x64_psubb(ctx, v312, v313);
                                let v315 = constructor_output_xmm(ctx, v314);
                                // Rule at src/isa/x64/lower.isle line 786.
                                return Some(v315);
                            }
                            I16X8 => {
                                let v317 = constructor_imm(ctx, I16X8, 0x0);
                                let v318 = C::xmm_new(ctx, v317);
                                let v313 = &C::put_in_xmm_mem(ctx, v297);
                                let v319 = constructor_x64_psubw(ctx, v318, v313);
                                let v320 = constructor_output_xmm(ctx, v319);
                                // Rule at src/isa/x64/lower.isle line 789.
                                return Some(v320);
                            }
                            I32X4 => {
                                let v322 = constructor_imm(ctx, I32X4, 0x0);
                                let v323 = C::xmm_new(ctx, v322);
                                let v313 = &C::put_in_xmm_mem(ctx, v297);
                                let v324 = constructor_x64_psubd(ctx, v323, v313);
                                let v325 = constructor_output_xmm(ctx, v324);
                                // Rule at src/isa/x64/lower.isle line 792.
                                return Some(v325);
                            }
                            I64X2 => {
                                let v327 = constructor_imm(ctx, I64X2, 0x0);
                                let v328 = C::xmm_new(ctx, v327);
                                let v313 = &C::put_in_xmm_mem(ctx, v297);
                                let v329 = constructor_x64_psubq(ctx, v328, v313);
                                let v330 = constructor_output_xmm(ctx, v329);
                                // Rule at src/isa/x64/lower.isle line 795.
                                return Some(v330);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v298 = constructor_put_in_gpr(ctx, v297);
                            let v299 = constructor_x64_neg(ctx, v5, v298);
                            let v300 = constructor_output_gpr(ctx, v299);
                            // Rule at src/isa/x64/lower.isle line 772.
                            return Some(v300);
                        }
                        if v3 == I128 {
                            let v301 = C::put_in_regs(ctx, v297);
                            let v302 = constructor_value_regs_get_gpr(ctx, v301, 0x0);
                            let v303 = constructor_value_regs_get_gpr(ctx, v301, 0x1);
                            let v304 = &constructor_x64_neg_paired(ctx, I64, v302);
                            let v305 = constructor_imm(ctx, I64, 0x0);
                            let v306 = C::gpr_new(ctx, v305);
                            let v307 = &C::gpr_to_gpr_mem_imm(ctx, v303);
                            let v308 = &constructor_x64_sbb_paired(ctx, I64, v306, v307);
                            let v309 = constructor_with_flags(ctx, v304, v308);
                            let v310 = C::output(ctx, v309);
                            // Rule at src/isa/x64/lower.isle line 775.
                            return Some(v310);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v488 = &C::put_in_xmm_mem(ctx, v297);
                                let v489 = constructor_x64_pabsb(ctx, v488);
                                let v490 = constructor_output_xmm(ctx, v489);
                                // Rule at src/isa/x64/lower.isle line 1136.
                                return Some(v490);
                            }
                            I16X8 => {
                                let v488 = &C::put_in_xmm_mem(ctx, v297);
                                let v491 = constructor_x64_pabsw(ctx, v488);
                                let v492 = constructor_output_xmm(ctx, v491);
                                // Rule at src/isa/x64/lower.isle line 1139.
                                return Some(v492);
                            }
                            I32X4 => {
                                let v488 = &C::put_in_xmm_mem(ctx, v297);
                                let v493 = constructor_x64_pabsd(ctx, v488);
                                let v494 = constructor_output_xmm(ctx, v493);
                                // Rule at src/isa/x64/lower.isle line 1142.
                                return Some(v494);
                            }
                            I64X2 => {
                                let v363 = C::avx512vl_enabled(ctx, v3);
                                if v363 == true {
                                    let v495 = C::avx512f_enabled(ctx, v3);
                                    if v495 == true {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v496 = constructor_x64_vpabsq(ctx, v488);
                                        let v497 = constructor_output_xmm(ctx, v496);
                                        // Rule at src/isa/x64/lower.isle line 1146.
                                        return Some(v497);
                                    }
                                }
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v499 = constructor_imm(ctx, I64X2, 0x0);
                                let v500 = C::xmm_new(ctx, v499);
                                let v501 = &C::xmm_to_xmm_mem(ctx, v498);
                                let v502 = constructor_x64_psubq(ctx, v500, v501);
                                let v503 = &C::xmm_to_xmm_mem(ctx, v498);
                                let v504 = constructor_x64_blendvpd(ctx, v502, v503, v502);
                                let v505 = constructor_output_xmm(ctx, v504);
                                // Rule at src/isa/x64/lower.isle line 1156.
                                return Some(v505);
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v298 = constructor_put_in_gpr(ctx, v297);
                            let v506 = &constructor_x64_neg_paired(ctx, v5, v298);
                            let v507 = constructor_produces_flags_get_reg(ctx, v506);
                            let v508 = C::gpr_new(ctx, v507);
                            let v510 = &C::gpr_to_gpr_mem(ctx, v298);
                            let v511 = &constructor_cmove(ctx, v5, &CC::S, v510, v508);
                            let v512 = &constructor_produces_flags_ignore(ctx, v506);
                            let v513 = constructor_with_flags_reg(ctx, v512, v511);
                            let v514 = constructor_output_reg(ctx, v513);
                            // Rule at src/isa/x64/lower.isle line 1163.
                            return Some(v514);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v566 = constructor_i128_not(ctx, v297);
                            let v567 = C::output(ctx, v566);
                            // Rule at src/isa/x64/lower.isle line 1276.
                            return Some(v567);
                        }
                        let v61 = C::multi_lane(ctx, v3);
                        if let Some(v62) = v61 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v525 = constructor_vector_all_ones(ctx);
                            let v568 = &C::xmm_to_xmm_mem(ctx, v525);
                            let v571 = constructor_sse_xor(ctx, v3, v498, v568);
                            let v572 = constructor_output_xmm(ctx, v571);
                            // Rule at src/isa/x64/lower.isle line 1286.
                            return Some(v572);
                        }
                        let v135 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v136) = v135 {
                            let v298 = constructor_put_in_gpr(ctx, v297);
                            let v564 = constructor_x64_not(ctx, v3, v298);
                            let v565 = constructor_output_gpr(ctx, v564);
                            // Rule at src/isa/x64/lower.isle line 1261.
                            return Some(v565);
                        }
                        let v147 = C::ty_scalar_float(ctx, v3);
                        if let Some(v148) = v147 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v525 = constructor_vector_all_ones(ctx);
                            let v568 = &C::xmm_to_xmm_mem(ctx, v525);
                            let v569 = constructor_sse_xor(ctx, v148, v498, v568);
                            let v570 = constructor_output_xmm(ctx, v569);
                            // Rule at src/isa/x64/lower.isle line 1281.
                            return Some(v570);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1024 = constructor_do_bitrev8(ctx, I32, v298);
                                let v1025 = constructor_output_gpr(ctx, v1024);
                                // Rule at src/isa/x64/lower.isle line 2044.
                                return Some(v1025);
                            }
                            I16 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1026 = constructor_do_bitrev16(ctx, I32, v298);
                                let v1027 = constructor_output_gpr(ctx, v1026);
                                // Rule at src/isa/x64/lower.isle line 2047.
                                return Some(v1027);
                            }
                            I32 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1028 = constructor_do_bitrev32(ctx, I32, v298);
                                let v1029 = constructor_output_gpr(ctx, v1028);
                                // Rule at src/isa/x64/lower.isle line 2050.
                                return Some(v1029);
                            }
                            I64 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1030 = constructor_do_bitrev64(ctx, I64, v298);
                                let v1031 = constructor_output_gpr(ctx, v1030);
                                // Rule at src/isa/x64/lower.isle line 2053.
                                return Some(v1031);
                            }
                            I128 => {
                                let v301 = C::put_in_regs(ctx, v297);
                                let v938 = constructor_value_regs_get_gpr(ctx, v301, 0x1);
                                let v1032 = constructor_do_bitrev64(ctx, I64, v938);
                                let v1033 = C::gpr_to_reg(ctx, v1032);
                                let v1034 = C::put_in_regs(ctx, v297);
                                let v1035 = constructor_value_regs_get_gpr(ctx, v1034, 0x0);
                                let v1036 = constructor_do_bitrev64(ctx, I64, v1035);
                                let v1037 = C::gpr_to_reg(ctx, v1036);
                                let v1038 = C::value_regs(ctx, v1033, v1037);
                                let v1039 = C::output(ctx, v1038);
                                // Rule at src/isa/x64/lower.isle line 2056.
                                return Some(v1039);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v926 = C::ty_32_or_64(ctx, v3);
                        if let Some(v927) = v926 {
                            let v928 = C::use_lzcnt(ctx, v3);
                            match v928 {
                                true => {
                                    let v298 = constructor_put_in_gpr(ctx, v297);
                                    let v929 = constructor_x64_lzcnt(ctx, v927, v298);
                                    let v930 = constructor_output_gpr(ctx, v929);
                                    // Rule at src/isa/x64/lower.isle line 1805.
                                    return Some(v930);
                                }
                                false => {
                                    let v298 = constructor_put_in_gpr(ctx, v297);
                                    let v931 = constructor_do_clz(ctx, v927, v927, v298);
                                    let v932 = constructor_output_gpr(ctx, v931);
                                    // Rule at src/isa/x64/lower.isle line 1812.
                                    return Some(v932);
                                }
                                _ => {}
                            }
                        }
                        let v933 = C::ty_8_or_16(ctx, v3);
                        if let Some(v934) = v933 {
                            let v935 = constructor_extend_to_gpr(ctx, v297, I32, &ExtendKind::Zero);
                            let v936 = constructor_do_clz(ctx, I32, v934, v935);
                            let v937 = constructor_output_gpr(ctx, v936);
                            // Rule at src/isa/x64/lower.isle line 1819.
                            return Some(v937);
                        }
                        if v3 == I128 {
                            let v301 = C::put_in_regs(ctx, v297);
                            let v938 = constructor_value_regs_get_gpr(ctx, v301, 0x1);
                            let v939 = constructor_do_clz(ctx, I64, I64, v938);
                            let v940 = C::put_in_regs(ctx, v297);
                            let v941 = constructor_value_regs_get_gpr(ctx, v940, 0x0);
                            let v942 = constructor_do_clz(ctx, I64, I64, v941);
                            let v944 = RegMemImm::Imm { simm32: 0x40 };
                            let v945 = &C::gpr_mem_imm_new(ctx, &v944);
                            let v946 = constructor_x64_add(ctx, I64, v942, v945);
                            let v948 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v939);
                            let v949 = &C::gpr_to_gpr_mem(ctx, v939);
                            let v950 = &constructor_cmove(ctx, I64, &CC::NZ, v949, v946);
                            let v951 = constructor_with_flags_reg(ctx, v948, v950);
                            let v952 = C::gpr_new(ctx, v951);
                            let v953 = C::gpr_to_reg(ctx, v952);
                            let v954 = constructor_imm(ctx, I64, 0x0);
                            let v955 = C::value_regs(ctx, v953, v954);
                            let v956 = C::output(ctx, v955);
                            // Rule at src/isa/x64/lower.isle line 1824.
                            return Some(v956);
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v476 = C::use_bmi1(ctx, v3);
                        match v476 {
                            true => {
                                let v926 = C::ty_32_or_64(ctx, v3);
                                if let Some(v927) = v926 {
                                    let v298 = constructor_put_in_gpr(ctx, v297);
                                    let v957 = constructor_x64_tzcnt(ctx, v927, v298);
                                    let v958 = constructor_output_gpr(ctx, v957);
                                    // Rule at src/isa/x64/lower.isle line 1849.
                                    return Some(v958);
                                }
                            }
                            false => {
                                let v926 = C::ty_32_or_64(ctx, v3);
                                if let Some(v927) = v926 {
                                    let v298 = constructor_put_in_gpr(ctx, v297);
                                    let v959 = constructor_do_ctz(ctx, v927, v927, v298);
                                    let v960 = constructor_output_gpr(ctx, v959);
                                    // Rule at src/isa/x64/lower.isle line 1856.
                                    return Some(v960);
                                }
                            }
                            _ => {}
                        }
                        let v933 = C::ty_8_or_16(ctx, v3);
                        if let Some(v934) = v933 {
                            let v935 = constructor_extend_to_gpr(ctx, v297, I32, &ExtendKind::Zero);
                            let v961 = constructor_do_ctz(ctx, I32, v934, v935);
                            let v962 = constructor_output_gpr(ctx, v961);
                            // Rule at src/isa/x64/lower.isle line 1863.
                            return Some(v962);
                        }
                        if v3 == I128 {
                            let v301 = C::put_in_regs(ctx, v297);
                            let v302 = constructor_value_regs_get_gpr(ctx, v301, 0x0);
                            let v963 = constructor_do_ctz(ctx, I64, I64, v302);
                            let v940 = C::put_in_regs(ctx, v297);
                            let v964 = constructor_value_regs_get_gpr(ctx, v940, 0x1);
                            let v965 = constructor_do_ctz(ctx, I64, I64, v964);
                            let v944 = RegMemImm::Imm { simm32: 0x40 };
                            let v945 = &C::gpr_mem_imm_new(ctx, &v944);
                            let v966 = constructor_x64_add(ctx, I64, v965, v945);
                            let v967 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x40, v963);
                            let v968 = &C::gpr_to_gpr_mem(ctx, v966);
                            let v969 = &constructor_cmove(ctx, I64, &CC::Z, v968, v963);
                            let v970 = constructor_with_flags_reg(ctx, v967, v969);
                            let v971 = C::gpr_new(ctx, v970);
                            let v972 = C::gpr_to_reg(ctx, v971);
                            let v954 = constructor_imm(ctx, I64, 0x0);
                            let v973 = C::value_regs(ctx, v972, v954);
                            let v974 = C::output(ctx, v973);
                            // Rule at src/isa/x64/lower.isle line 1868.
                            return Some(v974);
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1041 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v1042 = &C::imm8_reg_to_imm8_gpr(ctx, &v1041);
                                let v1043 = constructor_x64_rotl(ctx, I16, v298, v1042);
                                let v1044 = constructor_output_gpr(ctx, v1043);
                                // Rule at src/isa/x64/lower.isle line 2123.
                                return Some(v1044);
                            }
                            I32 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1045 = constructor_x64_bswap(ctx, I32, v298);
                                let v1046 = constructor_output_gpr(ctx, v1045);
                                // Rule at src/isa/x64/lower.isle line 2126.
                                return Some(v1046);
                            }
                            I64 => {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v1047 = constructor_x64_bswap(ctx, I64, v298);
                                let v1048 = constructor_output_gpr(ctx, v1047);
                                // Rule at src/isa/x64/lower.isle line 2129.
                                return Some(v1048);
                            }
                            I128 => {
                                let v301 = C::put_in_regs(ctx, v297);
                                let v938 = constructor_value_regs_get_gpr(ctx, v301, 0x1);
                                let v1049 = constructor_x64_bswap(ctx, I64, v938);
                                let v1050 = C::gpr_to_reg(ctx, v1049);
                                let v1034 = C::put_in_regs(ctx, v297);
                                let v1035 = constructor_value_regs_get_gpr(ctx, v1034, 0x0);
                                let v1051 = constructor_x64_bswap(ctx, I64, v1035);
                                let v1052 = C::gpr_to_reg(ctx, v1051);
                                let v1053 = C::value_regs(ctx, v1050, v1052);
                                let v1054 = C::output(ctx, v1053);
                                // Rule at src/isa/x64/lower.isle line 2132.
                                return Some(v1054);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v975 = C::use_popcnt(ctx, v3);
                        if v975 == true {
                            let v926 = C::ty_32_or_64(ctx, v3);
                            if let Some(v927) = v926 {
                                let v298 = constructor_put_in_gpr(ctx, v297);
                                let v976 = constructor_x64_popcnt(ctx, v927, v298);
                                let v977 = constructor_output_gpr(ctx, v976);
                                // Rule at src/isa/x64/lower.isle line 1887.
                                return Some(v977);
                            }
                            let v933 = C::ty_8_or_16(ctx, v3);
                            if let Some(v934) = v933 {
                                let v935 =
                                    constructor_extend_to_gpr(ctx, v297, I32, &ExtendKind::Zero);
                                let v978 = constructor_x64_popcnt(ctx, I32, v935);
                                let v979 = constructor_output_gpr(ctx, v978);
                                // Rule at src/isa/x64/lower.isle line 1894.
                                return Some(v979);
                            }
                            if v3 == I128 {
                                let v301 = C::put_in_regs(ctx, v297);
                                let v302 = constructor_value_regs_get_gpr(ctx, v301, 0x0);
                                let v980 = constructor_x64_popcnt(ctx, I64, v302);
                                let v940 = C::put_in_regs(ctx, v297);
                                let v964 = constructor_value_regs_get_gpr(ctx, v940, 0x1);
                                let v981 = constructor_x64_popcnt(ctx, I64, v964);
                                let v982 = &C::gpr_to_gpr_mem_imm(ctx, v981);
                                let v983 = constructor_x64_add(ctx, I64, v980, v982);
                                let v984 = C::gpr_to_reg(ctx, v983);
                                let v985 = constructor_imm(ctx, I64, 0x0);
                                let v986 = C::value_regs(ctx, v984, v985);
                                let v987 = C::output(ctx, v986);
                                // Rule at src/isa/x64/lower.isle line 1901.
                                return Some(v987);
                            }
                        }
                        match v3 {
                            I128 => {
                                let v301 = C::put_in_regs(ctx, v297);
                                let v302 = constructor_value_regs_get_gpr(ctx, v301, 0x0);
                                let v992 = constructor_do_popcnt(ctx, I64, v302);
                                let v940 = C::put_in_regs(ctx, v297);
                                let v964 = constructor_value_regs_get_gpr(ctx, v940, 0x1);
                                let v993 = constructor_do_popcnt(ctx, I64, v964);
                                let v994 = &C::gpr_to_gpr_mem_imm(ctx, v993);
                                let v995 = constructor_x64_add(ctx, I64, v992, v994);
                                let v996 = C::gpr_to_reg(ctx, v995);
                                let v985 = constructor_imm(ctx, I64, 0x0);
                                let v997 = C::value_regs(ctx, v996, v985);
                                let v998 = C::output(ctx, v997);
                                // Rule at src/isa/x64/lower.isle line 1920.
                                return Some(v998);
                            }
                            I8X16 => {
                                let v363 = C::avx512vl_enabled(ctx, v3);
                                if v363 == true {
                                    let v999 = C::avx512bitalg_enabled(ctx, v3);
                                    if v999 == true {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1000 = constructor_x64_vpopcntb(ctx, v488);
                                        let v1001 = constructor_output_xmm(ctx, v1000);
                                        // Rule at src/isa/x64/lower.isle line 1993.
                                        return Some(v1001);
                                    }
                                }
                                let v1002 = C::popcount_4bit_table(ctx);
                                let v1003 = C::popcount_low_mask(ctx);
                                let v1004 = constructor_x64_xmm_load_const(ctx, I8X16, v1003);
                                let v1005 = constructor_put_in_xmm(ctx, v297);
                                let v1006 = &C::xmm_to_xmm_mem(ctx, v1004);
                                let v1007 = constructor_sse_and(ctx, I8X16, v1005, v1006);
                                let v1008 = constructor_put_in_xmm(ctx, v297);
                                let v1010 = RegMemImm::Imm { simm32: 0x4 };
                                let v1011 = &constructor_mov_rmi_to_xmm(ctx, &v1010);
                                let v1012 = constructor_x64_psrlw(ctx, v1008, v1011);
                                let v1013 = &C::xmm_to_xmm_mem(ctx, v1004);
                                let v1014 = constructor_sse_and(ctx, I8X16, v1012, v1013);
                                let v1015 = C::popcount_4bit_table(ctx);
                                let v1016 = constructor_x64_xmm_load_const(ctx, I8X16, v1015);
                                let v1017 = &C::xmm_to_xmm_mem(ctx, v1007);
                                let v1018 = constructor_x64_pshufb(ctx, v1016, v1017);
                                let v1019 = &C::xmm_to_xmm_mem(ctx, v1014);
                                let v1020 = constructor_x64_pshufb(ctx, v1016, v1019);
                                let v1021 = &C::xmm_to_xmm_mem(ctx, v1020);
                                let v1022 = constructor_x64_paddb(ctx, v1018, v1021);
                                let v1023 = constructor_output_xmm(ctx, v1022);
                                // Rule at src/isa/x64/lower.isle line 2027.
                                return Some(v1023);
                            }
                            _ => {}
                        }
                        let v926 = C::ty_32_or_64(ctx, v3);
                        if let Some(v927) = v926 {
                            let v298 = constructor_put_in_gpr(ctx, v297);
                            let v988 = constructor_do_popcnt(ctx, v927, v298);
                            let v989 = constructor_output_gpr(ctx, v988);
                            // Rule at src/isa/x64/lower.isle line 1910.
                            return Some(v989);
                        }
                        let v933 = C::ty_8_or_16(ctx, v3);
                        if let Some(v934) = v933 {
                            let v935 = constructor_extend_to_gpr(ctx, v297, I32, &ExtendKind::Zero);
                            let v990 = constructor_do_popcnt(ctx, I32, v935);
                            let v991 = constructor_output_gpr(ctx, v990);
                            // Rule at src/isa/x64/lower.isle line 1915.
                            return Some(v991);
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1132 = constructor_x64_sqrtss(ctx, v498);
                                let v1133 = constructor_output_xmm(ctx, v1132);
                                // Rule at src/isa/x64/lower.isle line 2324.
                                return Some(v1133);
                            }
                            F64 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1134 = constructor_x64_sqrtsd(ctx, v498);
                                let v1135 = constructor_output_xmm(ctx, v1134);
                                // Rule at src/isa/x64/lower.isle line 2326.
                                return Some(v1135);
                            }
                            F32X4 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1136 = constructor_x64_sqrtps(ctx, v498);
                                let v1137 = constructor_output_xmm(ctx, v1136);
                                // Rule at src/isa/x64/lower.isle line 2328.
                                return Some(v1137);
                            }
                            F64X2 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1138 = constructor_x64_sqrtpd(ctx, v498);
                                let v1139 = constructor_output_xmm(ctx, v1138);
                                // Rule at src/isa/x64/lower.isle line 2330.
                                return Some(v1139);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v538 = constructor_imm(ctx, F32, 0x80000000);
                                let v539 = &constructor_reg_to_xmm_mem(ctx, v538);
                                let v540 = constructor_x64_xorps(ctx, v498, v539);
                                let v541 = constructor_output_xmm(ctx, v540);
                                // Rule at src/isa/x64/lower.isle line 1197.
                                return Some(v541);
                            }
                            F64 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v543 = constructor_imm(ctx, F64, 0x8000000000000000);
                                let v544 = &constructor_reg_to_xmm_mem(ctx, v543);
                                let v545 = constructor_x64_xorpd(ctx, v498, v544);
                                let v546 = constructor_output_xmm(ctx, v545);
                                // Rule at src/isa/x64/lower.isle line 1200.
                                return Some(v546);
                            }
                            F32X4 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v525 = constructor_vector_all_ones(ctx);
                                let v548 = RegMemImm::Imm { simm32: 0x1F };
                                let v549 = &constructor_mov_rmi_to_xmm(ctx, &v548);
                                let v550 = constructor_x64_pslld(ctx, v525, v549);
                                let v551 = &C::xmm_to_xmm_mem(ctx, v550);
                                let v552 = constructor_x64_xorps(ctx, v498, v551);
                                let v553 = constructor_output_xmm(ctx, v552);
                                // Rule at src/isa/x64/lower.isle line 1203.
                                return Some(v553);
                            }
                            F64X2 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v525 = constructor_vector_all_ones(ctx);
                                let v555 = RegMemImm::Imm { simm32: 0x3F };
                                let v556 = &constructor_mov_rmi_to_xmm(ctx, &v555);
                                let v557 = constructor_x64_psllq(ctx, v525, v556);
                                let v558 = &C::xmm_to_xmm_mem(ctx, v557);
                                let v559 = constructor_x64_xorpd(ctx, v498, v558);
                                let v560 = constructor_output_xmm(ctx, v559);
                                // Rule at src/isa/x64/lower.isle line 1208.
                                return Some(v560);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v516 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v517 = &constructor_reg_to_xmm_mem(ctx, v516);
                                let v518 = constructor_x64_andps(ctx, v498, v517);
                                let v519 = constructor_output_xmm(ctx, v518);
                                // Rule at src/isa/x64/lower.isle line 1177.
                                return Some(v519);
                            }
                            F64 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v521 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v522 = &constructor_reg_to_xmm_mem(ctx, v521);
                                let v523 = constructor_x64_andpd(ctx, v498, v522);
                                let v524 = constructor_output_xmm(ctx, v523);
                                // Rule at src/isa/x64/lower.isle line 1180.
                                return Some(v524);
                            }
                            F32X4 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v525 = constructor_vector_all_ones(ctx);
                                let v527 = RegMemImm::Imm { simm32: 0x1 };
                                let v528 = &constructor_mov_rmi_to_xmm(ctx, &v527);
                                let v529 = constructor_x64_psrld(ctx, v525, v528);
                                let v530 = &C::xmm_to_xmm_mem(ctx, v529);
                                let v531 = constructor_x64_andps(ctx, v498, v530);
                                let v532 = constructor_output_xmm(ctx, v531);
                                // Rule at src/isa/x64/lower.isle line 1184.
                                return Some(v532);
                            }
                            F64X2 => {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v525 = constructor_vector_all_ones(ctx);
                                let v527 = RegMemImm::Imm { simm32: 0x1 };
                                let v528 = &constructor_mov_rmi_to_xmm(ctx, &v527);
                                let v533 = constructor_x64_psrlq(ctx, v525, v528);
                                let v534 = &C::xmm_to_xmm_mem(ctx, v533);
                                let v535 = constructor_x64_andpd(ctx, v498, v534);
                                let v536 = constructor_output_xmm(ctx, v535);
                                // Rule at src/isa/x64/lower.isle line 1190.
                                return Some(v536);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        match v561 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1773 =
                                            constructor_x64_roundss(ctx, v488, &RoundImm::RoundUp);
                                        let v1774 = constructor_output_xmm(ctx, v1773);
                                        // Rule at src/isa/x64/lower.isle line 3376.
                                        return Some(v1774);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1776 = C::libcall_1(ctx, &LibCall::CeilF32, v1065);
                                        let v1777 = constructor_output_reg(ctx, v1776);
                                        // Rule at src/isa/x64/lower.isle line 3379.
                                        return Some(v1777);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1778 =
                                            constructor_x64_roundsd(ctx, v488, &RoundImm::RoundUp);
                                        let v1779 = constructor_output_xmm(ctx, v1778);
                                        // Rule at src/isa/x64/lower.isle line 3382.
                                        return Some(v1779);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1781 = C::libcall_1(ctx, &LibCall::CeilF64, v1065);
                                        let v1782 = constructor_output_reg(ctx, v1781);
                                        // Rule at src/isa/x64/lower.isle line 3385.
                                        return Some(v1782);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1783 =
                                        constructor_x64_roundps(ctx, v488, &RoundImm::RoundUp);
                                    let v1784 = constructor_output_xmm(ctx, v1783);
                                    // Rule at src/isa/x64/lower.isle line 3388.
                                    return Some(v1784);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1785 =
                                        constructor_x64_roundpd(ctx, v488, &RoundImm::RoundUp);
                                    let v1786 = constructor_output_xmm(ctx, v1785);
                                    // Rule at src/isa/x64/lower.isle line 3391.
                                    return Some(v1786);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        match v561 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1788 = constructor_x64_roundss(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundDown,
                                        );
                                        let v1789 = constructor_output_xmm(ctx, v1788);
                                        // Rule at src/isa/x64/lower.isle line 3396.
                                        return Some(v1789);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1791 = C::libcall_1(ctx, &LibCall::FloorF32, v1065);
                                        let v1792 = constructor_output_reg(ctx, v1791);
                                        // Rule at src/isa/x64/lower.isle line 3399.
                                        return Some(v1792);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1793 = constructor_x64_roundsd(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundDown,
                                        );
                                        let v1794 = constructor_output_xmm(ctx, v1793);
                                        // Rule at src/isa/x64/lower.isle line 3402.
                                        return Some(v1794);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1796 = C::libcall_1(ctx, &LibCall::FloorF64, v1065);
                                        let v1797 = constructor_output_reg(ctx, v1796);
                                        // Rule at src/isa/x64/lower.isle line 3405.
                                        return Some(v1797);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1798 =
                                        constructor_x64_roundps(ctx, v488, &RoundImm::RoundDown);
                                    let v1799 = constructor_output_xmm(ctx, v1798);
                                    // Rule at src/isa/x64/lower.isle line 3408.
                                    return Some(v1799);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1800 =
                                        constructor_x64_roundpd(ctx, v488, &RoundImm::RoundDown);
                                    let v1801 = constructor_output_xmm(ctx, v1800);
                                    // Rule at src/isa/x64/lower.isle line 3411.
                                    return Some(v1801);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        match v561 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1818 = constructor_x64_roundss(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundZero,
                                        );
                                        let v1819 = constructor_output_xmm(ctx, v1818);
                                        // Rule at src/isa/x64/lower.isle line 3436.
                                        return Some(v1819);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1821 = C::libcall_1(ctx, &LibCall::TruncF32, v1065);
                                        let v1822 = constructor_output_reg(ctx, v1821);
                                        // Rule at src/isa/x64/lower.isle line 3439.
                                        return Some(v1822);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1823 = constructor_x64_roundsd(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundZero,
                                        );
                                        let v1824 = constructor_output_xmm(ctx, v1823);
                                        // Rule at src/isa/x64/lower.isle line 3442.
                                        return Some(v1824);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1826 = C::libcall_1(ctx, &LibCall::TruncF64, v1065);
                                        let v1827 = constructor_output_reg(ctx, v1826);
                                        // Rule at src/isa/x64/lower.isle line 3445.
                                        return Some(v1827);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1828 =
                                        constructor_x64_roundps(ctx, v488, &RoundImm::RoundZero);
                                    let v1829 = constructor_output_xmm(ctx, v1828);
                                    // Rule at src/isa/x64/lower.isle line 3448.
                                    return Some(v1829);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1830 =
                                        constructor_x64_roundpd(ctx, v488, &RoundImm::RoundZero);
                                    let v1831 = constructor_output_xmm(ctx, v1830);
                                    // Rule at src/isa/x64/lower.isle line 3451.
                                    return Some(v1831);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        match v561 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1803 = constructor_x64_roundss(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundNearest,
                                        );
                                        let v1804 = constructor_output_xmm(ctx, v1803);
                                        // Rule at src/isa/x64/lower.isle line 3416.
                                        return Some(v1804);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1806 = C::libcall_1(ctx, &LibCall::NearestF32, v1065);
                                        let v1807 = constructor_output_reg(ctx, v1806);
                                        // Rule at src/isa/x64/lower.isle line 3419.
                                        return Some(v1807);
                                    }
                                    _ => {}
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                match v1771 {
                                    true => {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1808 = constructor_x64_roundsd(
                                            ctx,
                                            v488,
                                            &RoundImm::RoundNearest,
                                        );
                                        let v1809 = constructor_output_xmm(ctx, v1808);
                                        // Rule at src/isa/x64/lower.isle line 3422.
                                        return Some(v1809);
                                    }
                                    false => {
                                        let v1065 = C::put_in_reg(ctx, v297);
                                        let v1811 = C::libcall_1(ctx, &LibCall::NearestF64, v1065);
                                        let v1812 = constructor_output_reg(ctx, v1811);
                                        // Rule at src/isa/x64/lower.isle line 3425.
                                        return Some(v1812);
                                    }
                                    _ => {}
                                }
                            }
                            F32X4 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1813 =
                                        constructor_x64_roundps(ctx, v488, &RoundImm::RoundNearest);
                                    let v1814 = constructor_output_xmm(ctx, v1813);
                                    // Rule at src/isa/x64/lower.isle line 3428.
                                    return Some(v1814);
                                }
                            }
                            F64X2 => {
                                let v3 = C::value_type(ctx, v2);
                                let v1771 = C::use_sse41(ctx, v3);
                                if v1771 == true {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1815 =
                                        constructor_x64_roundpd(ctx, v488, &RoundImm::RoundNearest);
                                    let v1816 = constructor_output_xmm(ctx, v1815);
                                    // Rule at src/isa/x64/lower.isle line 3431.
                                    return Some(v1816);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v561 = C::value_type(ctx, v297);
                    if v561 == R64 {
                        let v298 = constructor_put_in_gpr(ctx, v297);
                        let v1056 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0x0, v298);
                        let v1057 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1058 = constructor_with_flags(ctx, v1056, v1057);
                        let v1059 = C::output(ctx, v1058);
                        // Rule at src/isa/x64/lower.isle line 2140.
                        return Some(v1059);
                    }
                }
                &Opcode::IsInvalid => {
                    let v561 = C::value_type(ctx, v297);
                    if v561 == R64 {
                        let v298 = constructor_put_in_gpr(ctx, v297);
                        let v1061 =
                            &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, 0xFFFFFFFF, v298);
                        let v1057 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1062 = constructor_with_flags(ctx, v1061, v1057);
                        let v1063 = C::output(ctx, v1062);
                        // Rule at src/isa/x64/lower.isle line 2148.
                        return Some(v1063);
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1955 = &C::sinkable_load(ctx, v297);
                    if let Some(v1956) = v1955 {
                        let v561 = C::value_type(ctx, v297);
                        let v1962 = C::ty_64(ctx, v561);
                        if let Some(v1963) = v1962 {
                            let v1959 = &constructor_sink_load_to_xmm_mem(ctx, v1956);
                            let v1964 = constructor_x64_movsd_load(ctx, v1959);
                            let v1965 = constructor_output_xmm(ctx, v1964);
                            // Rule at src/isa/x64/lower.isle line 3625.
                            return Some(v1965);
                        }
                        let v1957 = C::ty_32(ctx, v561);
                        if let Some(v1958) = v1957 {
                            let v1959 = &constructor_sink_load_to_xmm_mem(ctx, v1956);
                            let v1960 = constructor_x64_movss_load(ctx, v1959);
                            let v1961 = constructor_output_xmm(ctx, v1960);
                            // Rule at src/isa/x64/lower.isle line 3623.
                            return Some(v1961);
                        }
                    }
                    let v561 = C::value_type(ctx, v297);
                    let v1608 = C::ty_scalar_float(ctx, v561);
                    if let Some(v1609) = v1608 {
                        let v1064 = constructor_output_value(ctx, v297);
                        // Rule at src/isa/x64/lower.isle line 3613.
                        return Some(v1064);
                    }
                    let v298 = constructor_put_in_gpr(ctx, v297);
                    let v1953 = constructor_bitcast_gpr_to_xmm(ctx, v561, v298);
                    let v1954 = constructor_output_xmm(ctx, v1953);
                    // Rule at src/isa/x64/lower.isle line 3618.
                    return Some(v1954);
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v301 = C::put_in_regs(ctx, v297);
                        let v3 = C::value_type(ctx, v2);
                        let v561 = C::value_type(ctx, v297);
                        let v562 = constructor_lower_bmask(ctx, v3, v561, v301);
                        let v563 = C::output(ctx, v562);
                        // Rule at src/isa/x64/lower.isle line 1254.
                        return Some(v563);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v301 = C::put_in_regs(ctx, v297);
                            let v302 = constructor_value_regs_get_gpr(ctx, v301, 0x0);
                            let v1095 = constructor_output_gpr(ctx, v302);
                            // Rule at src/isa/x64/lower.isle line 2261.
                            return Some(v1095);
                        }
                        let v561 = C::value_type(ctx, v297);
                        if v3 == v561 {
                            let v1064 = constructor_output_value(ctx, v297);
                            // Rule at src/isa/x64/lower.isle line 2255.
                            return Some(v1064);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I8X16 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1685 = constructor_x64_pmovsxbw(ctx, v488);
                                    let v1686 = constructor_output_xmm(ctx, v1685);
                                    // Rule at src/isa/x64/lower.isle line 3247.
                                    return Some(v1686);
                                }
                            }
                            I32X4 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I16X8 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1687 = constructor_x64_pmovsxwd(ctx, v488);
                                    let v1688 = constructor_output_xmm(ctx, v1687);
                                    // Rule at src/isa/x64/lower.isle line 3250.
                                    return Some(v1688);
                                }
                            }
                            I64X2 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I32X4 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1689 = constructor_x64_pmovsxdq(ctx, v488);
                                    let v1690 = constructor_output_xmm(ctx, v1689);
                                    // Rule at src/isa/x64/lower.isle line 3253.
                                    return Some(v1690);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I8X16 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                    let v1691 = constructor_x64_palignr(
                                        ctx,
                                        v498,
                                        v1618,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1692 = &C::xmm_to_xmm_mem(ctx, v1691);
                                    let v1693 = constructor_x64_pmovsxbw(ctx, v1692);
                                    let v1694 = constructor_output_xmm(ctx, v1693);
                                    // Rule at src/isa/x64/lower.isle line 3258.
                                    return Some(v1694);
                                }
                            }
                            I32X4 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I16X8 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                    let v1691 = constructor_x64_palignr(
                                        ctx,
                                        v498,
                                        v1618,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1692 = &C::xmm_to_xmm_mem(ctx, v1691);
                                    let v1695 = constructor_x64_pmovsxwd(ctx, v1692);
                                    let v1696 = constructor_output_xmm(ctx, v1695);
                                    // Rule at src/isa/x64/lower.isle line 3262.
                                    return Some(v1696);
                                }
                            }
                            I64X2 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I32X4 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1698 = constructor_x64_pshufd(
                                        ctx,
                                        v488,
                                        0xEE,
                                        &OperandSize::Size32,
                                    );
                                    let v1699 = &C::xmm_to_xmm_mem(ctx, v1698);
                                    let v1700 = constructor_x64_pmovsxdq(ctx, v1699);
                                    let v1701 = constructor_output_xmm(ctx, v1700);
                                    // Rule at src/isa/x64/lower.isle line 3266.
                                    return Some(v1701);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I8X16 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1702 = constructor_x64_pmovzxbw(ctx, v488);
                                    let v1703 = constructor_output_xmm(ctx, v1702);
                                    // Rule at src/isa/x64/lower.isle line 3271.
                                    return Some(v1703);
                                }
                            }
                            I32X4 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I16X8 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1704 = constructor_x64_pmovzxwd(ctx, v488);
                                    let v1705 = constructor_output_xmm(ctx, v1704);
                                    // Rule at src/isa/x64/lower.isle line 3274.
                                    return Some(v1705);
                                }
                            }
                            I64X2 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I32X4 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1706 = constructor_x64_pmovzxdq(ctx, v488);
                                    let v1707 = constructor_output_xmm(ctx, v1706);
                                    // Rule at src/isa/x64/lower.isle line 3277.
                                    return Some(v1707);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I8X16 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                    let v1691 = constructor_x64_palignr(
                                        ctx,
                                        v498,
                                        v1618,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1692 = &C::xmm_to_xmm_mem(ctx, v1691);
                                    let v1708 = constructor_x64_pmovzxbw(ctx, v1692);
                                    let v1709 = constructor_output_xmm(ctx, v1708);
                                    // Rule at src/isa/x64/lower.isle line 3282.
                                    return Some(v1709);
                                }
                            }
                            I32X4 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I16X8 {
                                    let v498 = constructor_put_in_xmm(ctx, v297);
                                    let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                    let v1691 = constructor_x64_palignr(
                                        ctx,
                                        v498,
                                        v1618,
                                        0x8,
                                        &OperandSize::Size32,
                                    );
                                    let v1692 = &C::xmm_to_xmm_mem(ctx, v1691);
                                    let v1710 = constructor_x64_pmovzxwd(ctx, v1692);
                                    let v1711 = constructor_output_xmm(ctx, v1710);
                                    // Rule at src/isa/x64/lower.isle line 3286.
                                    return Some(v1711);
                                }
                            }
                            I64X2 => {
                                let v561 = C::value_type(ctx, v297);
                                if v561 == I32X4 {
                                    let v488 = &C::put_in_xmm_mem(ctx, v297);
                                    let v1698 = constructor_x64_pshufd(
                                        ctx,
                                        v488,
                                        0xEE,
                                        &OperandSize::Size32,
                                    );
                                    let v1699 = &C::xmm_to_xmm_mem(ctx, v1698);
                                    let v1712 = constructor_x64_pmovzxdq(ctx, v1699);
                                    let v1713 = constructor_output_xmm(ctx, v1712);
                                    // Rule at src/isa/x64/lower.isle line 3290.
                                    return Some(v1713);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v561 = C::value_type(ctx, v297);
                        if v3 == v561 {
                            let v1064 = constructor_output_value(ctx, v297);
                            // Rule at src/isa/x64/lower.isle line 2157.
                            return Some(v1064);
                        }
                        match v3 {
                            I64 => {
                                let v1079 = C::def_inst(ctx, v297);
                                if let Some(v1080) = v1079 {
                                    let v1081 = C::first_result(ctx, v1080);
                                    if let Some(v1082) = v1081 {
                                        let v1083 = C::value_type(ctx, v1082);
                                        if v1083 == I32 {
                                            let v1084 = &C::inst_data(ctx, v1080);
                                            match v1084 {
                                                &InstructionData::Binary {
                                                    opcode: ref v1085,
                                                    args: ref v1086,
                                                } => {
                                                    match v1085 {
                                                        &Opcode::Iadd => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2187.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Isub => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2190.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Imul => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2193.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Band => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2196.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Bor => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2199.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Bxor => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2202.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2205.
                                                            return Some(v1064);
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v1064 =
                                                                constructor_output_value(ctx, v297);
                                                            // Rule at src/isa/x64/lower.isle line 2208.
                                                            return Some(v1064);
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::Load {
                                                    opcode: ref v1090,
                                                    arg: v1091,
                                                    flags: v1092,
                                                    offset: v1093,
                                                } => {
                                                    if let &Opcode::Uload32 = v1090 {
                                                        let v1064 =
                                                            constructor_output_value(ctx, v297);
                                                        // Rule at src/isa/x64/lower.isle line 2211.
                                                        return Some(v1064);
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                }
                                let v1068 = C::fits_in_32(ctx, v561);
                                if let Some(v1069) = v1068 {
                                    let v1070 = constructor_extend_to_gpr(
                                        ctx,
                                        v297,
                                        I64,
                                        &ExtendKind::Zero,
                                    );
                                    let v1075 = constructor_output_gpr(ctx, v1070);
                                    // Rule at src/isa/x64/lower.isle line 2169.
                                    return Some(v1075);
                                }
                            }
                            I128 => {
                                let v1068 = C::fits_in_32(ctx, v561);
                                if let Some(v1069) = v1068 {
                                    let v1070 = constructor_extend_to_gpr(
                                        ctx,
                                        v297,
                                        I64,
                                        &ExtendKind::Zero,
                                    );
                                    let v1071 = C::gpr_to_reg(ctx, v1070);
                                    let v1072 = constructor_imm(ctx, I64, 0x0);
                                    let v1073 = C::value_regs(ctx, v1071, v1072);
                                    let v1074 = C::output(ctx, v1073);
                                    // Rule at src/isa/x64/lower.isle line 2165.
                                    return Some(v1074);
                                }
                                if v561 == I64 {
                                    let v1065 = C::put_in_reg(ctx, v297);
                                    let v15 = constructor_imm(ctx, I64, 0x0);
                                    let v1066 = C::value_regs(ctx, v1065, v15);
                                    let v1067 = C::output(ctx, v1066);
                                    // Rule at src/isa/x64/lower.isle line 2161.
                                    return Some(v1067);
                                }
                            }
                            _ => {}
                        }
                        let v1068 = C::fits_in_32(ctx, v561);
                        if let Some(v1069) = v1068 {
                            let v1076 = C::fits_in_32(ctx, v3);
                            if let Some(v1077) = v1076 {
                                let v935 =
                                    constructor_extend_to_gpr(ctx, v297, I32, &ExtendKind::Zero);
                                let v1078 = constructor_output_gpr(ctx, v935);
                                // Rule at src/isa/x64/lower.isle line 2173.
                                return Some(v1078);
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        let v3 = C::value_type(ctx, v2);
                        let v1094 = constructor_generic_sextend(ctx, v297, v561, v3);
                        // Rule at src/isa/x64/lower.isle line 2247.
                        return Some(v1094);
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v1140 = constructor_x64_cvtss2sd(ctx, v498);
                            let v1141 = constructor_output_xmm(ctx, v1140);
                            // Rule at src/isa/x64/lower.isle line 2334.
                            return Some(v1141);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v1144 = constructor_x64_cvtsd2ss(ctx, v498);
                            let v1145 = constructor_output_xmm(ctx, v1144);
                            // Rule at src/isa/x64/lower.isle line 2342.
                            return Some(v1145);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v1146 = constructor_x64_cvtpd2ps(ctx, v498);
                            let v1147 = constructor_output_xmm(ctx, v1146);
                            // Rule at src/isa/x64/lower.isle line 2346.
                            return Some(v1147);
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v498 = constructor_put_in_xmm(ctx, v297);
                            let v1142 = constructor_x64_cvtps2pd(ctx, v498);
                            let v1143 = constructor_output_xmm(ctx, v1142);
                            // Rule at src/isa/x64/lower.isle line 2338.
                            return Some(v1143);
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        let v1608 = C::ty_scalar_float(ctx, v561);
                        if let Some(v1609) = v1608 {
                            let v3 = C::value_type(ctx, v2);
                            let v1610 = constructor_cvt_float_to_uint_seq(ctx, v3, v297, false);
                            let v1611 = constructor_output_gpr(ctx, v1610);
                            // Rule at src/isa/x64/lower.isle line 3080.
                            return Some(v1611);
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v561 = C::value_type(ctx, v297);
                        let v1608 = C::ty_scalar_float(ctx, v561);
                        if let Some(v1609) = v1608 {
                            let v3 = C::value_type(ctx, v2);
                            let v1614 = constructor_cvt_float_to_sint_seq(ctx, v3, v297, false);
                            let v1615 = constructor_output_gpr(ctx, v1614);
                            // Rule at src/isa/x64/lower.isle line 3086.
                            return Some(v1615);
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v561 = C::value_type(ctx, v297);
                            if v561 == F32X4 {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                let v1634 = constructor_x64_pxor(ctx, v498, v1618);
                                let v1635 = constructor_x64_maxps(ctx, v498, v1634);
                                let v1636 = &C::xmm_to_xmm_mem(ctx, v1634);
                                let v1637 = constructor_x64_pcmpeqd(ctx, v1634, v1636);
                                let v527 = RegMemImm::Imm { simm32: 0x1 };
                                let v1638 = &constructor_mov_rmi_to_xmm(ctx, &v527);
                                let v1639 = constructor_x64_psrld(ctx, v1637, v1638);
                                let v1640 = constructor_x64_cvtdq2ps(ctx, v1639);
                                let v1641 = &C::xmm_to_xmm_mem(ctx, v1635);
                                let v1642 = constructor_x64_cvttps2dq(ctx, F32X4, v1641);
                                let v1643 = &C::xmm_to_xmm_mem(ctx, v1640);
                                let v1644 = constructor_x64_subps(ctx, v1635, v1643);
                                let v1645 = &C::xmm_to_xmm_mem(ctx, v1644);
                                let v1646 = constructor_x64_cmpps(
                                    ctx,
                                    v1640,
                                    v1645,
                                    &FcmpImm::LessThanOrEqual,
                                );
                                let v1647 = &C::xmm_to_xmm_mem(ctx, v1644);
                                let v1648 = constructor_x64_cvttps2dq(ctx, F32X4, v1647);
                                let v1649 = &C::xmm_to_xmm_mem(ctx, v1646);
                                let v1650 = constructor_x64_pxor(ctx, v1648, v1649);
                                let v1651 = &C::xmm_to_xmm_mem(ctx, v1646);
                                let v1652 = constructor_x64_pxor(ctx, v1646, v1651);
                                let v1653 = &C::xmm_to_xmm_mem(ctx, v1652);
                                let v1654 = constructor_x64_pmaxsd(ctx, v1650, v1653);
                                let v1655 = &C::xmm_to_xmm_mem(ctx, v1642);
                                let v1656 = constructor_x64_paddd(ctx, v1654, v1655);
                                let v1657 = constructor_output_xmm(ctx, v1656);
                                // Rule at src/isa/x64/lower.isle line 3164.
                                return Some(v1657);
                            }
                        }
                        let v561 = C::value_type(ctx, v297);
                        let v1608 = C::ty_scalar_float(ctx, v561);
                        if let Some(v1609) = v1608 {
                            let v1612 = constructor_cvt_float_to_uint_seq(ctx, v3, v297, true);
                            let v1613 = constructor_output_gpr(ctx, v1612);
                            // Rule at src/isa/x64/lower.isle line 3083.
                            return Some(v1613);
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v561 = C::value_type(ctx, v297);
                            if v561 == F32X4 {
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1618 = &C::xmm_to_xmm_mem(ctx, v498);
                                let v1619 =
                                    constructor_x64_cmpps(ctx, v498, v1618, &FcmpImm::Equal);
                                let v1620 = &C::xmm_to_xmm_mem(ctx, v1619);
                                let v1621 = constructor_x64_andps(ctx, v498, v1620);
                                let v1622 = &C::xmm_to_xmm_mem(ctx, v1621);
                                let v1623 = constructor_x64_pxor(ctx, v1619, v1622);
                                let v1625 = &C::xmm_to_xmm_mem(ctx, v1621);
                                let v1626 = constructor_x64_cvttps2dq(ctx, F32X4, v1625);
                                let v1627 = &C::xmm_to_xmm_mem(ctx, v1623);
                                let v1628 = constructor_x64_pand(ctx, v1626, v1627);
                                let v548 = RegMemImm::Imm { simm32: 0x1F };
                                let v1629 = &constructor_mov_rmi_to_xmm(ctx, &v548);
                                let v1630 = constructor_x64_psrad(ctx, v1628, v1629);
                                let v1631 = &C::xmm_to_xmm_mem(ctx, v1626);
                                let v1632 = constructor_x64_pxor(ctx, v1630, v1631);
                                let v1633 = constructor_output_xmm(ctx, v1632);
                                // Rule at src/isa/x64/lower.isle line 3093.
                                return Some(v1633);
                            }
                        }
                        let v561 = C::value_type(ctx, v297);
                        let v1608 = C::ty_scalar_float(ctx, v561);
                        if let Some(v1609) = v1608 {
                            let v1616 = constructor_cvt_float_to_sint_seq(ctx, v3, v297, true);
                            let v1617 = constructor_output_gpr(ctx, v1616);
                            // Rule at src/isa/x64/lower.isle line 3089.
                            return Some(v1617);
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v561 = C::value_type(ctx, v297);
                                let v1068 = C::fits_in_32(ctx, v561);
                                if let Some(v1069) = v1068 {
                                    let v1567 = C::ty_int(ctx, v1069);
                                    if let Some(v1568) = v1567 {
                                        let v1070 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1569 = &C::gpr_to_gpr_mem(ctx, v1070);
                                        let v1570 = constructor_x64_cvtsi2ss(ctx, I64, v1569);
                                        let v1571 = constructor_output_xmm(ctx, v1570);
                                        // Rule at src/isa/x64/lower.isle line 3008.
                                        return Some(v1571);
                                    }
                                }
                            }
                            F64 => {
                                let v561 = C::value_type(ctx, v297);
                                let v1068 = C::fits_in_32(ctx, v561);
                                if let Some(v1069) = v1068 {
                                    let v1567 = C::ty_int(ctx, v1069);
                                    if let Some(v1568) = v1567 {
                                        let v1070 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v1569 = &C::gpr_to_gpr_mem(ctx, v1070);
                                        let v1572 = constructor_x64_cvtsi2sd(ctx, I64, v1569);
                                        let v1573 = constructor_output_xmm(ctx, v1572);
                                        // Rule at src/isa/x64/lower.isle line 3011.
                                        return Some(v1573);
                                    }
                                }
                            }
                            F32X4 => {
                                let v363 = C::avx512vl_enabled(ctx, v3);
                                if v363 == true {
                                    let v495 = C::avx512f_enabled(ctx, v3);
                                    if v495 == true {
                                        let v488 = &C::put_in_xmm_mem(ctx, v297);
                                        let v1589 = constructor_x64_vcvtudq2ps(ctx, v488);
                                        let v1590 = constructor_output_xmm(ctx, v1589);
                                        // Rule at src/isa/x64/lower.isle line 3029.
                                        return Some(v1590);
                                    }
                                }
                                let v498 = constructor_put_in_xmm(ctx, v297);
                                let v1592 = RegMemImm::Imm { simm32: 0x10 };
                                let v1593 = &constructor_mov_rmi_to_xmm(ctx, &v1592);
                                let v1594 = constructor_x64_pslld(ctx, v498, v1593);
                                let v1595 = &constructor_mov_rmi_to_xmm(ctx, &v1592);
                                let v1596 = constructor_x64_psrld(ctx, v1594, v1595);
                                let v1597 = &C::xmm_to_xmm_mem(ctx, v1596);
                                let v1598 = constructor_x64_psubd(ctx, v498, v1597);
                                let v1599 = constructor_x64_cvtdq2ps(ctx, v1596);
                                let v527 = RegMemImm::Imm { simm32: 0x1 };
                                let v1600 = &constructor_mov_rmi_to_xmm(ctx, &v527);
                                let v1601 = constructor_x64_psrld(ctx, v1598, v1600);
                                let v1602 = constructor_x64_cvtdq2ps(ctx, v1601);
                                let v1603 = &C::xmm_to_xmm_mem(ctx, v1602);
                                let v1604 = constructor_x64_addps(ctx, v1602, v1603);
                                let v1605 = &C::xmm_to_xmm_mem(ctx, v1599);
                                let v1606 = constructor_x64_addps(ctx, v1604, v1605);
                                let v1607 = constructor_output_xmm(ctx, v1606);
                                // Rule at src/isa/x64/lower.isle line 3056.
                                return Some(v1607);
                            }
                            F64X2 => {
                                let v1079 = C::def_inst(ctx, v297);
                                if let Some(v1080) = v1079 {
                                    let v1084 = &C::inst_data(ctx, v1080);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1576,
                                        arg: v1577,
                                    } = v1084
                                    {
                                        if let &Opcode::UwidenLow = v1576 {
                                            let v1578 = C::value_type(ctx, v1577);
                                            if v1578 == I32X4 {
                                                let v1579 = C::fcvt_uint_mask_const(ctx);
                                                let v1580 = constructor_x64_xmm_load_const(
                                                    ctx, I32X4, v1579,
                                                );
                                                let v1581 = constructor_put_in_xmm(ctx, v1577);
                                                let v1582 = &C::xmm_to_xmm_mem(ctx, v1580);
                                                let v1583 =
                                                    constructor_x64_unpcklps(ctx, v1581, v1582);
                                                let v1584 = C::fcvt_uint_mask_high_const(ctx);
                                                let v1585 = constructor_x64_xmm_load_const(
                                                    ctx, I32X4, v1584,
                                                );
                                                let v1586 = &C::xmm_to_xmm_mem(ctx, v1585);
                                                let v1587 =
                                                    constructor_x64_subpd(ctx, v1583, v1586);
                                                let v1588 = constructor_output_xmm(ctx, v1587);
                                                // Rule at src/isa/x64/lower.isle line 3021.
                                                return Some(v1588);
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v561 = C::value_type(ctx, v297);
                        if v561 == I64 {
                            let v298 = constructor_put_in_gpr(ctx, v297);
                            let v1574 = constructor_cvt_u64_to_float_seq(ctx, v3, v298);
                            let v1575 = constructor_output_xmm(ctx, v1574);
                            // Rule at src/isa/x64/lower.isle line 3014.
                            return Some(v1575);
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v561 = C::value_type(ctx, v297);
                                match v561 {
                                    I8 => {
                                        let v1548 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1549 = &C::gpr_to_gpr_mem(ctx, v1548);
                                        let v1550 = constructor_x64_cvtsi2ss(ctx, I32, v1549);
                                        let v1551 = constructor_output_xmm(ctx, v1550);
                                        // Rule at src/isa/x64/lower.isle line 2980.
                                        return Some(v1551);
                                    }
                                    I16 => {
                                        let v1548 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1549 = &C::gpr_to_gpr_mem(ctx, v1548);
                                        let v1550 = constructor_x64_cvtsi2ss(ctx, I32, v1549);
                                        let v1551 = constructor_output_xmm(ctx, v1550);
                                        // Rule at src/isa/x64/lower.isle line 2983.
                                        return Some(v1551);
                                    }
                                    _ => {}
                                }
                                let v1552 = C::ty_int(ctx, v561);
                                if let Some(v1553) = v1552 {
                                    let v1554 = C::fits_in_64(ctx, v1553);
                                    if let Some(v1555) = v1554 {
                                        let v1556 = &constructor_put_in_gpr_mem(ctx, v297);
                                        let v1557 = constructor_x64_cvtsi2ss(ctx, v1555, v1556);
                                        let v1558 = constructor_output_xmm(ctx, v1557);
                                        // Rule at src/isa/x64/lower.isle line 2986.
                                        return Some(v1558);
                                    }
                                }
                            }
                            F64 => {
                                let v561 = C::value_type(ctx, v297);
                                match v561 {
                                    I8 => {
                                        let v1548 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1549 = &C::gpr_to_gpr_mem(ctx, v1548);
                                        let v1559 = constructor_x64_cvtsi2sd(ctx, I32, v1549);
                                        let v1560 = constructor_output_xmm(ctx, v1559);
                                        // Rule at src/isa/x64/lower.isle line 2989.
                                        return Some(v1560);
                                    }
                                    I16 => {
                                        let v1548 = constructor_extend_to_gpr(
                                            ctx,
                                            v297,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v1549 = &C::gpr_to_gpr_mem(ctx, v1548);
                                        let v1559 = constructor_x64_cvtsi2sd(ctx, I32, v1549);
                                        let v1560 = constructor_output_xmm(ctx, v1559);
                                        // Rule at src/isa/x64/lower.isle line 2992.
                                        return Some(v1560);
                                    }
                                    _ => {}
                                }
                                let v1552 = C::ty_int(ctx, v561);
                                if let Some(v1553) = v1552 {
                                    let v1554 = C::fits_in_64(ctx, v1553);
                                    if let Some(v1555) = v1554 {
                                        let v1556 = &constructor_put_in_gpr_mem(ctx, v297);
                                        let v1561 = constructor_x64_cvtsi2sd(ctx, v1555, v1556);
                                        let v1562 = constructor_output_xmm(ctx, v1561);
                                        // Rule at src/isa/x64/lower.isle line 2995.
                                        return Some(v1562);
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v561 = C::value_type(ctx, v297);
                    if v561 == I32X4 {
                        let v498 = constructor_put_in_xmm(ctx, v297);
                        let v1563 = constructor_x64_cvtdq2ps(ctx, v498);
                        let v1564 = constructor_output_xmm(ctx, v1563);
                        // Rule at src/isa/x64/lower.isle line 2998.
                        return Some(v1564);
                    }
                }
                &Opcode::FcvtLowFromSint => {
                    let v498 = constructor_put_in_xmm(ctx, v297);
                    let v561 = C::value_type(ctx, v297);
                    let v1565 = constructor_x64_cvtdq2pd(ctx, v561, v498);
                    let v1566 = constructor_output_xmm(ctx, v1565);
                    // Rule at src/isa/x64/lower.isle line 3003.
                    return Some(v1566);
                }
                &Opcode::Isplit => {
                    let v561 = C::value_type(ctx, v297);
                    if v561 == I128 {
                        let v301 = C::put_in_regs(ctx, v297);
                        let v2019 = C::value_regs_get(ctx, v301, 0x0);
                        let v2020 = C::value_regs_get(ctx, v301, 0x1);
                        let v2021 = C::value_reg(ctx, v2019);
                        let v2022 = C::value_reg(ctx, v2020);
                        let v2023 = C::output_pair(ctx, v2021, v2022);
                        // Rule at src/isa/x64/lower.isle line 3725.
                        return Some(v2023);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1872,
            constant_handle: v1873,
        } => {
            if let &Opcode::Vconst = v1872 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1874 = C::const_to_vconst(ctx, v1873);
                    let v3 = C::value_type(ctx, v2);
                    let v1875 = constructor_x64_xmm_load_const(ctx, v3, v1874);
                    let v1876 = constructor_output_xmm(ctx, v1875);
                    // Rule at src/isa/x64/lower.isle line 3525.
                    return Some(v1876);
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1441,
            global_value: v1442,
        } => {
            match v1441 {
                &Opcode::SymbolValue => {
                    let v1443 = C::symbol_value_data(ctx, v1442);
                    if let Some(v1444) = v1443 {
                        let v1448 = constructor_load_ext_name(ctx, v1444.0, v1444.2);
                        let v1449 = constructor_output_reg(ctx, v1448);
                        // Rule at src/isa/x64/lower.isle line 2840.
                        return Some(v1449);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1443 = C::symbol_value_data(ctx, v1442);
                        if let Some(v1444) = v1443 {
                            let v3 = C::value_type(ctx, v2);
                            let v2024 = &C::tls_model(ctx, v3);
                            match v2024 {
                                &TlsModel::ElfGd => {
                                    let v2025 = constructor_elf_tls_get_addr(ctx, v1444.0);
                                    let v2026 = constructor_output_gpr(ctx, v2025);
                                    // Rule at src/isa/x64/lower.isle line 3733.
                                    return Some(v2026);
                                }
                                &TlsModel::Macho => {
                                    let v2027 = constructor_macho_tls_get_addr(ctx, v1444.0);
                                    let v2028 = constructor_output_gpr(ctx, v2027);
                                    // Rule at src/isa/x64/lower.isle line 3736.
                                    return Some(v2028);
                                }
                                &TlsModel::Coff => {
                                    let v2029 = constructor_coff_tls_get_addr(ctx, v1444.0);
                                    let v2030 = constructor_output_gpr(ctx, v2029);
                                    // Rule at src/isa/x64/lower.isle line 3739.
                                    return Some(v2030);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v18,
            imm: v19,
        } => {
            if let &Opcode::F32const = v18 {
                let v20 = C::u64_from_ieee32(ctx, v19);
                let v22 = constructor_imm(ctx, F32, v20);
                let v23 = constructor_output_reg(ctx, v22);
                // Rule at src/isa/x64/lower.isle line 27.
                return Some(v23);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v24,
            imm: v25,
        } => {
            if let &Opcode::F64const = v24 {
                let v26 = C::u64_from_ieee64(ctx, v25);
                let v28 = constructor_imm(ctx, F64, v26);
                let v29 = constructor_output_reg(ctx, v28);
                // Rule at src/isa/x64/lower.isle line 32.
                return Some(v29);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v13 = constructor_imm(ctx, I64, v9);
                        let v15 = constructor_imm(ctx, I64, 0x0);
                        let v16 = C::value_regs(ctx, v13, v15);
                        let v17 = C::output(ctx, v16);
                        // Rule at src/isa/x64/lower.isle line 20.
                        return Some(v17);
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        // Rule at src/isa/x64/lower.isle line 15.
                        return Some(v11);
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v55,
            arg: v56,
            destination: v57,
            table: v58,
        } => {
            if let &Opcode::BrTable = v55 {
                let v60 = C::jump_table_targets(ctx, arg1);
                if let Some(v61) = v60 {
                    let v64 = constructor_put_in_gpr(ctx, v56);
                    let v59 = C::value_type(ctx, v56);
                    let v65 = &constructor_jmp_table_seq(ctx, v59, v64, v61.0, &v61.1);
                    let v66 = constructor_emit_side_effect(ctx, v65);
                    // Rule at src/isa/x64/lower.isle line 2961.
                    return Some(v66);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v9,
            arg: v10,
            blocks: ref v11,
        } => {
            if let &Opcode::Brif = v9 {
                let v26 = C::two_targets(ctx, arg1);
                if let Some(v27) = v26 {
                    let v12 = C::maybe_uextend(ctx, v10);
                    if let Some(v13) = v12 {
                        let v14 = C::def_inst(ctx, v13);
                        if let Some(v15) = v14 {
                            let v16 = &C::inst_data(ctx, v15);
                            match v16 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v33,
                                    args: ref v34,
                                    cond: ref v35,
                                } => {
                                    if let &Opcode::Fcmp = v33 {
                                        let v36 = C::unpack_value_array_2(ctx, v34);
                                        let v39 = &constructor_emit_fcmp(ctx, v35, v36.0, v36.1);
                                        let v40 =
                                            &constructor_jmp_cond_fcmp(ctx, v39, v27.0, v27.1);
                                        let v41 = constructor_emit_side_effect(ctx, v40);
                                        // Rule at src/isa/x64/lower.isle line 2922.
                                        return Some(v41);
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v17,
                                    args: ref v18,
                                    cond: ref v19,
                                } => {
                                    if let &Opcode::Icmp = v17 {
                                        let v20 = C::unpack_value_array_2(ctx, v18);
                                        let v30 = &constructor_emit_cmp(ctx, v19, v20.0, v20.1);
                                        let v31 =
                                            &constructor_jmp_cond_icmp(ctx, v30, v27.0, v27.1);
                                        let v32 = constructor_emit_side_effect(ctx, v31);
                                        // Rule at src/isa/x64/lower.isle line 2919.
                                        return Some(v32);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v42 = C::value_type(ctx, v10);
                    if v42 == I128 {
                        let v44 = C::put_in_regs(ctx, v10);
                        let v45 = &constructor_cmp_zero_i128(ctx, &CC::Z, v44);
                        let v46 = &constructor_jmp_cond_icmp(ctx, v45, v27.0, v27.1);
                        let v47 = constructor_emit_side_effect(ctx, v46);
                        // Rule at src/isa/x64/lower.isle line 2925.
                        return Some(v47);
                    }
                    let v48 = C::ty_int_bool_or_ref(ctx, v42);
                    if let Some(v49) = v48 {
                        let v50 = &constructor_cmp_zero_int_bool_ref(ctx, v10);
                        let v52 = &constructor_jmp_cond(ctx, &CC::NZ, v27.0, v27.1);
                        let v53 = &constructor_with_flags_side_effect(ctx, v50, v52);
                        let v54 = constructor_emit_side_effect(ctx, v53);
                        // Rule at src/isa/x64/lower.isle line 2929.
                        return Some(v54);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    // Rule at src/isa/x64/lower.isle line 2914.
                    return Some(v8);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 252.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 253.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 250.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 251.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 254.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and", "src/isa/x64/lower.isle line 249"
    )
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 313.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 314.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 311.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 312.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 315.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_or", "src/isa/x64/lower.isle line 310"
    )
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: ValueRegs) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 324.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 398.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v5 = constructor_x64_lea(ctx, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = &C::amode_imm_reg_reg_shift(ctx, 0x0, v5, v10, 0x0);
            let v14 = &C::amode_to_synthetic_amode(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 472.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_x64_load(ctx, I64, v15, &ExtKind::None);
            let v18 = RegMemImm::Reg { reg: v17 };
            let v19 = &constructor_ishl_i8x16_mask(ctx, &v18);
            // Rule at src/isa/x64/lower.isle line 482.
            return v19.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 463.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ishl_i8x16_mask", "src/isa/x64/lower.isle line 457"
    )
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v24, arg1);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, v35, arg1);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 510.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v5 = constructor_x64_lea(ctx, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = &C::amode_imm_reg_reg_shift(ctx, 0x0, v5, v10, 0x0);
            let v14 = &C::amode_to_synthetic_amode(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 581.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_x64_load(ctx, I64, v15, &ExtKind::None);
            let v18 = RegMemImm::Reg { reg: v17 };
            let v19 = &constructor_ushr_i8x16_mask(ctx, &v18);
            // Rule at src/isa/x64/lower.isle line 592.
            return v19.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 572.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ushr_i8x16_mask", "src/isa/x64/lower.isle line 566"
    )
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm { simm32: 0x7F };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, v21, arg1);
    let v25 = constructor_imm(ctx, I64, 0x0);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3F);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm { simm32: 0x40 };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, v37, arg1);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src/isa/x64/lower.isle line 620.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg { reg: v7 } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm { simm32: 0x8 };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg { reg: v12 };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src/isa/x64/lower.isle line 688.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_imm(ctx, arg0, 0x8);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg { reg: v21 };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src/isa/x64/lower.isle line 692.
            return v23.clone();
        }
        &RegMemImm::Imm { simm32: v2 } => {
            let v4 = C::u32_add(ctx, v2, 0x8);
            let v5 = RegMemImm::Imm { simm32: v4 };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src/isa/x64/lower.isle line 686.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sshr_i8x16_bigger_shift", "src/isa/x64/lower.isle line 685"
    )
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 1091.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 1092.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 1093.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and_not", "src/isa/x64/lower.isle line 1090"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src/isa/x64/lower.isle line 1246.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src/isa/x64/lower.isle line 1238.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/x64/lower.isle line 1227.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/x64/lower.isle line 1215"
    )
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(ctx: &mut C, arg0: Value) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src/isa/x64/lower.isle line 1269.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1317.
                        return Some(true);
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        // Rule at src/isa/x64/lower.isle line 1316.
                        return Some(true);
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v22,
                constant_handle: v23,
            } => {
                if let &Opcode::Vconst = v22 {
                    let v24 = C::vconst_all_ones_or_all_zeros(ctx, v23);
                    if let Some(v25) = v24 {
                        // Rule at src/isa/x64/lower.isle line 1318.
                        return Some(true);
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &RegMem,
    arg3: u8,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v5 = constructor_x64_pinsrb(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1345.
            return v5;
        }
        I16X8 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v6 = constructor_x64_pinsrw(ctx, arg1, v4, arg3);
            // Rule at src/isa/x64/lower.isle line 1349.
            return v6;
        }
        I32X4 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v8 = constructor_x64_pinsrd(ctx, arg1, v4, arg3, &OperandSize::Size32);
            // Rule at src/isa/x64/lower.isle line 1353.
            return v8;
        }
        I64X2 => {
            let v4 = &C::reg_mem_to_gpr_mem(ctx, arg2);
            let v10 = constructor_x64_pinsrd(ctx, arg1, v4, arg3, &OperandSize::Size64);
            // Rule at src/isa/x64/lower.isle line 1357.
            return v10;
        }
        F32X4 => {
            let v11 = &C::reg_mem_to_xmm_mem(ctx, arg2);
            let v12 = C::sse_insertps_lane_imm(ctx, arg3);
            let v13 = constructor_x64_insertps(ctx, arg1, v11, v12);
            // Rule at src/isa/x64/lower.isle line 1361.
            return v13;
        }
        F64X2 => {
            match arg3 {
                0x0 => {
                    if let &RegMem::Reg { reg: v14 } = arg2 {
                        let v15 = &constructor_reg_to_xmm_mem(ctx, v14);
                        let v16 = constructor_x64_movsd_regmove(ctx, arg1, v15);
                        // Rule at src/isa/x64/lower.isle line 1383.
                        return v16;
                    }
                    let v11 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                    let v17 = constructor_x64_movsd_load(ctx, v11);
                    let v18 = &C::xmm_to_xmm_mem(ctx, v17);
                    let v19 = constructor_x64_movsd_regmove(ctx, arg1, v18);
                    // Rule at src/isa/x64/lower.isle line 1385.
                    return v19;
                }
                0x1 => {
                    let v11 = &C::reg_mem_to_xmm_mem(ctx, arg2);
                    let v20 = constructor_x64_movlhps(ctx, arg1, v11);
                    // Rule at src/isa/x64/lower.isle line 1393.
                    return v20;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/x64/lower.isle line 1342"
    )
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v10 = C::gpr_new(ctx, v8);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src/isa/x64/lower.isle line 1401.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/x64/lower.isle line 1400"
    )
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v5 = constructor_imm_i64(ctx, I64, -0x1);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsr_or_else(ctx, arg0, arg2, v6);
    let v8 = C::gpr_to_reg(ctx, v7);
    let v9 = C::ty_bits_u64(ctx, arg1);
    let v11 = C::u64_sub(ctx, v9, 0x1);
    let v12 = constructor_imm(ctx, arg0, v11);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &constructor_reg_to_gpr_mem_imm(ctx, v8);
    let v15 = constructor_x64_sub(ctx, arg0, v13, v14);
    // Rule at src/isa/x64/lower.isle line 1839.
    return v15;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v4 = C::ty_bits_u64(ctx, arg1);
    let v5 = constructor_imm(ctx, I64, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = constructor_bsf_or_else(ctx, arg0, arg2, v6);
    // Rule at src/isa/x64/lower.isle line 1882.
    return v7;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm { simm32: 0xF0F0F0F };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v73 = RegMemImm::Imm { simm32: 0x1010101 };
            let v74 = &C::gpr_mem_imm_new(ctx, &v73);
            let v75 = constructor_x64_mul(ctx, I32, v71, v74);
            let v77 = Imm8Reg::Imm8 { imm: 0x18 };
            let v78 = &C::imm8_reg_to_imm8_gpr(ctx, &v77);
            let v79 = constructor_x64_shr(ctx, I32, v75, v78);
            // Rule at src/isa/x64/lower.isle line 1973.
            return v79;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xF0F0F0F0F0F0F0F);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem_imm(ctx, v39);
            let v41 = constructor_x64_mul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 { imm: 0x38 };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src/isa/x64/lower.isle line 1930.
            return v45;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_popcnt", "src/isa/x64/lower.isle line 1929"
    )
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 { imm: 0x1 };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 { imm: 0x2 };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xF0F0F0F0F0F0F0F);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 { imm: 0x4 };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src/isa/x64/lower.isle line 2062.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFF00FF00FF00FF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x8 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2085.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFFFF0000FFFF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x10 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2097.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xFFFFFFFF);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 { imm: 0x20 };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src/isa/x64/lower.isle line 2109.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_bitrev64", "src/isa/x64/lower.isle line 2108"
    )
}

// Generated as internal constructor for term generic_sextend.
pub fn constructor_generic_sextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: Type,
) -> InstOutput {
    if arg1 == arg2 {
        let v3 = constructor_output_value(ctx, arg0);
        // Rule at src/isa/x64/lower.isle line 2220.
        return v3;
    }
    match arg2 {
        I64 => {
            let v10 = C::fits_in_32(ctx, arg1);
            if let Some(v11) = v10 {
                let v14 = constructor_extend_to_gpr(ctx, arg0, I64, &ExtendKind::Sign);
                let v20 = constructor_output_gpr(ctx, v14);
                // Rule at src/isa/x64/lower.isle line 2240.
                return v20;
            }
        }
        I128 => {
            if arg1 == I64 {
                let v4 = C::put_in_reg(ctx, arg0);
                let v5 = constructor_put_in_gpr(ctx, arg0);
                let v6 = constructor_spread_sign_bit(ctx, v5);
                let v7 = C::gpr_to_reg(ctx, v6);
                let v8 = C::value_regs(ctx, v4, v7);
                let v9 = C::output(ctx, v8);
                // Rule at src/isa/x64/lower.isle line 2230.
                return v9;
            }
            let v10 = C::fits_in_32(ctx, arg1);
            if let Some(v11) = v10 {
                let v14 = constructor_extend_to_gpr(ctx, arg0, I64, &ExtendKind::Sign);
                let v15 = constructor_spread_sign_bit(ctx, v14);
                let v16 = C::gpr_to_reg(ctx, v14);
                let v17 = C::gpr_to_reg(ctx, v15);
                let v18 = C::value_regs(ctx, v16, v17);
                let v19 = C::output(ctx, v18);
                // Rule at src/isa/x64/lower.isle line 2234.
                return v19;
            }
        }
        _ => {}
    }
    let v10 = C::fits_in_32(ctx, arg1);
    if let Some(v11) = v10 {
        let v21 = C::fits_in_32(ctx, arg2);
        if let Some(v22) = v21 {
            let v24 = constructor_extend_to_gpr(ctx, arg0, I32, &ExtendKind::Sign);
            let v25 = constructor_output_gpr(ctx, v24);
            // Rule at src/isa/x64/lower.isle line 2244.
            return v25;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "generic_sextend", "src/isa/x64/lower.isle line 2217"
    )
}

// Generated as internal constructor for term spread_sign_bit.
pub fn constructor_spread_sign_bit<C: Context>(ctx: &mut C, arg0: Gpr) -> Gpr {
    let v3 = Imm8Reg::Imm8 { imm: 0x3F };
    let v4 = &C::imm8_reg_to_imm8_gpr(ctx, &v3);
    let v5 = constructor_x64_sar(ctx, I64, arg0, v4);
    // Rule at src/isa/x64/lower.isle line 2226.
    return v5;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
        let v10 = RegMemImm::Imm { simm32: 0x0 };
        let v11 = &C::gpr_mem_imm_new(ctx, &v10);
        let v12 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v11, v5);
        let v14 = &constructor_x64_setcc(ctx, &CC::Z);
        let v15 = constructor_with_flags_reg(ctx, v12, v14);
        let v16 = C::gpr_new(ctx, v15);
        let v17 = &C::gpr_mem_imm_new(ctx, &v10);
        let v18 = &constructor_x64_cmp(ctx, &OperandSize::Size64, v17, v7);
        let v19 = &constructor_x64_setcc(ctx, &CC::Z);
        let v20 = constructor_with_flags_reg(ctx, v18, v19);
        let v21 = C::gpr_new(ctx, v20);
        let v23 = &C::gpr_to_gpr_mem_imm(ctx, v16);
        let v24 = &constructor_x64_test(ctx, &OperandSize::Size8, v23, v21);
        let v25 = &constructor_icmp_cond_result(ctx, v24, v2);
        // Rule at src/isa/x64/lower.isle line 2943.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_zero_i128", "src/isa/x64/lower.isle line 2942"
    )
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v4, v3);
    // Rule at src/isa/x64/lower.isle line 2954.
    return v5.clone();
}

// Generated as internal constructor for term lower_splat_32x4.
pub fn constructor_lower_splat_32x4<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Xmm {
    let v2 = &C::put_in_reg_mem(ctx, arg1);
    let v3 = constructor_xmm_uninit_value(ctx);
    let v5 = constructor_vec_insert_lane(ctx, arg0, v3, v2, 0x0);
    let v6 = &C::xmm_to_xmm_mem(ctx, v5);
    let v8 = constructor_x64_pshufd(ctx, v6, 0x0, &OperandSize::Size32);
    // Rule at src/isa/x64/lower.isle line 3652.
    return v8;
}

// Generated as internal constructor for term lower_splat_64x2.
pub fn constructor_lower_splat_64x2<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Xmm {
    let v2 = C::put_in_reg(ctx, arg1);
    let v4 = constructor_xmm_uninit_value(ctx);
    let v3 = RegMem::Reg { reg: v2 };
    let v6 = constructor_vec_insert_lane(ctx, arg0, v4, &v3, 0x0);
    let v8 = constructor_vec_insert_lane(ctx, arg0, v6, &v3, 0x1);
    // Rule at src/isa/x64/lower.isle line 3665.
    return v8;
}
